{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"RetroAchievements Development Docs","text":"<p>Welcome to the RetroAchievements Development documentation! These docs provide extensive information on both the conceptual and technical aspects of making achievements.</p>"},{"location":"#basics","title":"Basics","text":"<ul> <li>Adding Games to the Database<ul> <li>Everything you ever wanted to know (but were too scared to ask) about hashes</li> <li>Patch Guide</li> </ul> </li> <li>RAM digging<ul> <li>Utilizing Game Genie, Game Shark, Codebreaker, Action Replay, etc. codes </li> </ul> </li> <li>Code Notes<ul> <li>Formatting conventions</li> </ul> </li> </ul>"},{"location":"#achievement-editor","title":"Achievement Editor","text":"<p>There are several tools and options available to a developer. Knowing how to properly utilize them will improve the quality of your sets. These tools/options can be used in the Achievement Editor:</p> <p></p>"},{"location":"#flags","title":"Flags","text":"<ul> <li> <p><code>PauseIf</code> Flag</p> <ul> <li><code>PauseIf</code> with hit counts</li> </ul> </li> <li> <p><code>ResetIf</code> Flag</p> <ul> <li><code>ResetIf</code> with hit counts</li> </ul> </li> <li> <p><code>ResetNextIf</code> Flag</p> </li> <li> <p><code>AddSource</code> Flag</p> </li> <li> <p><code>SubSource</code> Flag</p> <ul> <li>Checking for a negative result</li> </ul> </li> <li> <p><code>AddHits</code> and <code>SubHits</code> Flag</p> </li> <li> <p><code>AddAddress</code> Flag</p> </li> <li> <p><code>AndNext</code> and <code>OrNext</code> Flags</p> </li> <li> <p><code>Measured</code> and <code>MeasuredIf</code> Flags</p> </li> <li> <p><code>Trigger</code> Flag</p> </li> </ul>"},{"location":"#types","title":"Types","text":"<ul> <li>Mem</li> <li>Value</li> <li>Delta<ul> <li><code>Mem &gt; Delta</code> Comparisons</li> </ul> </li> <li>Prior</li> <li>BCD</li> <li>Float</li> </ul>"},{"location":"#sizes","title":"Sizes","text":"<ul> <li>bit0 - bit7</li> <li>8-Bit</li> <li>16-Bit</li> <li>24-Bit</li> <li>32-Bit</li> <li>Lower4 and Upper4</li> <li>16-Bit BE</li> <li>24-Bit BE</li> <li>32-Bit BE</li> <li>BitCount</li> <li>Float</li> <li>MBF32</li> </ul>"},{"location":"#general-comparisons","title":"General Comparisons","text":"<ul> <li><code>=</code></li> <li><code>&lt;</code></li> <li><code>&lt;=</code></li> <li><code>&gt;</code></li> <li><code>&gt;=</code></li> <li><code>!=</code></li> </ul>"},{"location":"#flag-specific-comparisons","title":"Flag Specific Comparisons","text":"<ul> <li><code>*</code></li> <li><code>/</code></li> <li><code>&amp;</code></li> </ul>"},{"location":"#other-toolkit-features","title":"Other Toolkit Features","text":"<ul> <li>Hit Counts<ul> <li>Using with Reset If</li> <li>Using with Pause If</li> </ul> </li> <li>Alt Groups</li> </ul>"},{"location":"#protections","title":"Protections","text":"<ul> <li>Demo Protection<ul> <li>Finding and testing demo addresses</li> </ul> </li> <li>Save Protection<ul> <li>Delta and Prior</li> <li>Using in-game timers</li> <li>Using event flags</li> </ul> </li> <li>Password Protection</li> <li>Cheat Protection</li> <li>Multiplayer Protection</li> <li>Other<ul> <li>Dipswitch</li> <li>BIOS (PlayStation and Saturn)</li> </ul> </li> </ul>"},{"location":"#logic-tips-and-tricks","title":"Logic Tips and Tricks","text":"<ul> <li>Checkpoints hits</li> <li>Pause Locks</li> <li>Using Hit Counts as a timer</li> <li>Using Delta Values and Hit Counts to Detect an Increment</li> <li>Circumvent the Problem of a Counter Incrementing Twice in the Same Frame<ul> <li><code>note: need to add something about how the toolkit still uses hex even if the value is in BCD</code></li> </ul> </li> <li>Various types of chains</li> <li>When to use Reset If or Pause If</li> <li>When to use Delta or Prior</li> <li>Using BitCount for collectables</li> <li>Using Add Source with <code>Mem / Mem</code> comparisons</li> <li>Creating a Timer with Reset If hits based on the speed of the game</li> <li>Using <code>bit0</code> to include or exclude odd-numbered values</li> </ul>"},{"location":"#lesser-known-features","title":"Lesser-Known Features","text":"<ul> <li>Double-Clicking bitflags while in 8-bit view</li> <li>Right-Clicking addresses in the editor to jump to them in the Memory Inspector (also works with offsets to jump to the current address)</li> <li>Highlighting conditions and holding CTRL while clicking to change a field in multiple conditions at once</li> </ul>"},{"location":"#workflow-tips","title":"Workflow Tips","text":"<ul> <li>Using Google Sheets and Notepad++</li> <li>Editing local file</li> </ul>"},{"location":"#things-to-avoid-and-why","title":"Things to Avoid and Why","text":"<ul> <li>Redundant Reset Ifs</li> <li>Single-Condition achievements</li> <li>Text-Based addresses</li> </ul>"},{"location":"#see-also","title":"See Also","text":"<ul> <li>Point Distribution</li> <li>Badge Creation</li> <li>Rich Presence</li> <li>Leaderboards</li> <li>RATools</li> <li>Making Tutorial Videos</li> <li>Syntax Table</li> </ul>"},{"location":"basics/","title":"Basics","text":""},{"location":"basics/#how-it-works","title":"How It Works","text":"<p>An achievement consists of multiple conditions that must be true in order for it to be awarded. These conditions are based on logic that utilizes a game's RAM. If an emulator or core supports RetroAchievements, the achievement processing will begin upon loading a game. The conditions for each achievement are constantly scanned to see if they have been met. Once all conditions have been met, the achievement will unlock. After all achievements in a set have been unlocked, the player will earn the game's mastery badge.</p> <p>The typical process of creating an achievement involves these steps:</p> <ul> <li>Finding addresses in the game's RAM where relevant information is stored. Examples include stage or map ID, current health, timer, points, inventory slots, etc.</li> <li>Create conditions that make up the logic</li> <li>Test if the achievement is working as expected</li> </ul> <p>It is very common for these steps to be repeated multiple times in order to stabalize an achievement.</p>"},{"location":"basics/#getting-started","title":"Getting Started","text":"<p>Ensure that you have an emulator from the website's download page.</p> <p>For the purposes of this guide, we'll use RALibRetro with the Genesis Plus GX core to demonstrate and the game Sonic the Hedgehog. We are using RALibRetro but the same applies to any emulator that supports RAIntegration.</p> <p>To begin, run the RALibRetro executable and login when prompted. If you have not used the Genesis Plus GX core before, you can install it by going to Settings -&gt; Manage Cores -&gt; selecting Sega Genesis in the drop down menu -&gt; clicking Download to the right of the core name. Once the core is installed, go to File -&gt; Select Core -&gt; Sega Genesis -&gt; Genesis Plus GX. Now that you have the core selected, you'll need to load the game. Go to File -&gt; Load Game and select the Sonic the Hedgehog ROM (we recommend using No Intro ROMs by default).</p>"},{"location":"basics/#memory-inspector","title":"Memory Inspector","text":"<p>You should now have your main window running Sonic. There are 3 other dialogs we'll be using, which can be found under RetroAchievements in the menu. We'll be dealing with the Memory Inspector first:</p> <p></p> <p>The Memory Inspector can be used to find addresses in RAM for us to use. Essentially you are on a treasure hunt for memory locations - this dialog will help you examine and filter the game's RAM while the game is running.</p> <p>NOTE: If you want a step-by-step video explanation on finding memory addresses, you can view this updated video. For another video resource, you can view this older video.</p> <p>See also: Memory Inspector Overview and Memory Digging Tips.</p> <p>To keep things simple, we'll start by looking for the memory address which holds the number of rings we have collected:</p> <ul> <li>Load the game and ensure the Memory Inspector window is open</li> <li>Start a new game</li> <li>Click the New Search button in the Memory Inspector</li> <li>Run your first filter by clicking Filter Once</li> <li>Clicking on addresses in the results window will jump to those addresses in the Memory View and allow you to monitor them while playing the game.</li> <li>Play the game for a moment, but do not collect any rings</li> <li>Run a second filter by clicking Filter Once again</li> <li>Return to the game, but this time collect at least one ring</li> <li>In the Memory Inspector window, changed the Filter to &gt; and click Filter Once again</li> <li>Each time you perform the last two steps, the number of results will get smaller. Continue doing this until there are only 5-10 results; it may take several attempts.</li> <li>Continue with the game and you should see the values in memory change as you collect rings. If you don't, or if something doesn't look right, try another address. With the first Sonic the Hedgehog, the memory address for the number of rings is <code>0xfe20</code>.</li> </ul> <p>Save States</p> <p>If you use save states, you can switch back and forth between them  to alter what is in RAM. This is a great way to filter out bad candidates. You can search for values that remain the same (I.e. If you know the value didn't change, use <code>=</code>), or values that are different (use 'not equal', symbol <code>!=</code>). Using the example above, you can collect a ring then use the \"&gt;\" filter, take a few steps then use the \"=\" filter (since the number of rings did not change), collect more rings and use the \"&gt;\" filter again, etc.</p> <p>Every Game Is Different</p> <p>There's unfortunately no guarantee from game to game on how the developers have stored their data (4-bit, 8-bit, 16-bit, binary-coded decimals, negative/inverted, i.e. using 0xff/0xffff to represent 'set', or plain randomly), but eventually you should come across some good addresses. If you are struggling to find good values, remember that there is no shame in asking for help!</p> <p>Tip</p> <p>Try entering new values directly into the memory viewer. This can have devastating effects on a game, do exactly what you expect, or do nothing at all! Use with caution!</p> <p>When you have found an address you are happy with, you can type a note in the Code Notes window and click Publish. This will store the note in the database.</p> <p>Publishing Code Notes</p> <p>When a code note is published, it is being saved to the RetroAchievements database. It will appear in the Memory Inspector the next time you load the game and on the website via the Code Notes section for that game entry.</p> <p>You can find more useful Memory Digging Tips here.</p>"},{"location":"basics/#achievement-sets","title":"Achievement Sets","text":"<p>So the memory location for the number of rings is stored at <code>0xfe20</code> - note to a non-programmer, we're dealing in hexadecimal numeral system which can be daunting, but don't worry, essentially it's just numbers and letters instead of only numbers, and not forgetting <code>0x</code> at the start to show that it's a memory location in hex. We've found an address we're interested in and stored it using Publish. We now want to create a new achievement.</p> <p>Go to the RetroAchievements in the menu, choose Assets List and you'll see this dialog:</p> <p></p> <p>Here we group all the achievements we know about into three sets:</p> <ol> <li> <p>Core Achievements (the main, public Achievement set),</p> </li> <li> <p>Unofficial/User Achievements (public, but will not award you points: for peer review),</p> </li> <li> <p>Local Achievements (exclusive to your PC).</p> </li> </ol> <p>In the Achievements dialog, click Local Achievements (top left), then Add New Achievement (top right). This will add a blank entry to the list in the center. Double click on it: if it's not already open, this should select it and open the Achievement Editor dialog.</p>"},{"location":"basics/#achievement-editor","title":"Achievement Editor","text":"<p>This is how it looks:</p> <p></p> <p>This is the final dialog where we bring all the data together. Most of the top fields are self explanatory, I.e. Title, Description, Points. The main one is the 'Requirements' part.</p> <p>Let's say we want to add an achievement for collecting a certain number of rings. Let's say 15 rings for simplicity. After filling out the fields at the top and selecting a suitable icon (in this example we used the gold trophy badge (00136), but you can upload a new one), we need to fill out Requirements. We have one requirement, that the number of rings is at least 15. Next click is Add New Requirement.</p> <p>Clicking this button will add several default values to the Requirements list. These defaults just ensure that something relatively sensible is added to the list. For now, ignoring the field 'Special?'. When we clicked create, the default memory value will be whatever value you last left in the memory dialog.</p> <p>Next we will change these values to the following:</p> <ul> <li>Size: <code>16-bit</code> - we're using 16-bit because the value can exceed 255 (which is 0xff in hex)</li> <li>Memory: <code>0xfe20</code></li> <li>Cmp: <code>&gt;=</code> - this is the comparison to make. We could have any comparison here, but it's sensible to have \"greater than or equal to\". This is important because if we get 10 rings then a super ring box to have 20, we would miss out having exactly 15 rings.</li> <li>Type: <code>Value</code> - we're comparing this memory value to a fixed value: 15</li> <li>Size: <code>Empty</code> - this is only relevant when comparing memory to memory</li> <li>Mem/Val: <code>15</code> - the number of rings required: the value we are comparing the memory to</li> <li>Hit Count: <code>0</code> - ignore this for now, its useful for when something needs to happen a certain number of times</li> </ul> <p>With that set, we don't have any more conditions to add, so we return to the Achievements Dialog. To be safe, we should save our progress by hitting Save Local! This saves everything to file locally to ensure that we won't lose any progress.</p> <ul> <li>Note: An achievement should have more than one requirement to avoid it triggering at the wrong time (i.e. playing demo mode). In this example, we are using only one requirement to simplify the explanation. See more Achievement Creation Tips here.</li> </ul>"},{"location":"basics/#testing-the-achievement","title":"Testing the Achievement","text":"<p>We can now 'activate' this achievement locally by checking the box next to Active on the right-hand side in the Achievement Editor or by selecting the achievement in Achievement Sets and clicking Activate Selected. This will start monitoring these memory locations and will award the achievement once all the conditions are true. Now we can go ahead and test to see if this achievement works!</p> <p></p> <p>If we press <code>Esc</code> in-game, you will see the achievement show up as a demonstration of what it would look like in the in-game overlay!</p> <p></p> <p>Although the achievement worked fine in our tests, an achievement with logic like that is not ready to be officially released. First of all, it has only one condition: \"collected rings &gt;= 15\". The problem is that the memory address used to record the number of collected rings is also used when the game runs in \"demo mode\" (AI playing the game after you wait a while on the title screen). So, if Sonic collects 15 rings in demo mode this achievement will trigger, which is unwanted.</p> <p>Check the tips in the next section below to know how to improve the logic of your achievement and then make it acceptable to be officially released.</p>"},{"location":"basics/#important-tips","title":"Important Tips","text":"<p>Here are some tips you have to keep in mind when creating your achievements:</p> <ul> <li> <p>Never Avoid making achievements with only one condition as much as you can. Otherwise it will most likely pop at the wrong time. This is the most common error by a developer</p> </li> <li> <p>If the game has a demo mode (AI plays the game after you wait a while on the title screen), make sure to find the address for it and add a condition so your achievements don't trigger in demo mode. You'll also need to know how to use PauseIf and ResetIf.</p> </li> <li> <p>PauseIf cheat codes: If the game has a cheat code to increase lives, select stages, etc., make sure to find the addresses for it and add some kind of protection in your achievements. OK, maybe it's not a very basic topic, but you have to keep it in mind when creating an official achievement set.</p> </li> <li> <p>Avoid creating achievements for just entering a stage. As it can be earned by a password or a stage select cheat code. It is preferred to make achievements for finishing stages, like in this template here. Also, do not create achievements for just starting a game or \"starting a game with character X\".</p> </li> <li> <p>If you want to create an achievement for getting a unique item in the game, add some conditions to make sure the player obtained the item where it is supposed to be obtained, like in this template here. Otherwise the achievement can be earned by using password or loading a saved game.</p> </li> <li> <p>Avoid making too many achievements about simple things that require minimal effort. Examples of what NOT to do: get one coin or one mushroom on Super Mario Bros.</p> </li> <li> <p>Be aware of the unwelcome achievement's design concepts.</p> </li> <li> <p>Be creative with your achievements. Those covering unique features and details of the game are the most welcome. The players love when that little detail of a game they love is supported on an achievement. Reading a walkthrough on GameFAQs can give some inspiration too.</p> </li> <li> <p>It can take a while to understand how the memory works in a game, so try spending as much time with it as you can, especially if it's your first attempt at developing achievements. </p> </li> </ul> <p>You can find more in the Tips and Tricks page.</p>"},{"location":"basics/#next-steps","title":"Next Steps","text":"<p>Now that you know how to use the Memory Inspector, and the Achievement Editor. It's time to learn new techniques and practice:</p> <ul> <li> <p>In order to refine your achievement logic, you can see what features you have in the Achievement Logic Features page.</p> </li> <li> <p>Another way to learn is by looking at existing achievements that other devs made with an extra explanation in the Real Examples page.</p> </li> <li> <p>You can also see some generic examples in the Achievement Templates page.</p> </li> <li> <p>Once you have learned the basic techniques, you can continue your quest to become an achievement developer by following the steps explained here: How to Become an Achievement Developer</p> </li> </ul> <p>Have fun!</p>"},{"location":"badges/badgeiconcreation/","title":"Badge and Icon Creation","text":""},{"location":"badges/badgeiconcreation/#game-icons","title":"Game Icons","text":"<p>Icons are user uploaded images that are used throughout the site to represent a game. Due to their prominence on game and user pages they are worth special attention. These icons should be representative of the game and its common themes, and therefore should be instantly recognizable.</p> <ul> <li>Sonic the Hedgehog's game Icon </li> </ul> <p> </p>"},{"location":"badges/badgeiconcreation/#designing-new-game-icons-styling-guide","title":"Designing New Game Icons - Styling Guide","text":""},{"location":"badges/badgeiconcreation/#game-mastery-icons-must-represent-the-associated-game-by-using-official-art-only","title":"Game Mastery Icons must represent the associated game by using 'Official' art only.","text":"<ul> <li>Sprites from the game (or models)</li> <li>Box Art / Regional Box Art</li> <li>Concept Art</li> <li>CD / OST Art</li> <li>Manual Art</li> <li>Guidebook Art</li> <li>Advertisements</li> <li>Or any other 'Official' Source of artwork.</li> </ul>"},{"location":"badges/badgeiconcreation/#mastery-icons-must-not","title":"Mastery Icons must not","text":"<ul> <li>Use art from a different port</li> <li>Use fan art sourced from external sources</li> <li>Contain anything vulgar, offensive or pornographic</li> </ul>"},{"location":"badges/badgeiconcreation/#mastery-icons-may","title":"Mastery Icons may","text":"<ul> <li>Add in custom borders or other adornments</li> <li>Stylize official art or combine different official art sources</li> <li>Use official art from a different regional release on the same console, unless that regional release has its own game page entry</li> <li>Use fan art created by the icon creator, but it must be approved by the art team prior to uploading or any icon gauntlet vote.</li> </ul>"},{"location":"badges/badgeiconcreation/#exceptions","title":"Exceptions","text":"<ul> <li>If two different ports use the same key art, that art may be used for either port.</li> <li>Hacks - Most hacks use the same sprites from its source game. Other art that represents the game in a meaningful way may be used as long as it is not on the excluded list above (such as external fan art). Art by the developer of the hack may also be used.</li> <li>Movie-Licensed/Movie Tie-In Games may use artwork that was used to promote the movie.</li> </ul>"},{"location":"badges/badgeiconcreation/#other-icon-design-tips","title":"Other Icon Design Tips","text":"<ul> <li>Browse the games list, to find Icons that speak to you. Mimic and innovate on the style of your favorites.</li> <li>Many of the Badge creation tips apply here as well.</li> </ul>"},{"location":"badges/badgeiconcreation/#icon-file-and-size-best-practices","title":"Icon File and Size - Best Practices","text":"<ul> <li>Upload using non-interlaced PNG format; avoid using a transparency layer for the background as it will come out in the end with a flat white box.</li> <li>Design mastery Icons images at 96x96</li> <li>Icons should be made in a way that the subject is clear even when sized at 32x32 as they are often reduced to this size, like on the global feed.</li> </ul>"},{"location":"badges/badgeiconcreation/#uploading-game-icons-developer","title":"Uploading Game Icons (Developer)","text":"<p>Achievement Developers are allowed to change game icons freely for entries that do not have achievements. As a Developer if you'd like to post a backup of the previous image there, if there is one, or backup yours in the forum you're free to but not required. As you create a new set of achievements you are free to create or choose the image you'd like to use as the game icon.</p> <p>To change a game icon first go to the game page and click on the Dev tools: </p> <p>Then click the choose file button highlighted. Find the file on your PC, and then press the submit button highlighted: </p> <p>If a game has existing achievements, game icon changes need to go through revision process.</p>"},{"location":"badges/badgeiconcreation/#uploading-game-icons-non-developer","title":"Uploading game icons (non-Developer)","text":"<p>Yes, you absolutely can, but they are subject to revisions. It will also be good to review the guidelines for designing new game icons.</p>"},{"location":"badges/badgeiconcreation/#what-happens-to-the-image-when-you-upload-a-game-icon","title":"What happens to the image when you upload a game Icon","text":"<p>When uploaded, your Icon images will be rejected unless they are a 96x96 32-bit colour PNG. If you upload an Icon that is smaller than 96x96 the image uploaded will retain its original size.</p> <p>The same is true for Badges, except Badge size is 64x64. (Profile images maximum is 128x128.)</p>"},{"location":"badges/badgeiconcreation/#icon-server-files","title":"Icon server files","text":"<p>Icons are stored on the site in the following manner and place: <code>i.retroachievements.org/Images/000705.png</code>. They are stored in the same server folder as other game images such as the game box and game screenshots. </p>"},{"location":"badges/badgeiconcreation/#achievement-badges","title":"Achievement Badges","text":"<p>Badges are the user created images for individual achievements of a game.</p> <ul> <li>Sonic the Hedgehog's first Badge - #00199) </li> </ul>"},{"location":"badges/badgeiconcreation/#badge-creation-guidelines-and-tips","title":"Badge creation guidelines and tips","text":"<ul> <li>Badges should refer in some way to what the achievement is about - i.e. a picture of the boss, level or collectible that the achievement requires the player to get to. </li> <li>Check out the designs of some of your favorite games. Some users go to great effort to make visually appealing badges:</li> </ul> <ul> <li>Here's a forum topic full of great tips. </li> <li>In the cases of low-resolution games' achievements, it can be hard to get a Badge looking good without it looking blocky or blurry, in these cases the blocky look is often preferable, so that the images have a retro feel to them.</li> <li>You can make each Badge have little rounded borders like an actual Badge or some extra spiky corners for emphasis or a king's crown for difficult ones.  Its your design.  It should visually represent the achievement itself, or hint at the location in the game for secrets.</li> <li>Matching to the game's art style works well. Google Image searches for \"Sprite Sheets\" is another useful tip to include some game art.</li> </ul>"},{"location":"badges/badgeiconcreation/#badge-file-and-size-best-practices","title":"Badge file and size - best practices","text":"<ul> <li>Upload using non-interlaced PNG format; avoid using a transparency layer as it will come out in the end with a flat white box.</li> <li>Design images at 64x64. You may wish to check them at 48x48 and 32x32 just to see how they will look in contexts where the site resizes them to those smaller sizes.</li> <li>Badges should be made in a way that the subject is clear even when sized at 32x32, as they are often reduced to this size, like on the global feed.</li> </ul>"},{"location":"badges/badgeiconcreation/#uploading-a-badge-for-new-achievements-developer","title":"Uploading a Badge for new achievements (Developer)","text":"<p>If you are creating new achievements you are free to upload badges for them. </p> <p>Badges are uploaded from within the emulator developer tools while in the achievement editor: </p> <p>Or you can select a prefabricated image or find other images you've uploaded in the drop down box: </p> <p>Upload <code>.png</code> file types.</p> <p>If the game has existing badges review and follow the procedure for Uploading Badges (Non-Developer).</p>"},{"location":"badges/badgeiconcreation/#making-new-badges-for-existing-achievements","title":"Making new Badges for existing achievements","text":"<p>If you'd like to make improved badges for existing achievements, you can. Your images will go through the revision process, which will put your creations to a community vote.</p> <p>Post all the new images you'd like to replace current ones in the Icon Gauntlet Forum Topic. Also post all the badges that the new images are meant to replace. They will be placed for a community review by as a single vote. After a community vote is complete if you are a dev you can replace the Badges or if you are not, ask for help in the #help-me channel on Discord or in the Icon Gauntlet Forum Topic.</p> <p>It's easiest to just reference the old and new Badges as <code>img</code> links:</p> <ul> <li>Example: <code>[img=https://retroachievements.org/Badge/01234.png] -&gt; [img=https://retroachievements.org/badge/56789.png]</code></li> <li>(Dev) Make sure to capture the old Badge ID from the Achievement Editor before uploading the new Badge</li> <li>The new Badge ID will appear in the Achievement Editor after uploading it.</li> <li>Both values can also be captured from the web site, but you have to copy the image links as the hover link is for the achievement.</li> </ul> <p>Here is a perfect example of how to effectively post new and old Badges.</p>"},{"location":"badges/badgeiconcreation/#what-happens-to-the-image-when-you-upload-a-badge","title":"What happens to the image when you upload a Badge","text":"<p>When uploaded, your file is converted into the following: - 64x64 32-bit colour PNG. Example:</p> <pre><code>![00136](https://user-images.githubusercontent.com/8508804/37221161-b9b0bb02-23a7-11e8-81b2-3d09fa7456af.png)\n</code></pre> <ul> <li> <p>64x64 greyscale and blurred PNG. Example:</p> <p></p> </li> </ul>"},{"location":"badges/badgeiconcreation/#badge-server-files","title":"Badge Server Files","text":"<p>They are stored on site in the following manner and place: <code>i.retroachievements.org/Badge/00136.png</code>; the number coincidences with the badge ID found in the Achievement.</p>"},{"location":"badges/badgeiconcreation/#where-youll-see-badges-and-icons-are-displayed","title":"Where you'll see Badges and Icons are displayed","text":"<ul> <li>On leaderboards: 96x96 (Icon only)</li> <li>In RA Emulators 64x64</li> <li>Game Pages: 96x96</li> <li>User Pages: 48x48</li> <li>Currently Playing (front page), New Achievements, Similar Games: 32x32</li> </ul> <p>The actual images are not being resized. The image is scaled by the browser to the display size. Some browsers such as Android's browser will display larger images more clearly. You can also increase your browser zoom to see them more clearly.</p> <p>It's anticipated that in a future website version, Icons and Badges will be displayed at full size in other places.</p>"},{"location":"examples/ex1/","title":"Example 1","text":"<p>In this example you'll see how to circumvent the problem of a counter incrementing twice in the same frame by combining SubSource and AddHits.</p> <p>In the Game Boy Advance library there's a Christmas platformer game called Santa Claus Jr. Advance. There are some achievements for collecting all candy canes in each one of the bonus stages.</p> <p>Such achievements were supposed to be quite simple, like this:</p> ID Special? Memory Cmp Type Mem/Val Hits 1 0xCANDIES != Delta 0xCANDIES (N) 2 ResetIf 0xSTAGE != Value 0xBONUS <p>This translates into \"check if the candy canes counter changed <code>N</code> times in the bonus stage\".</p> <p>Note: we're using <code>0xCANDIES != Delta 0xCANDIES</code> (using <code>!=</code>, and not <code>&gt;</code>) cause when the player has 99 candies and collect one more, the counter goes to zero.</p> <p>However, there is an aspect in this game (and many others) where if the player collect 2 candy canes simultaneously the counter is increased by 2 in the same frame. When it happens the hit counter is increased by one while the candy counter is increased by two. This, obviously, ruins the logic used above.</p> <p>In order to circumvent this issue we have to use that technique of using <code>SubSource</code> to count specific increments combined with the <code>AddHits</code> flag.</p> <p>Let's take a look at the achievement logic and then we'll see the explanation:</p> <p>Addresses</p> <ul> <li><code>0x80dc</code>: Candy Canes counter.</li> <li><code>0x809c</code>: Stage ID.</li> </ul> <p>So now the structure of the achievement is going to be like this:</p> <p></p> <p>Conditions</p> <ol> <li> <p>Together with condition 2, is a trick used to check if <code>0xCANDIES - Delta 0xCANDIES = 2</code>. In other words, the candy counter was incremented by two.</p> </li> <li> <p>Used together with condition 1 (as explained above) and 3. As explained in its respective page, when the <code>AddHits</code> condition is true, the hit counter in the next condition is incremented. Therefore, in our example here, when condition 2 is true, the hitcounter in condition 3 is incremented.</p> </li> <li> <p>Count when the candy counter changes.</p> </li> <li> <p>Reset the counter if not in the Bonus stage.</p> </li> </ol> <p>All these conditions could be translated as \"while in the bonus stage, trigger the achievement if the candy counter changes 99 times, and if the candy counter is incremented by 2 in the same frame, count an extra change in the candy counter.\"</p> <p>So, now it is 100% solved, right? Well, actually, almost. There is still a very minor exception. Remember it was said before that <code>!=</code> was being used instead of <code>&gt;</code> because <code>when the player has 99 candies and collect one more, the counter goes to zero</code>?</p> <p>This means that, if we get two canes in the same frame (which is already rare), there's a very small possibility that this change will be from <code>98 -&gt; 00</code> or from <code>99 -&gt; 01</code>. In these only two cases our code won't work, because <code>00 - 98</code> is not 2, it is <code>-98</code>. Same thing for <code>01 - 99</code>, it is not 2, it is also <code>-98</code>.</p> <p>Despite being a very unlikely possibility, we should treat this case too. So we're gonna add two more requirements to the code, and it will end up looking like this:</p> <p></p> <p>It is the same as before, with the only changes being lines 3 and 4, which represents an extra <code>SubSource + Add Hits</code> to check if <code>0xCANDIES - Delta 0xCANDIES = -98</code>, only to take care of this very minor exception just mentioned.</p> <p>And now it is solved!</p>"},{"location":"examples/ex2/","title":"Example 2","text":"<p>In this example you will learn how to create an ingame Timer based on the framerate speed of the game.</p> <p>Every game has an address which is constantly increasing, it functions like a engine in a car which is constantly moving despite what you do and starts as soon you start the game, the game itself is your car and some cars are faster than others.</p> <p>Please note that PAL Games (50hz) have a lower framerate than NTSC Games (60hz) and aren't compatible with this method. It is recommended to create every Timer based on the NTSC version of the game, unless PAL version is the only version existing and there is no NTSC Patch available.</p> <p>Addresses</p> <ul> <li><code>0x19</code>: Demo Mode: <code>01</code>=Active, <code>00</code>=Inactive</li> <li><code>0x1a</code>: Game Engine (speed based on framerate)</li> <li><code>0x25</code>: Game Paused: <code>01</code>=Yes. <code>00</code>=No</li> <li><code>0x2c</code>: Game Progression: <code>03</code>=Before Stage starts, <code>04</code>=Stage started, <code>08</code>=Stage finished</li> <li><code>0x30</code>: Stage ID (in this example, Stage 1)</li> </ul> <p></p> <p>Link to Cheevo: Contra Speedrun</p> <p>YouTube: ResetIfHits Demo: Contra Stage 1 60 seconds Speedrun </p> <p>Conditions</p> <ol> <li> <p>Activates the Cheevo's 'Hit' when entering a Stage (<code>03</code>only appears once in each Stage).</p> </li> <li> <p>Triggers the Cheevo when a Stage has been finished.</p> </li> <li> <p>Current Stage (in this example, Stage 1).</p> </li> <li> <p>Paused the Cheevo if the Game is 'Paused' (Stops the Timer in the Cheevo).</p> </li> <li> <p>Resets the Cheevo if <code>60</code> seconds <code>3600</code> Hits are reached. <code>1</code> second = <code>60Hits</code> (NTSC 60fps), <code>50Hits</code> (PAL 50fps).</p> </li> <li> <p>Resets the Cheevo if <code>Demo Mode</code> is active.</p> </li> <li> <p>Resets the Cheevos Timer when entering a new Stage.</p> </li> </ol>"},{"location":"examples/ex3/","title":"Example 3","text":"<p>In this example is a simple way one can utilize the Add Source flag in their achievement logic.</p> <p>We'll look at an achievement from Suikoden (PlayStation) entitled Treasure Hunter - Dragon Knights' Domain:</p> <p>Addresses Used</p> <ul> <li><code>0x1b8244</code>: bit0-bit4 are treasures in Soniere, bit5 is a treasure at the Northern Checkpoint, and bit6-bit7 are treasures at the Dragon Den.</li> <li><code>0x1b8245</code>: bit0 is a treasure at the Dragon Den, bit1-bit5 are treasures at Seek Valley, and bit6-7 are treasures in Kalekka.</li> <li><code>0x1b824b</code>: bit0-bit1 are treasures at the Village of the Hidden Rune, bit2 is unused, bit3-4 are treasures at the Dragon Knights' Fortress, bit5-6 are treasures in Teien, and bit7 is a treasure at Luiken's House. </li> </ul> <p></p> <p>This particular achievement only requires treasures from Dragon Knights' Fortress, Dragon Den, and Seek Valley; therefore, we only need bit6-7 from <code>0x1b8244</code>, bit0-bit5 from <code>0x1b8245</code>, and bit3-bit4 from <code>0x1b824b</code>. </p> <p>Logic Breakdown</p> <ul> <li>There are two groups of ten conditions with the main differences being the Delta type and the total. This is to ensure that the player goes from nine of these treasures obtained to having all ten of these treasures obtained. Note: Remember to use hexadecimal for Add Source totals! </li> <li>Since we're using bitflags here, the totals for individual conditions will only ever be 0x00 or 0x01. Obviously, we want them all to be 0x01 for the trigger, but we don't want someone to get the achievement simply by loading a save with all ten treasures already found.</li> <li>The trigger is the first frame that the player goes from nine to ten treasures obtained. This is to help prevent the achievement from triggering when it's not supposed to.</li> <li>The Measured flag is on the last condition so the player can check how far they are from their goal. If they have eight out of ten treasures, the achievement will show that it is 80% complete in the overlay (RAEmus) or achievement menu (RetroArch). </li> </ul> <p>This method is mostly handy for when the totals between the Delta-type and Mem-type only have a difference of 0x01, but it can be used in various types of achievements: collectibles that are only obtainable one-at-a-time, map completion (such as dungeon-crawlers with viewable maps that get revealed as you enter new areas), learnable skills, bestiaries, completing a certain number of side missions, and many others.</p> <p>If you run into a situation where more than one bitflag in an Add Source chain toggles at the same time, you can still utilize this template. However, you'll want to clone the Delta conditions and make it so both totals create a range. Still using the above achievement as an example, the existing total could be changed to <code>&lt;= 0x09</code> and the total for the second group could be <code>&gt;= 0x05</code>. This would make it so the achievement would trigger if the total goes from 5-9 treasures to 10 treasures.</p> <p>To Do: - Provide a separate example for the Delta range. - Go over using BitCount in a similar achievement. - Go over using <code>/</code> when you need at least one of multiple things.</p>"},{"location":"examples/ex4/","title":"Example 4","text":"<p>Let's take Streets of Rage 2 (Mega Drive) as a case study, and Steel Grip - Defeat 10 enemies without dropping your weapon achievement. This relies on four conditions:</p> <p>Addresses</p> <ul> <li><code>0xef33</code>: holding weapon </li> <li><code>0xef37</code>: weapon type</li> <li><code>0xef4e</code>: number of KOs (player 1)</li> </ul> <p></p> <p>Conditions</p> <ol> <li> <p>the player is holding a weapon. We require this to be true, once. This is actually not necessary, but it's useful to show the progression. We are requiring the player to hold a weapon, at least once.</p> </li> <li> <p>number of KOs that the player has made. It's 16-bit (meaning the value can be more than 255), and by using the delta and 'greater than' symbols, we are saying that we require the number of KOs to be bigger than the previous value, and we need this to happen 10 unique times. Every time the current value is bigger than the previous value, the hit count will go up by one. The next frame, the 'delta' value will have increased to be the same as the current value, this ensures that after every kill, the KO counter will go up by one, and the hit count will go up by one. LIMITATION: if the number of KOs goes up by two in the same frame, the hit count will only go up by one. It's a slight flaw that does happen a little more often than expected... it's not so accurate but it's a fairly close estimate to your number of kills.</p> </li> <li> <p>reset all our progress, if the weapon type is different than the last known weapon type.</p> </li> <li> <p>reset all our progress, if the player is no longer carrying a weapon.</p> </li> </ol>"},{"location":"examples/ex5/","title":"Example 5","text":"<p>In this example, you'll see how hit counts can be used as a timer and award an achievement if a condition is true for 10 seconds.</p> <p>Let's see what Super Hang-On (Mega Drive)'s achievement Speed Freak - Maintain at least 300kph for 10 seconds looks like in the Achievement Editor dialog:</p> <p>Addresses</p> <ul> <li><code>0x0055a</code>: is the speed.</li> <li><code>0x0c757</code>: is 0x00 when the game is unpaused.</li> </ul> <p></p> <p>For this achievement, we are looking for a condition that is met 600 times consecutively. The reason why is that the genesis is locked into processing 60 frames of logic per second (NTSC at least?). And the condition we're checking is \"speed is over 300\". Also, we want the player to keep the speed above 300 without pausing the game.</p> <p>Conditions</p> <ol> <li> <p>player's speed is above 300 for 600 frames (or 10 seconds have passed).</p> </li> <li> <p>reset the hit counter if the speed goes under 300.</p> </li> <li> <p>reset the hit counter if the player pauses the game.</p> </li> </ol>"},{"location":"examples/ex6/","title":"Example 6","text":"<p>Real Example document structure:</p> <p>Brief explanation...</p> <p>Addresses</p> <ul> <li><code>0x123</code>: Note about the address</li> <li><code>0x456</code>: another note</li> </ul> <p></p> <p>Conditions</p> <ol> <li> <p>Explaining each requirement in the achievement's logic.</p> </li> <li> <p>Explanation of requirement 2.</p> </li> <li> <p>Explanation of requirement 3...</p> </li> </ol>"},{"location":"leaderboards/lb/","title":"Leaderboard Creation","text":"<ul> <li>Overview</li> <li>Example</li> <li>Start Conditions</li> <li>Cancel Conditions</li> <li>Submit Conditions</li> <li>Value</li> <li>Value Format</li> <li>Design Tips</li> <li>Score Wrapping</li> <li>Further Help</li> </ul>"},{"location":"leaderboards/lb/#overview","title":"Overview","text":"<p>This is how a game's Leaderboard List looks like on the website:</p> <p></p> <p>In the center you can see every already made Leaderboard, and in the right column you can see the Code Notes for the game. The Code Notes are here to help with some conditions we'll see below.</p> <p>And now you can also create and edit Leaderboards through the GUI just like achievements by selecting Leaderboards from the Assets List:</p> <p></p> <p>Here's a brief explanation of each field of a single Leaderboard:</p> <ul> <li>Title: the leaderboard's title.</li> <li>Description: the leaderboard's description.</li> <li>Format: specifies how the value should be displayed.</li> <li>\"LowerIsBetter\" checkbox: determines how the list should be sorted. When checked, lower value appear as higher ranks in the leaderboard. Time-based leaderboards usually honor faster times (lower), whereas score-based leaderboards favor higher values.</li> <li>Start: start conditions, aka STA.</li> <li>Cancel: cancel conditions, aka CAN.</li> <li>Submit: submit conditions, aka SUB.</li> <li>Value: a value interpreter, aka VAL.</li> <li>Display Order: The order leaderboards appear and also used for hiding them from view if set to -1. This can only be edited from the site editor.</li> </ul> <p>Note: A valid leaderboard MUST have all four of these conditions, even if they're set to always be true (<code>1=1</code>) or always be false (<code>0=1</code>).</p> <p>Those last 4 fields are really important and LOTS of care must be taken over the entry of any characters into these strings. That's why they deserve a further explanation:</p> <p>The Start (STA) condition is a series of values, like an achievement, that must be true in order to start looking for a leaderboard submission. </p> <p>If a Cancel (CAN) condition is true, then it will cancel the leaderboard and no score will be submitted. NOTE: Cancel is given priority over Start. If both become true in the same frame, the leaderboard will not start.</p> <p>If the Submit (SUB) condition is true, then the leaderboard score will be submitted. NOTE: Cancel is given priority over Submit. If both become true in the same frame, the score will not be submitted.</p> <p>Finally, the Value (VAL) is a special case, and will be taken from memory using the formula stated in the memory box. This is the score that gets displayed while the leaderboard is active, and the value that's submitted if SUB is true.</p> <p>Memory addresses for STA/CAN/SUB/VAL have the format defined here.</p> <p>NOTE: Once an active leaderboard is cancelled or submitted, it cannot be reactivated until the Start condition becomes false, then true again. This prevents the leaderboard from immediately reactivating after submission/cancel.</p>"},{"location":"leaderboards/lb/#example","title":"Example","text":"<p>The best place to start is to look at existing leaderboards and break it down to see how it works. We're going to use the Green Hill Act 1 (Sonic the Hedgehog) Leaderboard for this purpose. Then let's see how it looks:</p> <p></p> <p>The Title/Description fields are quite obvious.</p> <p>The Type is \"Time (Frames)\". The value we're tracking updates once a frame, and the Genesis runs at 60 frames per second. (see not below for systems that run at other speeds)</p> <p>The Lower Is Better flag is checked, then the one who makes the shortest time will be the #1.</p> <p>Now we're going to break down the most important parts.</p>"},{"location":"leaderboards/lb/#start-conditions","title":"Start Conditions","text":"<p>STA: <code>0xfe10=h0000_0xhf601=h0c_d0xhf601!=h0c_0xfff0=0</code></p> <p></p> <ul> <li><code>0xfe10=h0000</code>: If 16-bit RAM address 0xfe10 is equivalent to hex 0000,</li> <li><code>_</code>: AND,</li> <li><code>0xhf601=h0c</code>: If 8-bit RAM address 0xf601 is equivalent to hex 0c,</li> <li><code>_</code>: AND,</li> <li><code>d0xhf601!=h0c</code>: If the previous 8-bit RAM address 0xf601 is NOT equivalent to hex 0c,</li> <li><code>_</code>: AND,</li> <li><code>0xfff0=0</code> If 16-bit RAM address 0xfff0 is equivalent to 0.</li> </ul> <p>This might seem daunting, because we don't know what these addresses mean. That's why the Code Notes in the right column are pretty handy! You can see how these addresses are labeled in memory. In our example we have:</p> <ul> <li><code>0xfe10</code> is the level, and is expected to be <code>0</code> (the first level).</li> <li><code>0xf601</code> is an 8-bit memory address, and we use the prefix <code>0xh</code> instead of <code>0x</code> to signify this. The <code>0xf601</code> is the screen mode. The second and third parts of the start statement are saying \"the current mode should be ingame (<code>0c</code>), and the mode on the previous frame should NOT be ingame\". Note: that <code>d</code> prefix on the address represents delta, or \"the previous frame's value\". Summing up: trigger this if we've JUST arrived in a level (the start of the level, when we want to start testing their time).</li> <li>Finally we also expect <code>0xfff0</code> to be equivalent to <code>0</code>, because this address is used for demo mode, and we don't want to award a leaderboard entry when the demo is active!</li> </ul> <p>Tip: the most common mistake when creating leaderboards through the site editor is forgetting the <code>h</code> when trying to reference an 8-bit memory address.</p> <p>Note: You can use HitCounts in the Start/Submit/Cancel triggers, but you are responsible for resetting them. These triggers are evaluated every frame, and the state of the leaderboard is dependent on which ones are true. As such, the HitCount will increment even when the leaderboard is not active unless you have an explicit ResetIf condition.</p>"},{"location":"leaderboards/lb/#cancel-conditions","title":"Cancel Conditions","text":"<p>CAN: <code>0xhfe13&lt;d0xhfe13</code></p> <p></p> <ul> <li>0xfe13 is the number of lives.</li> </ul> <p>The cancel section checks if the player's LIVES counter ever becomes lower. Literally, it says \"Cancel if the CURRENT value at 0xfe13 is less than the PREVIOUS value at 0xfe13\". We want to do this because you could reach the final checkpoint and run out of time, resetting your timer to 0:00. We don't want to allow this, because it's not the correct way of completing the level. So if the player dies, we reset their leaderboard progress. Finally, if you connect two cancel conditions with <code>s</code>, the leaderboard will cancel when either one of them are true.</p>"},{"location":"leaderboards/lb/#submit-conditions","title":"Submit Conditions","text":"<p>SUB: <code>0xf7cc!=0_d0xf7cc=0</code></p> <p></p> <ul> <li>0xf7cc is the endlevel flag, non-interactive.</li> </ul> <p>The submit section checks if the current frame has the 'endlevel' flag set to true (or <code>!=0</code>, 'nonzero'), and the previous frame (delta) has it set to false (or <code>=0</code>, 'zero'). This suggests that the player has reached the end of the level, and has proven to be a fairly sturdy benchmark.</p> <p>Tip: it can be useful to watch these values in memory to see how they perform, and what sort of values they end up at in different circumstances.</p>"},{"location":"leaderboards/lb/#value","title":"Value","text":"<p>Finally, value. Once the player has reached the start condition, they will be shown a popup which remains on-screen, showing their progress so far. If it's a time leaderboard, it will be a clock, and if it's a score, it will just be the value. If they fulfill the cancel condition, they will be told that they have failed, and the popup will be removed. If they successfully reach the submit condition, the current value will be taken and submitted as their score, and on successful submission, an in game popup will inform the player of the leaderboard so far, and their position in the leaderboard.</p> <p>For more information on the value format, see Value Definition.</p> <p>NOTE: The value calculation is performed using 32-bit signed integers. As such, the maximum value is 2147483647 and the minimum value is -2147483648. Values above the maximum will wrap around and register as very negative numbers. </p>"},{"location":"leaderboards/lb/#value-format","title":"Value Format","text":"<p>'Format' can be any of the available formats, but the editor currently only provides Score, Time (Frames), Time (Milliseconds) and Value. Time (Frames) is the most common one, and represents a time derived from a value that increments every frame. It does this by multiplying by 100 (to convert to hundredths of a second) and dividing by 60 (the number of frames per second).</p> <p>NOTE: If you're using a system that doesn't run at 60Hz, you have to use \"Time (millisecs)\" and multiply by some value to do the conversion yourself (50Hz = <code>*2</code> [100/50], 60Hz = <code>*1.666666</code> [100/60], 75Hz =<code>*1.333333</code> [100/75]).</p> <p>NOTE: Time (Milliseconds) is actually hundredths of a second, not thousandths of a second. i.e. a Value of 6234 would be 62.34 seconds, not 6.234 seconds.</p>"},{"location":"leaderboards/lb/#design-tips","title":"Design Tips","text":"<p>Leaderboards can sometimes get pretty spammy and take up a lot of screen space when starting or depending on how many are active at once. It is generally good practice to try and eliminate this as much as possible when you can. You can do this by taking advantage of the fact that you can start and submit a leaderboard on the same frame by setting the start condition to what you would normally use as the submit and then setting the submit condition so something that is always true like 1=1.</p> <p>If a game tracks a score or time that you are using to directly call for your value then consider starting and submitting the leaderboard on the same frame so that only one popup is called (for the submission) and the screen won't have extra clutter. There are still cases where it can be useful for players to have the values up on display if they are hidden in menus so use your best judgement. </p> <p>In games where levels are short and retries are quick you really don't want to have it start/cancel/submit repeatedly after each start/retry when you can help it as the popups can start stacking together and clutter the screen well past the actual attempts are over. These are a prime candidate for starting and submitting on the same frame when possible.</p>"},{"location":"leaderboards/lb/#score-wrapping","title":"Score Wrapping","text":"<p>In games where the high score wraps around back to 0 it is actually possible to account for this and keep your leaderboard tracking the score! You can do this by using Alt Groups combined with MeasuredIf to track which loop you are on and will use one Alt per loop.</p> <p>As an example lets take a look at Balloon Fight on NES where the score wraps around after 999,990. Here is the original leaderboard:</p> <p></p> <p>And an updated version which will continue tracking after each loop: Core needs to have a Measured statement in it so just put something that is never true and also a ResetIf for resetting the MeasuredIf statements in the Alt Groups when needed (in this case on the title screen)</p> <p></p> <p>The first Alt will contain the normal logic for high score</p> <p></p> <p>The next Alt will contain a MeasuredIf that is true after the first loop which will allow this value to be used. You will also add an extra condition to AddSource in the total score from the first loop which will be 1,000,000 in this case. This value will now be used since MeasuredIf is true and the value is the highest of the Alt Groups</p> <p></p> <p>For the next Alt we increment the number of hits used in the loop detection as well as the value we multiply the total score added by for each loop</p> <p></p>"},{"location":"leaderboards/lb/#further-help","title":"Further Help","text":"<p>There are unfortunately MANY ways to get this process wrong, so if you are having any trouble feel free to ask for help in our Discord server.</p> <p>If you want to practice, it's highly recommended to create your own leaderboard and attempting something on a new game, rather than using an existing leaderboard. Just remember to clean up any test leaderboards that you push to the site afterwards.</p> <p>Please remember that these files are pulled directly into someone's game if they decide to play it, and a badly formed memory address or string could cause their emulator to crash, so please test your leaderboard code!</p>"},{"location":"logic/addaddress/","title":"Add Address","text":"<p><code>AddAddress</code> modifies the memory address(es) of the following condition by the calculated value. It works similar to <code>AddSource</code>, but modifies the address, not the resulting value. Additionally, it affects addresses on both sides of the condition.</p> <p><code>AddAddress</code> only affects the next condition. If multiple <code>AddAddress</code> lines are chained together, each lookup in the chain will be altered; the values won't all be added to the final lookup.</p> <p></p> <p>The 32-bit value at 0x0112F8 is a pointer to the data for the first character in the party. When the party order changes, the pointer will point at a different block of memory, but data within the block will have the same structure.</p> <ul> <li>The value is an address in the actual system representation and differs from the addresses provided by the memory inspector. However, you can rely on the fact that the memory inspector represents the same memory, so while the actual address may differ, the sequence of bytes does not.</li> </ul> <p>To translate the real pointer to a memory inspector address, we compare the two values. For example:</p> <ul> <li>The 32-bit value at 0x0112F8 is 0x800110B8.</li> <li>The memory we're interested in is at 0x011114 in the memory inspector.</li> <li>Using a 24-bit read instead of a 32-bit read gives us 0x0110B8</li> <li>0x011114 - 0x0110B8 = 0x00005C, so that becomes the \"base address\" in the second condition.</li> </ul>"},{"location":"logic/addaddress/#types-of-pointers","title":"Types of Pointers","text":"<p><code>AddAddress</code> is how RAIntegration handles pointers. There are four major types of pointer support:</p> <p>Direct Pointer: The pointer contains another address that is referenced without modification. These are most commonly used for string pointers. To use a direct pointer, the base address to which the pointer is added would be 0.</p> <p>Indirect Pointer: The pointer contains another address that indicates the start of some block of data. The data of interest is a fixed number of bytes into the block of data. These are commonly used for attributes of a character/object.</p> <p>For both Direct and Indirect Pointers, the <code>AddAddress</code> line should reference the pointer, and the address in the following line should be the offset into the block of data for the information relevant to the condition. While you would typically use 0 for a Direct Pointers, the following line would also contain any value necessary to convert between a real address and a memory inspector address.</p> <p>The example above is an Indirect Pointer, where the data is 0x5C bytes into a block of data. The conversion from a real address to a memory inspector address is handled by using a 24-bit read instead of a 32-bit read.</p> <p>Array Index: The pointer contains an offset to apply to a fixed pointer.</p> <p>Scaled Array Index: The pointer contains an offset to apply to a fixed pointer after it has been scaled.</p> <p>For Array Indices, the <code>AddAddress</code> line should reference the offset to apply, and the following line should contain the address of the first element of the array (index 0). For example:</p> <p><pre><code>AddAddress 16-bit Mem 0x1234\n           8-bit  Mem 0x4567\n</code></pre> Would read a 16-bit number from 0x1234 and read the single byte that is that many bytes after 0x4567.</p> <p>To scale an array index, click on the space in the Cmp column for the array index address and select the <code>*</code> symbol. Then enter the size of each array item in the second mem/val column. For example:</p> <p><pre><code>AddAddress 16-bit Mem 0x1234 * Value 4\n           8-bit  Mem 0x4567\n</code></pre> Would read a 16-bit number from 0x1234, multiply it by 4, and read the single byte that is that many bytes after 0x4567.</p>"},{"location":"logic/addaddress/#chaining-pointers","title":"Chaining Pointers","text":"<p><code>AddAddress</code> can be chained to perform multi-step lookups, but only one step at a time. As such, you can reference data pointed at by a pointer that's pointed at by another pointer, but you can't reference data in an array that's pointed at by another pointer unless either the array or the array index is at a fixed address.</p>"},{"location":"logic/addaddress/#using-delta-with-chained-pointers","title":"Using Delta with Chained Pointers","text":"<p>To do a delta check on an <code>AddAddress</code> chain, you should only put the delta on the final condition. You want to use the current value for each step of the chain to derive the final result, and you only care about the changes in the final value. Using previous values for the pointers will have you reading invalid memory and will likely cause problems. <pre><code>A) AddAddress Mem   0000\nB) AddAddress Mem   0000\nC)            Delta 0000\n</code></pre> Assuming Mem: $0000=0, $0001=2, and $0002=4, this will evaluate to 0 for the first few frames, and when Mem 0 changes to 1, the following happens: <pre><code>Frame N  : A = Mem[0] = 1 (delta[0] = 0), B = Mem[A] = Mem[1] = 2 (delta B = 0), C = Mem[B] = Mem[2] = 4 (delta C = 0)\nFrame N+1: A = Mem[0] = 1 (delta[0] = 1), B = Mem[A] = Mem[1] = 2 (delta B = 2), C = Mem[B] = Mem[2] = 4 (delta C = 4)\n</code></pre> You can see the entire delta chain updates in the same frame (one frame after the change occurs).</p> <p>If you use Delta for A and B, something different happens: <pre><code>A) AddAddress Delta 0000\nB) AddAddress Delta 0000\nC)            Delta 0000\n</code></pre> <pre><code>Frame N  : Mem[0] = 1 (delta[0] = 0), B = Mem[deltaA] = Mem[0] = 1 (delta B = 0), C = Mem[deltaB] = Mem[0] = 1 (delta C = 0)\nFrame N+1: Mem[0] = 1 (delta[0] = 1), B = Mem[deltaA] = Mem[1] = 2 (delta B = 1), C = Mem[deltaB] = Mem[1] = 2 (delta C = 1)\nFrame N+2: Mem[0] = 1 (delta[0] = 1), B = Mem[deltaA] = Mem[1] = 2 (delta B = 2), C = Mem[deltaB] = Mem[2] = 4 (delta C = 2)\nFrame N+3: Mem[0] = 1 (delta[0] = 1), B = Mem[deltaA] = Mem[1] = 2 (delta B = 2), C = Mem[deltaB] = Mem[2] = 4 (delta C = 4)\n</code></pre> Not only does it take two extra frames for delta C to be correct, it has two intermediate values that are not correct. The value went from 0 to 4 in a single frame and never was 1 or 2. </p>"},{"location":"logic/addaddress/#calculating-your-offset","title":"Calculating your offset","text":"<p>Once you think that you've found your data and something that points at (or near) your data, you need to calculate the offset to use to read that data. * 32-bit data at <code>0x821448</code> (RetroAchievements address) * Pointer at <code>0xA1CA14</code> (RetroAchievements address) (value is <code>0x8C821440</code>)</p> <p>First, determine how much of the pointer you need. For a system with 16MB of RAM, you need 24-bits to address it all (2^24 = 16777216). For 32MB, you'd need 25-bits. For 8MB, you'd only need 23-bits.</p> <p>For the data provided above, we have 16MB of memory, so we only need 24-bits of the pointer (<code>0x8C821440</code> &amp; <code>0x00FFFFFF</code> = <code>0x821440</code>)</p> <p>Then, subtract that value from the data address to calculate the offset: <code>0x821448</code> - <code>0x821440</code> = <code>0x000008</code></p> <p>Now, you can construct the logic. Place the pointer address and size/mask in the <code>AddAddress</code> condition and the offset/logic in the second line: <pre><code>AddAddress Mem 24-bit 0x00A1CA14\n           Mem 32-bit 0x00000008 &lt; 1000\n</code></pre> Executing this example with the provided data: * Read 24-bit data at <code>0x00A1CA14</code>: <code>0x00821440</code> * Add the offset: <code>0x00821440</code> + <code>0x00000008</code> = <code>0x00821448</code> * Read 32-bit data at new address (<code>0x00821448</code>)</p>"},{"location":"logic/addaddress/#second-example","title":"Second example","text":"<ul> <li>16-bit data at <code>0x1B385E0</code> (RetroAchievements address)</li> <li>Pointer at <code>0xE7B054</code> (RetroAchievements address) (value is <code>0x09B42F0C</code>)</li> <li>System has 32MB of RAM (25 bits needed) <code>0x09B42F0C</code> &amp; <code>0x01FFFFFF</code> = <code>0x1B42F0C</code></li> <li>Calculate offset: <code>0x1B385E0</code> - <code>0x1B42F0C</code> = <code>0xFFFFFFFFFFFF56D4</code> (truncate to 32-bits: <code>0xFFFF56D4</code>)</li> <li>Construct the logic:   <pre><code>AddAddress Mem 32-bit 0x00E7B054 &amp; 0x1FFFFFF\n           Mem 16-bit 0xFFFF56D4 = 0x0E\n</code></pre></li> </ul> <p>In this case, the pointer is actually pointing backwards, so the offset is a really big number. That's how computers represent negative values. Due to the rules of twos-compliment and overflow, you can add the really big number to perform subtraction. Executing this example with the provided data: * Read 32-bit data at <code>0x00E7B054</code>: <code>0x09B42F0C</code> * Mask off 25-bits: <code>0x09B42F0C</code> &amp; <code>0x01FFFFFF</code> = <code>0x01B42F0C</code> * Add the offset: <code>0x1B42F0C</code> + <code>0xFFFF56D4</code> = <code>0x101B385E0</code> (truncated to 32-bits: <code>0x01B385E0</code>) * Read 16-bit data at new address (<code>0x01B385E0</code>)</p>"},{"location":"logic/addaddress/#video-tutorial","title":"Video Tutorial","text":"<p>The experienced achievement creator wilhitewarrior made a nice video showing how to work with pointers and AddAddress flag.</p> <p>You can check it here: https://www.youtube.com/watch?v=_gk0vYYlm-E.</p>"},{"location":"logic/addhitssubhits/","title":"Add Hits and Sub Hits","text":"<p>NOTE: This technique is not needed for simple games, so it is not mandatory for jr-devs.</p> <p><code>AddHits</code> and <code>SubHits</code> can be chosen in the Flag column of the Achievement Editor.</p> <p>The <code>AddHits</code>/<code>SubHits</code> conditions do not have to be true for the achievement to trigger. They modify the hit count of another condition, which does have to be true for the achievement to trigger. The sequence of conditions is referred to as a <code>AddHits</code> chain (even if it contains <code>SubHits</code>).</p> <p>When a condition with the <code>AddHits</code>/<code>SubHits</code> flag is true, the hit count for that condition is incremented. A hit target may be placed on the condition to keep it from tallying too many times.</p> <p>The total hit count of the final condition in a chain is incremented by the hit counts of any <code>AddHits</code> conditions in the chain, and decremented by any <code>SubHits</code> conditions in the chain. If the total hit count meets or exceeds the target hit count of the final condition, it's considered true.</p> <p>If the final condition of the chain does not have a hit target, the <code>AddHits</code>/<code>SubHits</code> conditions have no effect on the achievement. The final condition will be true if, and only if, it is true by itself.</p> <p>NOTE: The hit target on the final condition of the chain serves as both the overall target hit count and the maximum hit count for that condition. As a result, it is impossible to use <code>SubHits</code> without <code>AddHits</code>, as any hits subtracted by the <code>SubHits</code> could not be recovered without a separate <code>AddHits</code>. Similarly, if you need to put a condition-specific limit on the final condition of the chain, you should pull it out as an <code>AddHits</code> condition with the appropriate limit and use a dummy final condition with the overall hit target (i.e. <code>0=1 (10)</code>). The dummy condition would never accumulate any hits of its own, and only serve to tally the other values in the chain.</p>"},{"location":"logic/addsource/","title":"Add Source","text":"<p>Note: most likely this technique is not needed for simple games. So, it's not mandatory for jr-devs.</p> <p>The <code>AddSource</code> can be chosen in the Flag column of the Achievement Editor</p> <p>When a condition has the <code>Add Source</code> flag, the value on that memory address is added to the accumulator. When a condition is reached that does not modify the accumulator, the accumulator is added to value of the address on that condition before the comparison is made, and the accumulator will be reset to 0. It may sound a bit confusing, but the example below will clarify how this works:</p>"},{"location":"logic/addsource/#simple-example","title":"Simple example","text":"ID Flag Type Size Memory Cmp Type Size Mem/Val Hits 1 AddSource Mem 8-bit 0x8010 2 Mem 8-bit 0x8020 &gt; Value 0x04 0 (0) <p>In this example the value in <code>0x8010</code> will be added to the value in <code>0x8020</code> and the comparison will check is if this sum is greater than four.</p> <p>If the value in <code>0x8010</code> is <code>1</code> and the value in <code>0x8020</code> is <code>2</code>, the comparison will be <code>1 + 2 &gt; 4</code>, or <code>3 &gt; 4</code>.</p> <p>Trying to summarize the explanation in an image:</p> <p></p>"},{"location":"logic/addsource/#chaining","title":"Chaining","text":"<p>You can use the <code>Add Source</code> flag to sum more addresses, like in the example below:</p> ID Flag Type Size Memory Cmp Type Size Mem/Val Hits 1 AddSource Mem 8-bit 0x8010 2 AddSource Mem 8-bit 0x8011 3 Mem 8-bit 0x8020 &gt; Value 0x04 0 (0) <p>This represents <code>value(0x8010) + value(0x8011) + value(0x8020) &gt; 4</code>.</p>"},{"location":"logic/addsource/#independence","title":"Independence","text":"<p>The accumulator is reset after its used, so you can have multiple <code>AddSource</code> chains in one trigger without having to worry about them interfering with each other.</p> ID Flag Type Size Memory Cmp Type Size Mem/Val Hits 1 AddSource Mem 8-bit 0x8010 2 Mem 8-bit 0x8020 &gt; Value 0x04 0 (0) 3 AddSource Mem 8-bit 0x8030 4 Mem 8-bit 0x8040 &lt; Value 0x80 0 (0) <p>This represents <code>value(0x8010) + value(0x8020) &gt; 4 AND value(0x8030) + value(0x8040) &lt; 0x80</code>.</p>"},{"location":"logic/addsource/#overflow","title":"Overflow","text":"<p>The accumulator and all logic being performed is limited to 32-bits. If the total value exceeds 0xFFFFFFFF, there will be an overflow and only the 32 least significant bits will be used in the comparison.</p> ID Flag Type Size Memory Cmp Type Size Mem/Val Hits 1 AddSource Mem 32-bit 0x8010 2 Mem 32-bit 0x8020 &gt; Value 0x30000000 0 (0) <p>If 0x8010 is 0xC0000000 and 0x8020 is 0x54321ABC, then the total will be 0x114321ABC, which is more than 32-bits and will be truncated to 0x14321ABC, which is not more then 0x30000000, so the logic will evaluate false.</p>"},{"location":"logic/addsource/#using-modifiers","title":"Using Modifiers","text":"<p>Additionally, you can use AddSource to modify a value. By clicking on the \"Cmp\" column, a dropdown will open with three operators: <code>*</code>, <code>/</code>, and <code>&amp;</code>. This allows you to modify the value before adding it to the accumulator.</p> <p><code>*</code>: Multiply the left side by the right side.   - <code>AddSource 8-bit Mem 0x8010 * Value 0x14</code> would read the 8-bit value from $8010, multiply it by 20 (0x14 hex) and then add that to the accumulator.</p> <p><code>/</code>: Divide the left side by the right side.   - <code>AddSource 8-bit Mem 0x8010 / Value 0x14</code> would read the 8-bit value from $8010, divide by 20 (rounding down) and then add that to the accumulator.</p> <p><code>&amp;</code>: Bitwise-mask the left side with the right side.   - <code>AddSource 8-bit Mem 0x8010 &amp; Value 0x3f</code> would read the 8-bit value from $8010, discard bits 6 and 7 (0x3f is 00111111 in binary) and then add that to the accumulator.</p> <p>You can use memory references on the right side as well. <code>AddSource 8-bit Mem 0x8010 * 8-bit Mem 0x8011</code> would read the two 8-bit values, multiply them together, and add that to the accumulator.</p>"},{"location":"logic/addsource/#interaction-with-floats","title":"Interaction with floats","text":"<p>The accumulator is typed based on the first thing added to it. If the first <code>AddSource</code>/<code>SubSource</code> of a chain is an integer, the accumulator will be an integer and any floats added to the accumulator will be floored before they're added to the accumulator. If the first <code>AddSource</code>/<code>SubSource</code> of a chain is a float, the accumulator will be a float and any integers added to the accumulator will be converted to floats before they're added to the accumulator.</p> <p>Note that when the accumulator is added to the final condition, the type of the final condition is used. So if the final condition is float and the accumulator is an integer, the accumulator will be converted to a float before it's added to the final condition.</p> <p>To force all floats in an <code>AddSource</code> chain to be floored, you need an extra first and last condition:</p> ID Flag Type Size Memory Cmp Type Size Mem/Val Hits 1 AddSource Value 0 2 AddSource Mem Float 0x1000 3 AddSource Mem Float 0x1004 4 AddSource Mem Float 0x1008 5 Value 0 &gt; Value 12 0 (0) <p>Line 1 primes the accumulator as an integer, so lines 2-4 will be floored before they're added to the accumulator. Line 5 ensures the final value is an integer before doing the comparison. Without line 1, lines 2-4 would be accumulated as floats. Without line 5, the accumulator would be added to the last float without it being floored.</p>"},{"location":"logic/altgroups/","title":"Alt Groups","text":"<p>Achievements can have groups added to them that allow for alternative requirements to unlock an achievement. These are called Alt Groups,</p> <p>When using Alt groups, for the achievement to trigger, all the conditions in the Core group MUST be true. And then all the conditions of ANY Alt group must be true. In other words, each Alt group uses <code>OR</code> logic.</p>"},{"location":"logic/altgroups/#example","title":"Example","text":"<p>In this dummy example for Contra (NES) the achievement requires, \"While on stage look up or crouch.\" Lets look at what's in the Core group and in the Alt groups: </p> <p> In the core group: <code>0x18 = 5</code>. This checks that the player is on stage.</p> <p> In <code>Alt 01</code>: <code>0xbc = 1</code>. This checks that the player is looking up.</p> <p> In <code>Alt 02</code>: <code>0xbc = 2</code>. This checks that the player is crouching.</p> <p>As long as the player is on stage. The core group is true. If the player looks up, Alt 01 is true. If the player crouches, Alt 02 is true. If core + Alt 01 OR Alt 02 are true, the achievement will trigger.</p>"},{"location":"logic/altgroups/#facts-about-alt-groups","title":"Facts about Alt Groups","text":"<ul> <li> <p>To add or remove Alt groups click the <code>+</code> or <code>-</code> button in the bottom left of the achievement editor. </p> </li> <li> <p>If you want to simply test for this <code>OR</code> that you can leave the core group blank and add this in <code>Alt 01</code>, and that in <code>Alt 02</code>.</p> </li> <li> <p>No matter how many <code>Alt groups</code> an achievement has, if the Core group is true, only one Alt has to be true for the achievement to trigger.</p> </li> <li> <p>When using ResetIf and PauseIf, PauseIf only pauses the group that it's in, but ResetIf resets hit counts in all groups and prevents achievements from triggering so long as the reset is active.</p> </li> </ul>"},{"location":"logic/altgroups/#using-alt-groups-for-conditional-resets","title":"Using Alt Groups for Conditional Resets","text":"<p>Advanced: An Alt group can be used to create a ResetIf condition that is only active some of the time.</p> <p>If you create an Alt group containing a PauseIf condition and a ResetIf condition, you can use the PauseIf condition to disable the ResetIf condition under certain circumstances without disabling the entire achievement.</p> <ul> <li> <p>The Reset will still affect all groups, including your core group. The Pause will only pause the Alt group containing the PauseIf.</p> </li> <li> <p>This logic can be applied to multiple Alt groups in the same achievement to protect several separate Reset statements.</p> </li> <li> <p>Make sure that you have at least one Alt group that will be true or the achievement won't trigger. The easiest way to do this is to create an extra alt group that has one condition that is <code>Value 1 = Value 1</code>.</p> </li> <li> <p>Beware: If your Pause condition is false, and the Reset condition is also false, the group will be considered true unless you have another always false condition in the group. When using an Alt group to segregate a PauseIf, make sure to include an always false condition like <code>Value 1 = Value 0</code>.</p> </li> </ul>"},{"location":"logic/andnextornext/","title":"And Next and Or Next","text":"<p><code>AndNext</code> and <code>OrNext</code> are used to associate more than one condition to a ResetIf, PauseIf, or Hit Count.</p> <p><code>AndNext</code> and <code>OrNext</code> can be chosen in the Flag column of the Achievement Editor</p> <p>When a condition has the <code>AndNext</code> flag, the condition must be true in addition to the following condition for the following condition to be considered true. </p> <p>When a condition has the <code>OrNext</code> flag, the condition or the following condition must be true for the following condition to be considered true.</p> <p>You can chain multiple <code>AndNext</code> and <code>OrNext</code> conditions to create complex requirements for a single <code>ResetIf</code>, <code>PauseIf</code>, or <code>Hit Count</code>.</p> <p>When evaluating a combination of <code>AndNext</code> and <code>OrNext</code> conditions, each line is evaluated individually. <pre><code>AndNext A=1\nOrNext  B=1\nAndNext C=1\nOrNext  D=1\nAndNext E=1\nResetIf F=1\n</code></pre> Represents the following logical statement: <pre><code>reset if (((((A = 1 &amp;&amp; B = 1) || C = 1) &amp;&amp; D = 1) || E = 1) &amp;&amp; F = 1)\n</code></pre> Alt Groups are still preferred over <code>OrNext</code> for most use cases. They allow for multiple conditions to be present in each clause of the OR, and support more than two clauses.</p> <p><code>AndNext</code> is not required for simple logic. All conditions in a group are automatically AND'd together. <code>AndNext</code> just allows for two or more conditions to affect a single <code>PauseIf</code>, <code>ResetIf</code>, or <code>Hit Count</code>.</p>"},{"location":"logic/bitcount/","title":"BitCount Size","text":"<p><code>BitCount</code> is a shortcut for counting the number of bits set in a byte.</p> <p><pre><code>BitCount Mem 0x1234 == Value 6\n</code></pre> is the same as <pre><code>AddSource Bit0 Mem 0x1234\nAddSource Bit1 Mem 0x1234\nAddSource Bit2 Mem 0x1234\nAddSource Bit3 Mem 0x1234\nAddSource Bit4 Mem 0x1234\nAddSource Bit5 Mem 0x1234\nAddSource Bit6 Mem 0x1234\n          Bit7 Mem 0x1234 == Value 6\n</code></pre> and would be true for <code>0x3F</code> (00111111), <code>0xDB</code> (11011011), <code>0xEE</code> (11101110), etc.</p> <p>Its most common use is counting collectibles for a Measured condition.</p> <p>It can be combined with other flags like Delta. <pre><code>BitCount Mem 0x1234 != BitCount Delta 0x1234\n</code></pre></p> <p>If you just want to make sure all the bits are set and don't need to worry about some subset of bits being set, you should check for concrete values (i.e. <code>Eight Bit 0x1234 = 0xFF</code> or <code>Lower4 0x1234 = 0x0F</code>).</p> <p>WARNING: BitCount always counts all eight bits in a byte. If you only need 6 or 7 bits, you should use the AddSource chain in case the other bits are used for something else.</p>"},{"location":"logic/deltas/","title":"Delta Values","text":"<p>A <code>Delta</code> value is the previous frame's value. Note: when you use <code>Delta</code> it is implicit that you are referring to an address and not a value.</p> <p>Examples of how it can be used:</p> <ul> <li>Detect if the level has been increased: <code>level &gt; delta level</code>. It means \"current level  is greater than the previous frame's level\".</li> <li>Detect damage: <code>health &lt; delta health</code>. It means \"current health is smaller than the previous frame's health\". Or you can just make the previous frame's value a requirement. <code>health delta = 1</code> means \"the previous frame's value for health must be 1 when the achievement pops up.\"</li> </ul> <p>In the Real Examples section there are some good examples:</p> <ul> <li>Using Hit Counts as a Timer</li> <li>Using Delta Values and Hit Counts to Detect an Increment</li> </ul>"},{"location":"logic/hitcounts/","title":"Hit Counts","text":"<p>In the Achievement Editor, the field on the far right side is Hit Count.</p> <p></p> <p>The default is Zero, which means the condition must be true for the achievement to trigger.</p> <p>If you set a target hit count, like 5, it means the condition must be true for at least that many frames, and once that hit count target is met, it doesn't need to be met again at any other time.</p> <p>PLEASE NOTE: if a condition has a non-zero hit count, and reaches the number required, this condition is no longer tested. It  remains true, UNLESS you have a <code>ResetIf</code>, which we will discuss below.</p> <p>Conditions with <code>Reset If</code> and <code>PauseIf</code> flags can also have hits. Follow the links for details.</p> <p>In the Real Examples section there are two examples good examples:</p> <ul> <li>Using Hit Counts as a Timer</li> <li>Using Delta Values and Hit Counts to Detect an Increment</li> </ul>"},{"location":"logic/hitcounts/#effect-of-resetting-the-emulator","title":"Effect of Resetting the Emulator","text":"<p>When the emulator is reset, all hits are immediately zeroed out and the achievement is set back to Waiting. However, an emulator reset does not clear out memory, so it's possible for the hits to reaccumulate before the game reinitializes the memory. As such, you should not rely on the hits being cleared out by the emulator reset.</p> <p>Similarly, when the emulator first \"powers on\", the state of memory is not guaranteed to be consistent as true hardware does not initialize its memory. Instead, the software sets some initial state when it claims portions of memory. Some games actually rely on the random nature of the uninitialized memory to seed their random number generators.</p> <p>For both cases, you should have an explicit reset for some piece of knowable logic, like the player being on the title screen.</p>"},{"location":"logic/measured/","title":"Measured","text":"<p><code>Measured</code> marks a condition for tracking progress. It adds a progress bar to the achievement overlay to inform the user how close they are to completing an achievement. As the user expects an achievement to trigger when the progress bar is full, it is expected that any other conditions in the achievement should be true most of the time.</p> <p><code>Measured</code> should not be used to track things that are clearly visible to the user. If you have an achievement for getting 500,000 points, you don't need to Measure it if the score is displayed on the screen. Similarly, there's no need to use <code>Measured</code> in an achievement for having 100 of something in the inventory if the player can see a count of how many they have just by opening the inventory.</p> <p>If placed on a condition with a required HitCount, the target value is the required HitCount and the current value is the current HitCount. <code>AddHits</code> can be used.</p> <p>If placed on a condition without a HitCount, the target value is the constant on the right side of the condition and the current value is the evaluation of the left side of the condition. <code>AddSource</code> and <code>SubSource</code> can be used.</p> <p>If multiple conditions are marked as <code>Measured</code> and have the same target value, the current value will be the maximum of all the <code>Measured</code> conditions.</p> <p>If multiple conditions are marked as <code>Measured</code> and have different target values, a Parse Error -22 will occur.</p> <p>Note that progress for <code>Measured</code> values is reported at the time of examination and may actually go down depending on the current value (Hit Count could be reset, or comparison value decreases).</p> <p>To limit the scope of a <code>Measured</code> condition, you can add a <code>MeasuredIf</code> condition. A <code>MeasuredIf</code> condition must be true for the <code>Measured</code> value to be non-zero (and for the achievement to trigger). You can use <code>MeasuredIf</code> to create achievements that require playing as a certain character, or just to prevent bogus data from showing up if the player is in the wrong part of the game. If any <code>MeasuredIf</code> condition in a group is false, the <code>Measured</code> value for the group is automatically 0.</p> <p>Since <code>PauseIf</code> has precedence over <code>Measured</code>, the <code>Measured</code> value will be captured when a group becomes paused, and the captured value will be returned until the group is unpaused and <code>Measured</code> can be evaluated again. If another <code>Measured</code> exists in a non-paused group, its value will be returned even if it is lower than the captured value.</p>"},{"location":"logic/pauseif/","title":"Pause If","text":"<p>The <code>PauseIf</code> flag can be chosen in the Flag column of the Achievement Editor.</p> <p><code>PauseIf</code> is usually used to prevent hit counts from going up during a specific situation (like when the game is paused). It's used when you want to keep previously earned hit count, but don't want to increment it or reset it while something else is going on.</p> <p>When a group is processed, first all <code>PauseIf</code> are evaluated in order. As soon as any <code>PauseIf</code> is true, the group stops processing. This means that any <code>PauseIf</code>s after the true <code>PauseIf</code> will not be evaluated. This allows one <code>PauseIf</code> to prevent another <code>PauseIf</code> from collecting hits, but it's usually better to write the second <code>PauseIf</code> with an <code>AndNext</code> to limit when it collects hits.</p> <p>This also means that any <code>ResetIf</code>s in the group will not be processed while the group is paused. To reset the hit count on a <code>PauseIf</code>, you must place the <code>ResetIf</code> in an alt group or attach a <code>ResetNextIf</code> to the <code>PauseIf</code>.</p> <p>Delta values are not affected by paused groups. The value returned by a delta read will still be from the previous frame, not from the frame just before the group was paused.</p>"},{"location":"logic/pauseif/#pauseif-with-hit-counts","title":"<code>PauseIf</code> with hit counts","text":"<p>A <code>PauseIf</code> condition with a hit count target will only trigger when the hit count target is met. Once the hit count target is met, the group remains paused until the hit count is reset by a <code>ResetIf</code> in another group or a <code>ResetNextIf</code> attached to the <code>PauseIf</code>. You may hear this referred to as a PauseLock.</p> <p>A <code>PauseIf</code> without a hit count will automatically unpause when the condition is no longer true.</p>"},{"location":"logic/prior/","title":"Prior Values","text":"<p>A <code>Prior</code> value is the previous value at an address. It is similar to Delta, except it's only updated when the current values changes, whereas Delta is updated every frame. Note: when you use <code>Prior</code> it is implicit that you are referring to an address and not a value.</p> <p>Examples of how it can be used:</p> <ul> <li>Ensures a player visited the previous level instead of using a password to get there: <code>prior level = 6</code> would only be true if the player isn't currently on level 6, but hasn't been anywhere except the current level since being on level 6. If they came straight from the menu <code>prior level</code> would likely be 0.</li> </ul>"},{"location":"logic/prior/#comparison-of-memory-types-across-several-frames","title":"Comparison of memory types across several frames:","text":"Frame Mem Delta Prior 1 25 0 0 2 25 25 0 3 30 25 25 4 35 30 30 5 35 35 30 6 35 35 30 7 40 35 35 <p>Delta is always one frame behind Mem. Prior is only updated when Mem changes.</p>"},{"location":"logic/resetif/","title":"Reset If","text":"<p>The <code>ResetIf</code> can be chosen in the Flag column of the Achievement Editor</p> <p>If the associated condition is true, all hit counts in the achievement will be reset to 0. This includes hit counts in other groups (more about it in Alt Groups below).</p> <p>The achievement will not trigger if one or more <code>ResetIf</code> conditions is true, even if there are no conditions with hit count targets.</p> <p>You can see many examples of <code>ResetIf</code> in the Real Examples page.</p>"},{"location":"logic/resetif/#resetif-with-hit-counts","title":"<code>ResetIf</code> with hit counts","text":"<p>A <code>Reset If</code> condition with a hit count will only trigger when the hit count target is met.</p> <p>Note: If another <code>ResetIf</code> condition is met, all conditions, including the <code>ResetIf</code> with the hit count will have their hit counts reset to 0.</p> <p>It is very common to use a condition with a hit count of 1 as a start marker for an achievement, and use a <code>ResetIf</code> to cancel the achievement before the end condition is met. A common example is a damageless achievement: \"From start of (level/battle), reset if damage taken, trigger at end of (level/battle)\". When the start condition is true, a hit count is captured. If it's still set when the end condition is true, the achievement triggers. If the <code>ResetIf</code> condition triggers, the hit count on the start condition is set back to zero, which makes the condition false when evaluating the state when the end condition is true, and the achievement will not trigger.</p>"},{"location":"logic/resetnextif/","title":"Reset Next If","text":"<p>The <code>ResetNextIf</code> Flag is a special version of the [[ResetIf Flag]] that only resets the hit count of the following condition.</p> <p><code>ResetNextIf</code> has the same priority as the condition that it's attached to. If followed by a <code>PauseIf</code>, it can be used to reset that specific <code>PauseIf</code> without needing an alt. If attached to a standard condition, it will not be processed if the achievement is paused.</p> <p><code>AddAddress</code>, <code>AddSource</code>, and <code>SubSource</code> are combining modifier conditions and are not considered as the following condition. The <code>ResetNextIf</code> will apply to the next non-modified condition.</p> <p><code>AndNext</code> and <code>OrNext</code> are combining logical conditions and will have their hit counts reset, as well as whatever condition follows them.</p> <p>All other condition flags, including <code>AddHits</code> and <code>SubHits</code>, will cause processing of the <code>ResetNextIf</code> behavior to stop.</p>"},{"location":"logic/subsource/","title":"Sub Source","text":"<p>Note: most likely this technique is not needed for simple games. So, it's not mandatory for jr-devs.</p> <p>The <code>SubSource</code> can be chosen in the Flag column of the Achievement Editor</p> <p>Works similarly to <code>Add Source</code>, but the <code>Sub Source</code> flag subtracts the calculated value from the accumulator.</p> <p>Because it subtracts from the accumulator, <code>SubSource A, B</code> is actually <code>B - A</code>.</p>"},{"location":"logic/subsource/#simple-example","title":"Simple example","text":"ID Flag Type Size Memory Cmp Type Size Mem/Val Hits 1 SubSource Mem 8-bit 0x8010 2 Mem 8-bit 0x8020 &gt; Value 0x04 0 (0) <p>In this example the value in <code>0x8010</code> will be subtracted from the value in <code>0x8020</code> and the comparison will check is if this sum is greater than four.</p> <p>If the value in <code>0x8010</code> is <code>1</code> and the value in <code>0x8020</code> is <code>2</code>, the comparison will be <code>-1 + 2 &gt; 4</code>, or <code>1 &gt; 4</code>.</p>"},{"location":"logic/subsource/#using-subsource-to-count-specific-increments","title":"Using SubSource to Count Specific Increments","text":"<p><code>SubSource</code> can also be used to track specific increases in addresses. The conditions below states that the current value in address <code>0x80dc</code> minus the value in the previous frame in the same address must be equal <code>2</code>. Effectively, this means that the condition is true whenever the value in address <code>0x80dc</code> increases by exactly two.</p> ID Flag Type Size Memory Cmp Type Size Mem/Val Hits 1 SubSource Delta 8-bit 0x80dc 2 Mem 8-bit 0x80dc = Value 0x02 0 (0)"},{"location":"logic/subsource/#checking-for-a-negative-result","title":"Checking for a negative result","text":"<p>The accumulator and all logic performed is limited to an unsigned 32-bit number. If the total drops below 0, it underflows, resulting in a very large positive number. Here's the representation for the first few negative numbers:</p> <ul> <li><code>-1</code> is <code>0xFFFFFFFF</code></li> <li><code>-2</code> is <code>0xFFFFFFFE</code></li> <li><code>-3</code> is <code>0xFFFFFFFD</code></li> <li><code>-4</code> is <code>0xFFFFFFFC</code></li> <li><code>-5</code> is <code>0xFFFFFFFB</code></li> <li><code>-6</code> is <code>0xFFFFFFFA</code></li> <li><code>-7</code> is <code>0xFFFFFFF9</code></li> <li>and so on...</li> </ul> <p>So, if you wanted to see if a value was 1 less than another value, you could write:</p> ID Flag Type Size Memory Cmp Type Size Mem/Val Hits 1 SubSource Mem 8-bit 0x8020 2 Mem 8-bit 0x8010 = Value 0xffffffff 0 (0) <p>This would be true if the value at $8010 (1) was 1 less than the value at $8020 (2): <code>1 - 2</code> = <code>-1</code> = <code>0xFFFFFFFF</code>.</p> <p>However, you should swap the conditions to make it easier to read (<code>B - A = -1</code>) is the same as (<code>A - B = 1</code>):</p> ID Flag Type Size Memory Cmp Type Size Mem/Val Hits 1 SubSource Mem 8-bit 0x8010 2 Mem 8-bit 0x8020 = Value 1 0 (0) <p>This evaluates <code>-1 + 2 = 1</code>, which is true.</p>"},{"location":"logic/subsource/#subtracting-negative-constants","title":"Subtracting negative constants","text":"<p>It is also possible to use straight negative numbers in the left section of your Sub/Add Source operations. To do so, remember to change the Type from <code>Mem</code> to <code>Value</code>, and use the values as explained above, such as <code>0xFFFFFFE5</code> for <code>-27</code>, and <code>0xFFFFFFE3</code> for <code>-29</code>, for example:</p> ID Flag Type Size Memory Cmp Type Size Mem/Val Hits 1 SubSource Mem 32-bit 0x8020 2 Value 0xffffffe5 = Value 0xffffffe3 0 (0) <p>If $8020 contains 2, this would be true. <code>-2 + (-27) = -29</code>, which is <code>-2 - 27 = -29</code>, which is true.</p> <p>If you use a negative number in a <code>SubSource</code> flag, it will result in a double negative, turning the number back to positive.</p> ID Flag Type Size Memory Cmp Type Size Mem/Val Hits 1 SubSource Value 0xfffffffe 2 Value 0xffffffe5 = Value 0xffffffe3 0 (0) <p>This means <code>-(-2) + (-27) = -29</code>, which is <code>2 - 27 = -29</code>, which is <code>-25 = -29</code>, which is false.</p>"},{"location":"logic/trigger/","title":"Trigger","text":"<p><code>Trigger</code> marks one or more conditions in an achievement as the logic that is expected to be the final logic to become true which causes the achievement to trigger. This allows the runtime to know when an achievement is about to trigger, so a challenge indicator can be shown on the screen.</p> <p>When all conditions that must be true for the achievement to trigger are true except those marked with the <code>Trigger</code> flag, the achievement will become Primed. It will remain Primed as long as all of the previous conditions remain true, or until the achievement triggers or is deactivated.</p> <p>This functionality allows putting indicators on the screen to help players know when a challenge is active, or more importantly, when they fail the challenge. </p> <p>A prime example would be for a damageless boss fight. The <code>Trigger</code> flag would be put on the \"boss is dead\" condition. When all other conditions are true (ex: in boss fight, boss at full hp (HitCount 1), not demo), the challenge indicator would be displayed. If the player takes damage, the HitCount on the \"boss at full hp\" condition would get reset, and the challenge indicator would go away.</p> <p>Trigger should not be used if the player is not attempting a challenge. Achievements that would be earned without any additional effort from the player don't need to tell the player they're about to be earned.</p> <p>Up to eight challenge indicators can be shown at one time (though rarely more than one or two should be). If indicators and leaderboard trackers are both visible, the tracker will appear above the indicators.</p>"},{"location":"logic/trigger/#interaction-with-pauseif","title":"Interaction with PauseIf","text":"<p>If the achievement is Paused while Primed, the indicator will become hidden.</p> <p>If it is Paused before it is Primed, the indicator will not be shown at all until the achievement is unpaused.</p> <p>When the achievement becomes unpaused, the indicator may be displayed or hidden depending on the state of the non-Trigger conditions.</p>"},{"location":"other/balance/","title":"Difficulty Scale and Balance","text":"<p>This doc has some suggestions about difficulty, set balance and on keeping a set fun, approachable, and challenging. What you're going to see here are not rules, just suggestions.</p> <p>Note: be aware of Developers Code of Conduct</p>"},{"location":"other/balance/#difficulty-scale","title":"Difficulty Scale:","text":"<ol> <li>Freebie</li> <li>Easy</li> <li>Medium</li> <li>Med-hard</li> <li>Hard</li> <li>Very-Hard</li> <li>Super-Hard</li> </ol> <p>More details on these at the bottom.</p> <p>In general there should be an steady sloping balance of difficulty. One should think of the overall difficulty of a set while building it. One should not make sets excessively difficult.</p> <p>A good set balance on a 50 cheeves in an average set would have roughly: 4 freebies, 6 easy cheeves, 10 medium, 10 med-hard, 14 hard, and 6 very-hard, 0 kaizo.</p> <p>A well balanced difficulty distribution has rewards for every type of player. It gives each skill level something to accomplish until mastery.</p> <p>Achievements should not just be a check-mark of completing a game, (too easy) but create fun new memories for the game (diversity of challenges).</p> <p>It leaves space for freebies that are featuring curious or fun elements of the game. It expects enough difficulty that once you've mastered the set you are a master of the game. But it doesn't ask too much from the player either.</p> <p>It also shouldn't ask the player to be doing seemingly endless repetitive grinding to make a set seem harder. Doing the same task over and over isn't hard, it's typically dull. It should almost always avoid making marathon types with a hill at the end (ones that require long setup times with low or repetitive difficulty and then a spike of high difficulty at the end. Don't do it!).</p> <p>Sets should be mastereable by a skilled player who gives a dedicated effort.</p> <p>Sets should reflect the content of the game. Grinding cheeves in games that require grinding are reasonable, where in other places they would often be inappropriate.</p> <p>Sets should also break out of just what is expected from a game, pushing the player to need to find new solutions for problems a veteran player never considered.</p>"},{"location":"other/balance/#set-quantity","title":"Set Quantity:","text":"<p>Set quantity should not have such hard rules. Quality is the key factor.</p> <p>The set quantity strongly depends on how much fun and challenges the game can give. That's why the set developer must know the game very well.</p>"},{"location":"other/balance/#set-variety","title":"Set Variety:","text":"<p>Keep it fun, give it variety, challenge the player, give the player new things to do.</p> <p>Some achievements can give much fun to the player when they are like a meta-game. Where the player is required to rethink the game entirely.</p> <p>Some notable examples:</p> <ul> <li> <p>Fabulous ComboFabulous Combo (15) - it turns the game into a puzzle game, completing this can be really satifying</p> </li> <li> <p>Swordless Adventurer (20) - with no sword you are forced to rethink the entire game. You can discover how useful all the subweapons are. Very fun!</p> </li> <li> <p>There Are No Bullets in the Energy Zone (10) - pacifist challenges, when possible force a lot more agility from the player and break old habits. Very fun!</p> </li> </ul>"},{"location":"other/balance/#definitions-of-difficulty","title":"Definitions of Difficulty","text":""},{"location":"other/balance/#0-freebie","title":"0 - freebie","text":"<p>Takes almost no effort for basically all players to achieve this OR the player gets it without any conscious effort. The player gets these on accident and they pop up on the screen. Sometimes the player will have no idea why they earned them. Some freebies are good some are bad.</p> <p>Examples: Starting the game, picking a character, collecting an easily accessible item, killing your first enemy. Stumbling on a cheeve that took no forethought but highlights elements of the game.</p>"},{"location":"other/balance/#1-easy","title":"1 - Easy","text":"<p>Most players could get these on their first attempt, Some on their second or third attempt. Rarely players can mess it up.</p> <p>Examples: Progress on easy stages, getting 100 coins, collecting a feather, collecting 20 rings. Getting the first upgrade, getting to a well known secret stage. Fighting a simple boss: most bosses in Super Mario World, completing early stages in Sonic.</p>"},{"location":"other/balance/#2-medium","title":"2 - Medium","text":"<p>Many players could get this on their first attempt. Many could after a few attempts. Some will need to practice. Very few will struggle with them.</p> <p>Examples: Getting all the colored switches in Super Mario World, collecting all of the items in a Castlevania stage, getting a bonus item in a more hidden area, like moons in SMW. Beating Contra with the Konami code.</p>"},{"location":"other/balance/#3-medium-hard","title":"3 - Medium-Hard","text":"<p>A low amount of players could get this on their first attempt. Some after a few attempts and most will take some effort and practice to complete these. A few will find them very challenging, and give up.</p> <p>Examples: Getting some of the chaos emeralds in Sonic 2. Beating Super Mario World.</p>"},{"location":"other/balance/#4-hard","title":"4 - Hard","text":"<p>Very few player can get these on their first attempt, perhaps if they already know the game (not really a first attempt is it?) Most can complete these with a solid effort, many attempts and some practice, and some need to practice other games first.</p> <p>Examples: Getting all of the Chaos emeralds in Sonic 1,2,3. Beating Contra without the Konami code.</p>"},{"location":"other/balance/#5-very-hard","title":"5 - Very Hard","text":"<p>Only the rarest of players can complete these on a first attempt. Most can complete it after many attempts, Many players will drop off here and won't be willing to complete the set unless they are completionists or fans of the game. Many are not able to complete this after very many attempts. Usually takes significant practice, high skills, experience, research, or guides to complete.</p> <p>Examples: Beating Contra in one life. Escaping Zebes (Super Metroid) in under two minutes. Beating many of the Megaman bosses without taking damage. Many damagless stages, depending on the game.</p>"},{"location":"other/balance/#6-super-hard","title":"6 - Super Hard","text":"<p>Most players are not able to complete this after dozens of attempts. Many players will never be able to complete it as it could require beyond normal reaction speeds. The top-most skilled players still consider these blisteringly hard. It may take marathon efforts to restart.</p> <p>Examples: Completing a game without taking damage especially if the player has a lifebar, challenges that drastically restrict the player and require near frame perfect accuracy tor success. Beating contra twice in one life. Penniless plumber. Beating Megaman without taking damage.</p>"},{"location":"other/codenotesenmasse/","title":"Code Notes En Masse","text":"<p>When RAM digging, you may find yourself wishing for a way to do code notes en masse. Unfortunately, there's not a convenient or simple way to do this, but it is possible and can save a ton of time if you are patient enough to learn how.</p> <p>First, we'll look at how local code notes work. - Open the Memory Inspector and the Code Notes windows. - Go to a random address and type something in as a note, but do not publish it. - Check that address in the Code Notes window. You'll notice that your note is red. - Go to the emulator's RACache directory and open the <code>GameID-User.txt</code> file of the game you have running. - Lines that start with <code>N0:</code> are local code notes. Once you publish a note, it will disappear from the <code>GameID-User.txt</code> file.</p> <p><code>N0:address of the note:\"text of the code note\"</code></p> <ul> <li><code>N0:</code> is how the server knows this is a code note.</li> <li><code>address of the note</code> the memory address, obviously. This will be in hex, not decimal.</li> <li><code>:</code> it's just a separator</li> <li><code>\"text of the code note\"</code> - the contents of the code note, and yes, the quotes are required. Line breaks can be used with <code>\\r\\n</code> and quotes within the note can be used with <code>\\\"</code></li> </ul> <p>Now, the next part requires some general know-how with spreadsheets. It will vary per game, so you'll need to figure out the formula for a lot of things yourself. We will use an example, though.</p> <p>Let's say we want to have notes for all character stats. You will need the following: - Character 1's stat addresses. - An offset for Character 1 and Character 2's first stats.</p> <p>We will use Trails in the Sky SC as an example.</p> <p>Character 1 is Estelle, and her stat addresses are as followed:</p> Address \"Character and Stat\" 0xc5bbcc \"[16-bit] Estelle - Current Level\" 0xc5bbd0 \"[16-bit] Estelle - Max HP\" 0xc5bbd4 \"[16-bit] Estelle - Current HP\" 0xc5bbd8 \"[16-bit] Estelle - Max EP\" 0xc5bbda \"[16-bit] Estelle - Current EP\" 0xc5bbdc \"[16-bit] Estelle - Current CP\" 0xc5bbe0 \"[32-bit] Estelle - Current EXP\" 0xc5bbe4 \"[16-bit] Estelle - STR Stat\" 0xc5bbe6 \"[16-bit] Estelle - DEF Stat\" 0xc5bbe8 \"[16-bit] Estelle - ATS Stat\" 0xc5bbea \"[16-bit] Estelle - ADF Stat\" 0xc5bbec \"[16-bit] Estelle - DEX Stat\" 0xc5bbee \"[16-bit] Estelle - AGL Stat\" 0xc5bbf0 \"[16-bit] Estelle - MOV Stat\" 0xc5bbf2 \"[16-bit] Estelle - SPD Stat\" 0xc5bbfa \"[16-bit] Estelle - RNG Stat\" <p>Character 2 is Joshua. His first stat (Current Level) is at the address 0xc5bc08.</p> <p>0xc5bc08 minus 0xc5bbcc is 0x3c, or 60 in decimal. We can confirm this by checking his last stat (RNG), which is 0xc5bc36, also 0x3c/60 from Estelle's last stat.</p> <p>We'll start by putting Estelle's stats into a spreadsheet and adding a column between the addresses and stats. It will look like this (column numbers in parenthesis):</p> Address (A) Blank Column (B) \"Character and Stat\" (C) 0xc5bbcc \"[16-bit] Estelle - Current Level\" 0xc5bbd0 \"[16-bit] Estelle - Max HP\" 0xc5bbd4 \"[16-bit] Estelle - Current HP\" 0xc5bbd8 \"[16-bit] Estelle - Max EP\" 0xc5bbda \"[16-bit] Estelle - Current EP\" 0xc5bbdc \"[16-bit] Estelle - Current CP\" 0xc5bbe0 \"[32-bit] Estelle - Current EXP\" 0xc5bbe4 \"[16-bit] Estelle - STR Stat\" 0xc5bbe6 \"[16-bit] Estelle - DEF Stat\" 0xc5bbe8 \"[16-bit] Estelle - ATS Stat\" 0xc5bbea \"[16-bit] Estelle - ADF Stat\" 0xc5bbec \"[16-bit] Estelle - DEX Stat\" 0xc5bbee \"[16-bit] Estelle - AGL Stat\" 0xc5bbf0 \"[16-bit] Estelle - MOV Stat\" 0xc5bbf2 \"[16-bit] Estelle - SPD Stat\" 0xc5bbfa \"[16-bit] Estelle - RNG Stat\" <p>In cell B1, we'll use the following formula: <code>=hex2dec(A1)</code> to turn the address to decimal. Then we'll drag it down to populate the other cells. It should now look like this (also, added the row column since we'll need it):</p> Row Address (A) Address in Decimal (B) \"Character and Stat\" (C) 01 0xc5bbcc 12958668 \"[16-bit] Estelle - Current Level\" 02 0xc5bbd0 12958672 \"[16-bit] Estelle - Max HP\" 03 0xc5bbd4 12958676 \"[16-bit] Estelle - Current HP\" 04 0xc5bbd8 12958680 \"[16-bit] Estelle - Max EP\" 05 0xc5bbda 12958682 \"[16-bit] Estelle - Current EP\" 06 0xc5bbdc 12958684 \"[16-bit] Estelle - Current CP\" 07 0xc5bbe0 12958688 \"[32-bit] Estelle - Current EXP\" 08 0xc5bbe4 12958692 \"[16-bit] Estelle - STR Stat\" 09 0xc5bbe6 12958694 \"[16-bit] Estelle - DEF Stat\" 10 0xc5bbe8 12958696 \"[16-bit] Estelle - ATS Stat\" 11 0xc5bbea 12958698 \"[16-bit] Estelle - ADF Stat\" 12 0xc5bbec 12958700 \"[16-bit] Estelle - DEX Stat\" 13 0xc5bbee 12958702 \"[16-bit] Estelle - AGL Stat\" 14 0xc5bbf0 12958704 \"[16-bit] Estelle - MOV Stat\" 15 0xc5bbf2 12958706 \"[16-bit] Estelle - SPD Stat\" 16 0xc5bbfa 12958714 \"[16-bit] Estelle - RNG Stat\" <p>Now, we'll populate the cells with Joshua's stats using the offset. In cell B17, we will use the formula <code>=B1+60</code>, which will give us <code>12958728</code>. Drag cell B17 to B32. In cell A17, use the formula <code>=dec2hex</code> and drag that down to A32. It should now look like this:</p> Row Address (A) Address in Decimal (B) \"Character and Stat\" (C) 01 0xc5bbcc 12958668 \"[16-bit] Estelle - Current Level\" 02 0xc5bbd0 12958672 \"[16-bit] Estelle - Max HP\" 03 0xc5bbd4 12958676 \"[16-bit] Estelle - Current HP\" 04 0xc5bbd8 12958680 \"[16-bit] Estelle - Max EP\" 05 0xc5bbda 12958682 \"[16-bit] Estelle - Current EP\" 06 0xc5bbdc 12958684 \"[16-bit] Estelle - Current CP\" 07 0xc5bbe0 12958688 \"[32-bit] Estelle - Current EXP\" 08 0xc5bbe4 12958692 \"[16-bit] Estelle - STR Stat\" 09 0xc5bbe6 12958694 \"[16-bit] Estelle - DEF Stat\" 10 0xc5bbe8 12958696 \"[16-bit] Estelle - ATS Stat\" 11 0xc5bbea 12958698 \"[16-bit] Estelle - ADF Stat\" 12 0xc5bbec 12958700 \"[16-bit] Estelle - DEX Stat\" 13 0xc5bbee 12958702 \"[16-bit] Estelle - AGL Stat\" 14 0xc5bbf0 12958704 \"[16-bit] Estelle - MOV Stat\" 15 0xc5bbf2 12958706 \"[16-bit] Estelle - SPD Stat\" 16 0xc5bbfa 12958714 \"[16-bit] Estelle - RNG Stat\" 17 0xc5bc08 12958728 18 0xc5bc0c 12958732 19 0xc5bc10 12958736 20 0xc5bc14 12958740 21 0xc5bc16 12958742 22 0xc5bc18 12958744 23 0xc5bc1c 12958748 24 0xc5bc20 12958752 25 0xc5bc22 12958754 26 0xc5bc24 12958756 27 0xc5bc26 12958758 28 0xc5bc28 12958760 29 0xc5bc2a 12958762 30 0xc5bc2c 12958764 31 0xc5bc2e 12958766 32 0xc5bc36 12958774 <p>Now, we'll copy cells C1:C16 and paste them to cells C17:C32. We'll highlight C17:C32 and use the Find &amp; Replace tool (CTRL+H for Google Sheets) to change instances of <code>Estelle</code> to <code>Joshua</code>, but only for that cell range. It will look like this:</p> Row Address (A) Address in Decimal (B) \"Character and Stat\" (C) 01 0xc5bbcc 12958668 \"[16-bit] Estelle - Current Level\" 02 0xc5bbd0 12958672 \"[16-bit] Estelle - Max HP\" 03 0xc5bbd4 12958676 \"[16-bit] Estelle - Current HP\" 04 0xc5bbd8 12958680 \"[16-bit] Estelle - Max EP\" 05 0xc5bbda 12958682 \"[16-bit] Estelle - Current EP\" 06 0xc5bbdc 12958684 \"[16-bit] Estelle - Current CP\" 07 0xc5bbe0 12958688 \"[32-bit] Estelle - Current EXP\" 08 0xc5bbe4 12958692 \"[16-bit] Estelle - STR Stat\" 09 0xc5bbe6 12958694 \"[16-bit] Estelle - DEF Stat\" 10 0xc5bbe8 12958696 \"[16-bit] Estelle - ATS Stat\" 11 0xc5bbea 12958698 \"[16-bit] Estelle - ADF Stat\" 12 0xc5bbec 12958700 \"[16-bit] Estelle - DEX Stat\" 13 0xc5bbee 12958702 \"[16-bit] Estelle - AGL Stat\" 14 0xc5bbf0 12958704 \"[16-bit] Estelle - MOV Stat\" 15 0xc5bbf2 12958706 \"[16-bit] Estelle - SPD Stat\" 16 0xc5bbfa 12958714 \"[16-bit] Estelle - RNG Stat\" 17 0xc5bc08 12958728 \"[16-bit] Joshua - Current Level\" 18 0xc5bc0c 12958732 \"[16-bit] Joshua - Max HP\" 19 0xc5bc10 12958736 \"[16-bit] Joshua - Current HP\" 20 0xc5bc14 12958740 \"[16-bit] Joshua - Max EP\" 21 0xc5bc16 12958742 \"[16-bit] Joshua - Current EP\" 22 0xc5bc18 12958744 \"[16-bit] Joshua - Current CP\" 23 0xc5bc1c 12958748 \"[32-bit] Joshua - Current EXP\" 24 0xc5bc20 12958752 \"[16-bit] Joshua - STR Stat\" 25 0xc5bc22 12958754 \"[16-bit] Joshua - DEF Stat\" 26 0xc5bc24 12958756 \"[16-bit] Joshua - ATS Stat\" 27 0xc5bc26 12958758 \"[16-bit] Joshua - ADF Stat\" 28 0xc5bc28 12958760 \"[16-bit] Joshua - DEX Stat\" 29 0xc5bc2a 12958762 \"[16-bit] Joshua - AGL Stat\" 30 0xc5bc2c 12958764 \"[16-bit] Joshua - MOV Stat\" 31 0xc5bc2e 12958766 \"[16-bit] Joshua - SPD Stat\" 32 0xc5bc36 12958774 \"[16-bit] Joshua - RNG Stat\" <p>We can repeat this for the remaining characters, but we'll leave it as is to keep it simple.</p> <p>Remember the syntax: <code>N0:``address of the note``:``\"text of the code note\"</code>. This is how we'll set up the spreadsheet.</p> <ul> <li>Add a column to the left of column A and fill that column with <code>N0:</code>.</li> <li>Copy cells B1:B32 (which are now the hex addresses).</li> <li>Right-click on B1 and go to Paste Special -&gt; Values only, or simply press CTRL+SHIFT+V. If you don't do this, the next step will mess everything up.</li> <li>Clear Column C (which were the decimal addresses) and fill C1:C32 with <code>:</code>.</li> <li>The sheet should now look like this:</li> </ul> Row N0: (A) Address (B) : (C) \"Character and Stat\" (D) 01 N0: 0xc5bbcc : \"[16-bit] Estelle - Current Level\" 02 N0: 0xc5bbd0 : \"[16-bit] Estelle - Max HP\" 03 N0: 0xc5bbd4 : \"[16-bit] Estelle - Current HP\" 04 N0: 0xc5bbd8 : \"[16-bit] Estelle - Max EP\" 05 N0: 0xc5bbda : \"[16-bit] Estelle - Current EP\" 06 N0: 0xc5bbdc : \"[16-bit] Estelle - Current CP\" 07 N0: 0xc5bbe0 : \"[32-bit] Estelle - Current EXP\" 08 N0: 0xc5bbe4 : \"[16-bit] Estelle - STR Stat\" 09 N0: 0xc5bbe6 : \"[16-bit] Estelle - DEF Stat\" 10 N0: 0xc5bbe8 : \"[16-bit] Estelle - ATS Stat\" 11 N0: 0xc5bbea : \"[16-bit] Estelle - ADF Stat\" 12 N0: 0xc5bbec : \"[16-bit] Estelle - DEX Stat\" 13 N0: 0xc5bbee : \"[16-bit] Estelle - AGL Stat\" 14 N0: 0xc5bbf0 : \"[16-bit] Estelle - MOV Stat\" 15 N0: 0xc5bbf2 : \"[16-bit] Estelle - SPD Stat\" 16 N0: 0xc5bbfa : \"[16-bit] Estelle - RNG Stat\" 17 N0: 0xc5bc08 : \"[16-bit] Joshua - Current Level\" 18 N0: 0xc5bc0c : \"[16-bit] Joshua - Max HP\" 19 N0: 0xc5bc10 : \"[16-bit] Joshua - Current HP\" 20 N0: 0xc5bc14 : \"[16-bit] Joshua - Max EP\" 21 N0: 0xc5bc16 : \"[16-bit] Joshua - Current EP\" 22 N0: 0xc5bc18 : \"[16-bit] Joshua - Current CP\" 23 N0: 0xc5bc1c : \"[32-bit] Joshua - Current EXP\" 24 N0: 0xc5bc20 : \"[16-bit] Joshua - STR Stat\" 25 N0: 0xc5bc22 : \"[16-bit] Joshua - DEF Stat\" 26 N0: 0xc5bc24 : \"[16-bit] Joshua - ATS Stat\" 27 N0: 0xc5bc26 : \"[16-bit] Joshua - ADF Stat\" 28 N0: 0xc5bc28 : \"[16-bit] Joshua - DEX Stat\" 29 N0: 0xc5bc2a : \"[16-bit] Joshua - AGL Stat\" 30 N0: 0xc5bc2c : \"[16-bit] Joshua - MOV Stat\" 31 N0: 0xc5bc2e : \"[16-bit] Joshua - SPD Stat\" 32 N0: 0xc5bc36 : \"[16-bit] Joshua - RNG Stat\" <ul> <li>Copy cells A1:D32 and paste them into the <code>GameID-User.txt</code> file.</li> <li>Use Find and Replace to change tabs to an empty space/nothing/blank.</li> </ul> <p>The <code>GameID-User.txt</code> contents now look like this: <pre><code>#.#.#.#\nTrails in the Sky SC\nN0:0xc5bbcc:\"[16-bit] Estelle - Current Level\"\nN0:0xc5bbd0:\"[16-bit] Estelle - Max HP\"\nN0:0xc5bbd4:\"[16-bit] Estelle - Current HP\"\nN0:0xc5bbd8:\"[16-bit] Estelle - Max EP\"\nN0:0xc5bbda:\"[16-bit] Estelle - Current EP\"\nN0:0xc5bbdc:\"[16-bit] Estelle - Current CP\"\nN0:0xc5bbe0:\"[32-bit] Estelle - Current EXP\"\nN0:0xc5bbe4:\"[16-bit] Estelle - STR Stat\"\nN0:0xc5bbe6:\"[16-bit] Estelle - DEF Stat\"\nN0:0xc5bbe8:\"[16-bit] Estelle - ATS Stat\"\nN0:0xc5bbea:\"[16-bit] Estelle - ADF Stat\"\nN0:0xc5bbec:\"[16-bit] Estelle - DEX Stat\"\nN0:0xc5bbee:\"[16-bit] Estelle - AGL Stat\"\nN0:0xc5bbf0:\"[16-bit] Estelle - MOV Stat\"\nN0:0xc5bbf2:\"[16-bit] Estelle - SPD Stat\"\nN0:0xc5bbfa:\"[16-bit] Estelle - RNG Stat\"\nN0:0xc5bc08:\"[16-bit] Joshua - Current Level\"\nN0:0xc5bc0c:\"[16-bit] Joshua - Max HP\"\nN0:0xc5bc10:\"[16-bit] Joshua - Current HP\"\nN0:0xc5bc14:\"[16-bit] Joshua - Max EP\"\nN0:0xc5bc16:\"[16-bit] Joshua - Current EP\"\nN0:0xc5bc18:\"[16-bit] Joshua - Current CP\"\nN0:0xc5bc1c:\"[32-bit] Joshua - Current EXP\"\nN0:0xc5bc20:\"[16-bit] Joshua - STR Stat\"\nN0:0xc5bc22:\"[16-bit] Joshua - DEF Stat\"\nN0:0xc5bc24:\"[16-bit] Joshua - ATS Stat\"\nN0:0xc5bc26:\"[16-bit] Joshua - ADF Stat\"\nN0:0xc5bc28:\"[16-bit] Joshua - DEX Stat\"\nN0:0xc5bc2a:\"[16-bit] Joshua - AGL Stat\"\nN0:0xc5bc2c:\"[16-bit] Joshua - MOV Stat\"\nN0:0xc5bc2e:\"[16-bit] Joshua - SPD Stat\"\nN0:0xc5bc36:\"[16-bit] Joshua - RNG Stat\"\n</code></pre> - Save it. - Next time the game is loaded and the Code Notes window is opened, all of those notes will appear in red. - If we click Publish at the bottom of the Code Notes window, all of the notes will publish at once.</p> <p>That's all, folks. Learn some spreadsheet formulas and Regular Expressions and you will become a Code Note guru. Please use responsibly and don't actually save over my Trails in the Sky SC notes. Always spot-check addresses here and there to make sure your formulas stay consistent. I added over 500 code notes to the wrong game using an older method, which was much easier to make mistakes. &lt;3 - tele. </p>"},{"location":"other/combiningflags/","title":"Combining Flags","text":"<p><code>ResetIf</code> and <code>PauseIf</code> can be applied to a condition following any number of <code>Add Hits</code>, <code>Add Source</code>, or <code>Sub Source</code> conditions. </p> <p>Going back to the <code>Add Source</code> example above, if <code>ResetIf</code> were applied to condition 2, the achievement would reset because <code>1 + 2 &gt; 0</code>.</p>"},{"location":"other/consoletips/","title":"Console Specific Tips","text":"<p>When excavating the memory of these old consoles it helps to know what the original creators of the games were working with in the first place. If you familiarize yourself with the quirks of your favorite console then set making will be easier and more accurate.</p> <ul> <li>NES</li> <li>Memory Mirroring</li> <li>Game Boy</li> <li>Memory Map</li> <li>ECHO RAM</li> <li>GBC</li> <li>GB and GBC BIOS</li> <li>Nintendo 64</li> <li>Using GameShark Codes for Addresses</li> <li>Nintendo DS</li> <li>Nintendo DSi (Bizhawk)</li> <li>Neo Geo</li> <li>Mandatory UniBIOS protection</li> <li>PlayStation</li> <li>PlayStation Portable</li> </ul>"},{"location":"other/consoletips/#nes","title":"NES","text":""},{"location":"other/consoletips/#memory-mirroring","title":"Memory Mirroring","text":"<p>When using the memory inspector to find variables for NES games, there will be 4 copies of everything you find. If you're wondering \"which one do I use?\" or \"should I check for all of them?\" it's not as complicated as it seems.</p> <p>This is a feature of the NES that gave developers more ways of looking at memory. Because the NES itself only has 2KB of RAM, the first result (the one below 0x800) should be used for consistency, and applying additional conditions on the others will do nothing.</p> <p>This applies to RPS and leaderboards as well.</p>"},{"location":"other/consoletips/#game-boy","title":"Game Boy","text":""},{"location":"other/consoletips/#memory-map","title":"Memory Map","text":"<p>Certain ranges of values mean different things in the context of the Game Boy hardware, so having a map of what's where can help you with eliminating useless addresses. Here's the lowdown:</p> <ul> <li>\u274c 0x0000 - 0x7FFF: ROM Data (No reason to use. This area contains header information that's only read on certain emulators.)</li> <li>\u274c 0x8000 - 0x9FFF: Graphics Data (Some things here might correlate with what you're looking for if you're trying to find a map ID or animation, but there will always be a better way of going about what you're doing than using any of these)</li> <li>\u2714\ufe0f 0xA000 - 0xBFFF: Cartridge RAM (IE. save data. Sometimes using these addresses will be unavoidable but then your set could be prone to cheating by loading 100% save files. More info on protecting against save files to come)</li> <li>\u2714\ufe0f 0xC000 - 0xDFFF: Work RAM (The good stuff; almost everything you should use will fall inside this range)</li> <li>\u274c 0xE000 - 0xFDFF: ECHO RAM (Do not use, see below)</li> <li>\u274c 0xFE00 - 0xFE9F: More Graphics Data (same as Graphics Data above)</li> <li>\u274c 0xFEA0 - 0xFF7F: Miscellaneous (Do not use)</li> <li>\u2714\ufe0f 0xFF80 - 0xFFFF: Miscellaneous (Okay to use)</li> </ul> <p>For more info see: http://gameboy.mongenel.com/dmg/asmmemmap.html</p>"},{"location":"other/consoletips/#echo-ram","title":"ECHO RAM","text":"<p>Similarly to the NES, certain variables may show up twice when searching in the Memory Inspector. The second result is in what's called the ECHO RAM, which is a mirror of the actual memory. Since some emulators tend to ignore this area or emulate it incorrectly, it's recommended to NOT use it at all and always use the first result.</p> <p>The Game Boy has 8KB of RAM starting at 0xC000. ECHO RAM starts at 0xE000, so if your address begins with an E you'll want to replace the first non-zero character with a C. Remember: C is correct, E is echo!</p>"},{"location":"other/consoletips/#gbc","title":"GBC","text":"<p>On the GBC, the 4KB of memory from 0xD000-0xDFFF is a bank from a larger 32KB memory block not directly accessible by the processor. Bits 0-2 of 0xFF70 indicate which bank is loaded into the 0xD000-0xDFFF memory block. It's a \"feature\" used to expand the storage available to GBC ROMs while still supporting GB ROMs.</p> <p>Bank switching (changing the value of 0xFF70) causes the memory in the 0xD000-0xDFFF range to update. This appears as flickering in the Memory Viewer and makes tracking down values in that memory range difficult. If you are writing conditions dependent on memory in that block, you should also require that 0xFF70 have a specific value to ensure you are looking at the correct bank. The 4KB of memory from 0xC000-0xCFFF is not bank-switched and can be used safely without additional conditions.</p> <p>It is not advisable to use these addresses for achievements if there is any alternative to doing so. As of January 2018, RALibretro will only display bank 0x00 at 0xFF70. RetroArch has fluctuating memory banks, but the various addresses do not function in the same manner as RAVisualBoyAdvance. At least until RetroArch receives a memory inspector, achievements using addresses from 0xD000-0xDFFF will only work within RAVisualBoyAdvance.</p>"},{"location":"other/consoletips/#gb-and-gbc-bios","title":"GB and GBC BIOS","text":"<p>RALibRetro and RetroArch support the GB/GBC BIOS, which shows the \"Nintendo\" and \"GameBoy\" logo before starting the game. This provides approximately four seconds where the main memory ($C000-$DFFF) hasn't been initialized and can't be trusted, and may cause achievements to trigger while loading the game for a subset of users who have the BIOS enabled.</p> <p>To enable this feature, put the bios file (named <code>gb_bios.bin</code> or <code>gbc_bios.bin</code>) into the system directory of either RALibRetro or RetroArch. When you start the game, you will see the \"Nintendo\" and \"GameBoy\" logos before proceeding into the actual game.</p> <p>If this is causing you problems, you may need to add logic to prevent the achievements from triggering while the BIOS is executing, but it would be preferable to use in-game logic if possible (i.e. a specific screen is being displayed).</p> <p>The BIOS code is loaded from $0000-$00FF, so identify some chunk of that memory that's unique while the BIOS is running and ignore it. For example, the last four bytes of the GBC BIOS block are <code>3E 11 E0 50</code>, so you could add this condition to the achievement to prevent it from triggering while the BIOS is running. <pre><code>32-bit 0x00FC != 0x50E0113E\n</code></pre> After the BIOS completes, the block is blanked out with FF's, and repurposed for interrupt vectors. For more detail, see A Look at the GameBoy bootstrap.</p> <p>NOTE: The last four bytes of the GB BIOS are <code>3E 01 E0 50</code>. So the GB condition would be: <pre><code>32-bit 0x00FC != 0x50E0013E\n</code></pre></p>"},{"location":"other/consoletips/#nintendo-64","title":"Nintendo 64","text":""},{"location":"other/consoletips/#using-gameshark-codes-for-addresses","title":"Using GameShark Codes for Addresses","text":"<p>GameShark codes can be a valuable resource for finding addresses you can't or don't feel like finding. They have 12 characters per line and are fairly easy to parse.</p> <p><code>[AA][BBBBBB] [CCCC]</code></p> <p>[AA] is the codetype. This is a short instruction to the GameShark that defines what to do with the next value. If you understand what the GameShark code does you can use it to help with condition-making.</p> <ul> <li>80, 88: The address is 8-bit. Sets the value [00CC] to the address [BBBBBB].</li> <li>81, 89: The address is 16-bit. Sets the value [CCCC] to the address [BBBBBB].</li> <li>D0: The address is 8-bit. Checks if [00CC] is equal to the value at address [BBBBBB] then executes the next line if it is.</li> <li>D2: The address is 8-bit. Checks if [00CC] is DIFFERENT to the value at address [BBBBBB] then executes the next line if it is.</li> <li>D1: The address is 16-bit. Checks if [CCCC] is equal to the value at address [BBBBBB] then executes the next line if it is.</li> <li>D3: The address is 16-bit. Checks if [CCCC] is DIFFERENT to the value at address [BBBBBB] then executes the next line if it is.</li> </ul> <p>Here are some examples: * Paper Mario: Infinite HP:</p> <p><code>[80][10F292] [0032]</code></p> <p>Sets the 8-bit value at 0x10F292 to 0x32 (50). So this means Mario's HP is an 8-bit value at 0x10F292.</p> <ul> <li>Donkey Kong 64: Play as Rambi: </li> </ul> <p><code>[80][74E77C] [0006]</code></p> <p>Sets the 8-bit value at 0x74E77C to 6. So this means the character you're playing as is an 8-bit value at 0x74E77C.</p> <ul> <li>Chameleon Twist 2: Hold L to Moon Jump:</li> </ul> <p><code>[D0][18BAB5] [0020] &lt;- Looking at this one</code></p> <p><code>[81][18B9E0] [4200]</code></p> <p>Checks if the 8-bit value at 0x18BAB5 is equal to 0x20. This means 0x18BAB5 contains a button press variable and Bit5 (0x20) corresponds to L.</p> <p>Anti-GSC and GameHacking are both good resources for finding GameShark codes.</p>"},{"location":"other/consoletips/#nintendo-ds","title":"Nintendo DS","text":"<p>Pointers always start with a <code>0x02</code>. For example, a pointer pointing directly to <code>0x13f944</code> will be <code>0x0213f944</code>.</p>"},{"location":"other/consoletips/#nintendo-dsi-bizhawk","title":"Nintendo DSi (Bizhawk)","text":"<ul> <li>0xfffe00: DSi Mode String ASCII String that identifies the DSi Game being played. Can be used to check if you are in the game rather than on the DSi home screen, etc.</li> </ul>"},{"location":"other/consoletips/#neo-geo","title":"Neo Geo","text":""},{"location":"other/consoletips/#mandatory-unibios-protection","title":"Mandatory UniBIOS protection","text":"<p>UniBIOS allows several debugging options, and also access the database of individual cheats for every game. Therefore all achievements for Neo Geo need to be protected from abusing it. The simpliest solution here is disallowing UniBIOS usage completely, directly from the level of achievement code.</p> <p>Fortunately part of UniBIOS data seems to be reflected in two address strings in the RAM: <code>0x00fe30</code> and <code>0x00fe50</code>. While UniBIOS is active <code>0x00fe30</code> in 32-bit size seems to always brings the same value (for every Neo Geo game) which is <code>80025632</code>, and it doesn't seem to change after the ROM was loaded. For any other BIOS, the value is always 0, (except for the moment the RAM is overloaded by the diagnostic program, after the ROM was loaded).</p> <p>To protect achievements from using UniBIOS all we need to do is to include a simple protection which will reset when <code>0x00fe30</code> in 32-bit size is not equal to <code>0</code>. This additionally, eventually protect the achievement from unlocking during RAM diagnostic process.</p> <p>Here is how the protection should look alike (selected in the Achievement Editor): </p> <p>Here is how the same RAM region looks when other BIOS are used (here MSV): </p>"},{"location":"other/consoletips/#playstation","title":"PlayStation","text":"<p>NOTE: If a core doesn't require a BIOS, this memory may not be initialized.</p> <p>The RAM from $0000-$FFFF is reserved for the kernel. The boot executable name appears to reliably be placed at $9E18 AND $B8B0. The boot executable name almost always contains the disc serial, which is unique per region, so this can often be used to determine which version of a game the player is using. </p> <pre><code>Spyro the Dragon                         SCUS_942.28\n\n9E18 5C 53 43 55 53 5F 39 34 32 2E 32 38 3B 31\n      \\  S  C  U  S  _  9  4  2  .  2  8  ;  1\n\nB8B0 63 64 72 6F 6D 3A 5C 53 43 55 53 5F 39 34 32 2E 32 38 3B 31\n      c  d  r  o  m  :  \\  S  C  U  S  _  9  4  2  .  2  8  ;  1\n</code></pre>"},{"location":"other/consoletips/#playstation-portable","title":"PlayStation Portable","text":"<p>When working with PSP make sure to check if your game has any DLC as this form of content is able to be accessed by players without altered saves or patched versions of the game and will need to be accounted for and in some cases protected against if it provides advantages that you don't want players to exploit.</p>"},{"location":"other/demo/","title":"Testing for Demo Mode","text":"<p>Link to original post on RetroAchievements</p> <p>One of the more annoying things that can happen is if you leave your game running, and the game awards you achievements for reaching levels you haven't reached yet. This is fairly common, as many games of the 16-bit era still had 'attract modes', and is usually a pretty easy thing to fix with the achievements. </p> <p>We are looking in the game to find something that is set when the game is in a demo mode. Either a small piece of memory set to <code>0</code>, or <code>1</code>, or <code>0xff</code>. It could be anything really.</p> <p>To start it will help to play through the game a little, and set a few save states throughout different levels of the game. And then to begin finding this 'is demo mode active' memory, we should first reset the game and wait for the demo to play.</p> <p>During when the game plays the first demo, use the Memory Inspector to start a new 8-bit test, (click <code>New 8-bit test</code>), and set the filter value to be equal to the last known value (under <code>Filter values:</code>, set to <code>==</code>), and press <code>Filter!</code> a few times. With each press, you should see the number of matches slowly become fewer, but not by much. </p> <p>Next wait til the game starts playing another demo but on a different level. When the next demo is playing, press Filter a few more times, and you'll see the candidates get smaller again. Continue to do this until you've eliminated as many candidates as you can.</p> <p>IMPORTANT: Don't forget, you only want to press filter when the game is DEFINITELY in the demo. If you press when it's on the title screen, or playing a movie, or even when fading in or out, the value might not be set. There's no real way to know; we are assuming that it will be set (or unset) when the demo itself is playing, which itself is only a fairly likely assumption. </p> <p>After viewing some or all of the demos, you will probably still have TONS of potential memory values. Here's the juicy part, that should eliminate a ton of candidates at once. Load up one of your save states where you are definitely in-game, playing and NOT in a demo.</p> <p>Now we will be filtering for \"I am NOT in a demo\". Set your filter value to not-equal <code>!=</code>, and hit <code>Filter</code> ONLY ONCE.</p> <p>At this point, the set of candidates now represent memory values that are \"values different to when a demo was playing\". Switch back to equal (=), and hit <code>Filter</code> a few more times (because we are saying 'whatever values we have, they are the same as the ones just now. The 'is demo mode' value will still be equivalent to whatever it was just now). It might help to move the character around the screen, or perform a few actions, between hitting the <code>Filter</code> button. </p> <p>Next, load up your next save state, and perform the same routine. Your number of candidates should reduce further, until you have less than 100 remaining.</p> <p>By now if you should have only a few candidates remaining. Likely values for the candidate will be 0, 1 or 0xff. If it is something else I'd recommend ignoring it, as it's not likely to be what we're looking for (but still, not impossible). For example, in Sonic the Hedgehog (Mega Drive), the address is 0xfff0, and the value is 01 when a demo is active.</p> <p>Our next step will be to verify our find. Pick one of these values and restart the game, keeping an eye on this value as the game plays the demos. Then load through each of your save states and see if it changes as you expect it to. Perhaps start a brand new game and see if it matches up correctly to the value it is when the other save states are active. Make a note of the value it is when the game is active. </p> <p>Let's say we are pretty confident we've found the memory used to say 'game is in demo mode'. We'll save this to CodeNotes by adding a description in the Memory Inspector, then clicking <code>Add Note</code>. </p> <p>Next we will use the <code>Achievements</code> dialog to find all the achievements that could unlock during the demos (probably all the level-based achievements), and add a new requirement to these achievements. Add it alongside the existing requirements. For this new requirement, set the address to the 'demo mode active' memory we found, set the mem size to 8-bit, and set the value we require to be equal to the value when the game is active.</p> <p>That's it! Now the achievement will only trigger if the player is on a certain level, AND that the game is not in a demo mode! </p> <p>Before we commit this back to the server, it's a good idea to test out this to see if it worked. Press ESC on the game to bring up the overlay and pause the game. Then click 'Reset Achieved Status' on this achievement in the 'Achievements' dialog, and confirm the prompt. Finally, click back in the game and press TAB to reset the game, and ESC to dismiss the overlay. Press F4 a few times to increase the speed of the game, and watch to ensure the achievement doesn't trigger. If it still triggers, it sounds like something went wrong. Try and check the requirements are entered correctly ('is demo mode' comparison probably needs to be '8-bit'), check that you reset the right achievement, and finally watch the value of the 'is demo mode' flag in the memory inspector. </p> <p>If it worked correctly, select the achievement in the Achievements dialog, hit 'Commit Selected', confirm the dialog and you're done!</p> <p>There are many alternative methods for getting the 'is demo mode' flag, but unfortunately none of them are guarantees. All I can do is suggest methods I've found in existing games. To start with, I'll suggest Castlevania: Bloodlines (Mega Drive), and the achievement Watery Grave (5). There is a mild cheat-protection in these requirements, but I'll just focus on the 'demo mode' part. Castlevania treats every screen as a type of 'screen mode'. To test for this, I started the game, and at the sega logo, I started an 8-bit test. I then assumed that the 'screen mode' would have changed by the time it was playing the 'intro movie', so I did a 'not equal', then an 'equal' filter to suggest that I only want candidates that have changed. I did this again at the 'press start' screen, then at the options screen, then the password screen, character select screen, and finally ingame. </p> <p>By this point I had 10 matches. I mentally eliminated anything where the surrounding values were very random - this data is likely to be graphic or sound data, and won't be much use for us. After having repeated the test and watching each of these 10 values, I also eliminated a few more, as some of these appeared to change while I was still on the same screen. This left me with three values, <code>0x9002</code>, <code>0x9004</code> and <code>0x905e</code>. After going into game and playing for a few seconds, I could tell that <code>0x905e</code> was changing while I was still ingame. I opted to use <code>0x9002</code>, as it was located fairly close to clean boundary (<code>0x9000</code>). Also values like this are likely to be in the second half of RAM (between <code>0x8000</code> and <code>0xffff</code>) as they are easier for developers to address. </p>"},{"location":"other/design/","title":"Achievement Design","text":"<p>This is a guide on how to think about and design good achievements. Not the technical side, but the conceptual.</p>"},{"location":"other/design/#progression-based-achievements","title":"Progression Based Achievements","text":"<p>There are 3 types of progression-based achievements: simple progression, story-based progression, and progression/collection achievements.</p>"},{"location":"other/design/#simple-progression","title":"Simple Progression","text":"<p>Progression-based achievements are usually simplest ones, especially if the game you are doing is nothing but linear stages. Or doesn't have much going on in the way of storylines. In this case, let's look at some GOOD and BAD examples of this:</p> <ul> <li>Good: Clear stage 1. </li> <li>Bad: Reach stage 2. </li> </ul> <p>It takes slightly more work to code an achievement where the player is required to clear the stage rather than simply reach the next one. But it is also much more satisfying for the player, and it is much more professional-looking. It is also less susceptible to problems with players loading save games or save states for freebie achievements en masse. </p> <ul> <li>Good: Complete the game. </li> <li>Bad: Start the game. </li> </ul> <p>While it is true progression-based achievements are often freebies, it is generally agreed upon here that an achievement to start the game is a bit too easy, and not at all memorable for the player. It's just a formality. The ending of the game, however, is often the most memorable part of a game for a player, and completing a game is definitely an achievement in itself. It's a good practice to make such achievement work like \"Beat last stage and beat the game\".</p> <ul> <li>Good: Cleared the ice theme stages, or Cleared the first five stages, or Cleared the first ten stages. </li> <li>Bad: Complete Stage 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11-200 (all separate achievements) </li> </ul> <p>One of the worst things you can do is create achievement spam. Puzzle games are notorious for these kinds of problems, because the stages are short and often, there are one-hundred of them or more. As a result, the main page feed ends up with a lot of micro-updates, which spams other folks' achievements down and off the front page quickly. The way to come off as more professional in this matter is to space out the achievements a bit more, into groups of stages. For instance, if stages 1-10 are all fire themed, and stages 11-20 are all outer-space themed, you can create achievements around these themes. Be creative. </p>"},{"location":"other/design/#story-based-progression","title":"Story Based Progression:","text":"<p>The most memorable moments in gaming history are often not related to item collection or sidequests, but to specific scenes relating to the story. </p> <p>Examples:</p> <ul> <li>First encounter with Pyramid Head in the Silent Hill series. </li> <li>Finding out the truth about Darth Revan in Knights of the Old Republic. </li> <li>Finding out what will happen in the future in Chrono Trigger. </li> <li>Launching the Cow in Earthworm Jim. </li> <li>Pretty much any character death. </li> </ul> <p>The thing you have to be extra-careful with here is spoilers. If you catch a progression-based achievement that has a spoiler in it, by all means contact the dev about it. And devs, please be receptive when it comes to constructive criticism! Also, the number and even percentage of these will vary from game to game--The dependence lies heavily upon how story-driven the game is. </p>"},{"location":"other/design/#progressioncollection","title":"Progression/Collection","text":"<p>Progression/Collection is a common hybrid. Not only are you collecting an item, but it also launches into a memorable (and mandatory) scene. </p> <p>Examples:</p> <ul> <li>Obtaining the Master Sword in Link to the Past, which lifts the curse in the Lost Woods. </li> <li>Finding the sword on the beach in Link's Awakening, which launches into the first scene where the wise owl speaks to you. </li> <li>Picking your starter Pokemon, which happens during a beginning scene, but is a 'rite of passage' for most gamers. </li> </ul> <p>Achievements in this hybrid category are often more satisfying because they are pulling double-duty. The player is not only obtaining an item, but watching a memorable scene and nabbing an achievement all at once. Quite the rush of endorphins! </p>"},{"location":"other/design/#progression-pros-and-cons","title":"Progression Pros and Cons","text":"<p>Progression Achievements are guaranteed to the player on a normal play-through. So why even have them? </p>"},{"location":"other/design/#pros","title":"Pros","text":"<ul> <li> <p>A player deserves points for playing through a game! They do! Remember, a lot of folks are playing through these games for the very first time, and most games are quite hard to beat. Why shouldn't we reward players for a good ol' normal play-through? </p> </li> <li> <p>Periodic progression awards go a long way to encourage players to complete a game. </p> </li> <li> <p>Some players are more casual and don't intend to do much more than beat games on this website. Not everyone feels the need to Master every game in Hardcore mode. Many are perfectly happy grabbing whatever convenient side-achievements they can during a normal play-through, and there's nothing wrong with that. </p> </li> <li> <p>Some scenes are so memorable, they deserve achievements all their own! People who grew up with these games and love them look for these scenes in achievement lists, and it might just warm their heart when they see it was acknowledged. </p> </li> <li> <p>Progression Achievements help other people on the website gauge how far along a player is in a game, a bit like Rich Presence. We can drop a line to the player and say, \"Good luck!\" because we know the next section is pretty tricky. It encourages the community to interact. </p> </li> <li> <p>Order matters! Progression Achievements can tell us a lot about a play-through just by the order they occurred. If you pop that optional boss achievement and saved up a million dollars AFTER you've already done all the sidequests, that's much less impressive than if you manage to pull it off well before the mid-point of the game. In other words, Progression Achievements allow us to show-off a bit! We can show the world that we can beat that final boss before we've reached level 10, or that we can beat Expert mode on our first go before Easy and Normal. It can even reveal if we've used glitches or cheats to skip certain portions of the game. So, as you can see, Progression Achievements have great SYNERGY with other kinds of achievements.</p> </li> <li> <p>These kinds of achievements are the easiest to code and are generally error-free. </p> </li> </ul>"},{"location":"other/design/#cons","title":"Cons","text":"<ul> <li> <p>Too many Progression Achievements can over-saturate a game with 'freebies', and that's a Very Bad Thing. </p> </li> <li> <p>If your entire game has nothing but these kinds of achievements, it's just another boring run through the game for players. Reach stage 2, Reach stage 3, Reach stage 4, Complete the Game. This is a great 'base' for you to start adding achievements from the other categories, but don't leave your list at just Progression Achievements if you can help it. Otherwise you're just rewarding players full points for going through the motions like they've done a million times before. </p> </li> </ul>"},{"location":"other/design/#sidequestoptional-achievements","title":"Sidequest/Optional Achievements","text":"<p>Vintage games, on their own, offer little-to-no incentive to beat a bonus mode, other than that it's something to do on a rainy day after you've beaten the game. Old games didn't have internet connectivity. And they had no social aspects other than 2-player mode, and maybe telling your friends at school that you beat something. But now, with RetroAchievements.org, we can display our vintage trophies (even though it requires us to redo what we've probably already done many years ago). These trophies are badges of honor. You can look at another member's Challenge Achievements and begin to understand how far they went, how skilled they are. Along with that comes respect from the other members. We socialize, we congratulate each other on a job well done. We feel like we belong, and we are in good company.</p>"},{"location":"other/design/#sidequests","title":"Sidequests","text":"<p>There are often things the player can do that are confined to the rules of the game, but aren't necessary to complete it. In other words, a challenge built into the game by the original game developers. Usually they are fun, or sometimes not so fun, but deserve an award because they require hard work and persistence to achieve. You have to walk a fine tightrope between if dedicated players are likely to do something, vs. if the goal is stupid. People will have differing views over this, so steel yourself.</p> <p>Often times, these types of achievements are even Easter Eggs or things the player never knew existed in their entire lives! Many players adore these types of achievements. I think it's because they learn something new about a game they grew up with, or feel like maybe they were the only ones who knew about a given secret and were excited to see it supported here. It's important for us developers to REALLY know a game inside-and-out before creating an achievement set.</p> <p>Examples of Sidequests:</p> <ul> <li>Delivering tails to the Tail Collector in Final Fantasy IV. </li> <li>Finding the owner of the Insignificant Item in Earthbound. </li> <li>Giving the Jerky to the King in Guardia Castle. </li> <li>Anju sidequest in Majora's Mask. </li> <li>Learning about Wrex's past in Mass Effect. </li> <li>Diplomat/VIP escort missions in Flashback: The Quest for Identity. </li> <li>Discovering a secret room. </li> </ul> <p>Sidequests are most often found in RPGs, but especially these days, sidequests are finding their way into just about every genre. Keep your eyes peeled - Even the unsuspecting platformer may have a sidequest or three. The Kirby series, for instance, has many hidden rooms and areas. Often times, sidequests end up awarding an item, which falls under a hybrid: Sidequest/Collection.</p>"},{"location":"other/design/#optional-achievements","title":"Optional Achievements","text":"<p>Examples of Optional Achievements:</p> <ul> <li>Optional bosses. </li> <li>Clearing a challenge dungeon (which is a hybrid of Sidequest). </li> <li>Completing Expert Mode (which is a hybrid of Progression). </li> <li>Completing a secret challenge level. </li> <li>Getting an exceptionally rare drop off of a monster. </li> <li>Clearing the game with an optional character. </li> <li>Getting a high score. </li> <li>Completing features only unlocked on a second playthrough. </li> <li>Game modes that are only unlocked on multiple playthroughs. </li> <li>Optional game endings. </li> <li>Codes you can enter during the title screen to make the game harder. </li> </ul> <p>This is the game makers hoping you'll like their game enough to keep coming back for more, even after those ending credits scroll by. They are trying to reward the player for completing their game, and create some form of satisfying re-playability. If the game makers went to the trouble making things like this an integral part of the game, we as achievement developers should recognize these challenges and create appropriate achievements for at least a few of them.</p> <p>Chrono Trigger, Chrono Cross, and Star Ocean: The Second Story are famous for this. The Game Boy Advance Castlevania entries also do this. In fact, many games do this. If you aren't sure if your game has any extra modes or challenges, be sure to do some research and check out some FAQs. Or ask the community here, many of us are experts on the games supported here. </p>"},{"location":"other/design/#sidequestoptional-pros-and-cons","title":"Sidequest/Optional Pros and Cons","text":"<p>Sidequest/Optional Achievements make fantastic supplements to Progression Achievements. </p>"},{"location":"other/design/#pros_1","title":"Pros","text":"<ul> <li> <p>This is the bread-and-butter of achievement making. Chances are, a good deal of your achievements will come from this category. All games have optional things to do. Collect all the coins in a stage! Gain 9 lives! Creating achievements for this stuff is easy, and it rewards the player for their dedication. </p> </li> <li> <p>Game makers love appreciative players. They like it when players bother to dig deeper into their games, appreciating their hard work, otherwise we wouldn't see hidden 'fun' things in games like Easter Eggs, bonus scenes, etc. If game makers reward the players for doing it, why shouldn't we? Us devs should also recognize that the player has gone the extra mile.</p> </li> <li> <p>Game players love telling their friends when they find something unusual and off the beaten path in a game. With this site, they can show their friends that they did indeed slay the elusive 'yellow frog' rarely seen in the marsh, or found the warp to the 'mystery dimension'. If we include these curiosities in our achievement lists, we show the players that we are 'in the know', which builds confidence that we can competently guide them through the game. </p> </li> <li> <p>Sidequest/Optional Achievements give players something to strive for after they've beaten the game.</p> </li> <li> <p>These kinds of achievements can often be earned at any time and are not on a predictable schedule. Players feel an extra rush of endorphins when an achievement pops that they weren't expecting, but it was earned. </p> </li> <li> <p>These kinds of achievements are usually easy to code, second only to progression-style achievements. </p> </li> </ul>"},{"location":"other/design/#cons_1","title":"Cons","text":"<ul> <li> <p>Some players don't care to explore beyond what a typical play-through has to offer, so a high percentage of these types of achievements in a game can leave a player under-rewarded. (Granted, this type of gamer is a bit of a rare bird on a website centered around achievements.) </p> </li> <li> <p>Some people may feel a specific challenge is too hard, even if it's something the original game developers included in-game for players to achieve. </p> </li> <li> <p>When you create a Sidequest/Optional Achievement for, say, running away from 999 battles (or other stat-maxing achievements), you risk that the people on this website may not feel this particular achievement offers a challenge and is just a 'grind-fest'. Achievements like this may very well end up getting demoted unless they serve a second purpose, like in Final Fantasy V where running away from battles actually powers up a weapon called the 'Chicken Knife'. This has SYNERGY with the game, as opposed to creating an achievement based upon raising a stat that has no other use.</p> </li> </ul>"},{"location":"other/design/#collection-based-achievements","title":"Collection Based Achievements","text":"<p>Most collection-based achievements are optional, unless the items themselves are MacGuffins, which in that case they would fall squarely under Progression/Collection.</p> <p>Examples:</p> <ul> <li>Finding the Mickey hats hidden in the background to obtain 1-ups in Genesis Aladdin. </li> <li>Finding exceptionally well-hidden items. </li> <li>Bestiaries. </li> <li>Unlocking an optional character. </li> <li>Maxing out Money/kills/stats. </li> <li>Finding all the different ways to die in games like Prince of Persia or Shadowgate. </li> <li>Opening every treasure chest in a game/finding every powerup. </li> <li>All items/Collecting 99 or 255 (etc.) of an item. </li> <li>Catching them all in Pokemon (any monster collection, really.) </li> </ul> <p>If the game keeps track of a stat, the game developer is practically daring you to max it out. Now you might be that kind of player, and you might not. You have to ask yourself, as a dev, whether or not other players are likely to get 9999 vampire bat kills, even if you wouldn't. The advantages to this are that people who wouldn't normally do this always have something to come back and work for when they feel like playing the game again. The disadvantage is that other players who wouldn't normally go that far and never would, but also feel like they have to MASTER every game quickly (a rare breed), will complain. If you get enough complaints, you might want to bring down that 9999 to something more reasonable, like 500. If no one's having fun with an achievement, it's not in the spirit of playing games or making achievements. </p> <p>You have to use your better judgment here and think of what the player would enjoy the most. As a rule of thumb, it's better to have a few Sidequest/Optional Achievements than none at all. But with a little extra effort, these achievements can make your list very memorable. </p> <p>Next, it's time to roll up our sleeves as devs and get REALLY creative when the devs themselves challenge the player beyond the rules of the game.</p>"},{"location":"other/design/#for-fun-achievements","title":"For-Fun achievements","text":"<p>This kind of achievements usually worths just a few points, but they are still fun</p> <p>Examples of For Fun:</p> <ul> <li>Letting the clock hit 99:59 in Valkyrie Profile. </li> <li>Interactive backgrounds, such as poking the hanging dead body in stage 1 of Castlevania: Bloodlines. </li> <li>Cooking the hamster in the microwave in Maniac Mansion. </li> <li>Watching the apocalypse in Majora's Mask. </li> <li>Finding John Romero in Doom 2. </li> </ul> <p>Sometimes, game makers add fun easter eggs. They went the extra mile to entertain the player with 'what if's'. Again, it is our job as devs to recognize and support these as much as we can.</p>"},{"location":"other/design/#challenges","title":"Challenges","text":"<p>One thing that you have to remember about retro gamers - and the games they play - is that most of us have played these games a million times before. This is the same old song and dance for most of us, and we often need motivation to do it again. Some of us can clear Contra without losing a single life. Well, now is our chance to prove it! </p> <p>I mean, think about it: Before this website, about the only way to prove you can do a flawless run of Contra was to invite a friend over, sit him down, and show him, or figure out recording software and make a YouTube video. But even then, a lot of those videos are doctored to look like flawless playthroughs. This site, however, has Hardcore mode, which help to indicate no one is cheating. </p> <p>You may have Progression Achievements and Sidequest/Optional Achievements, but if you want to create an achievement list that's truly great, you need at least a few Challenge Achievements. Try to think back to all the games you've played here at this website. What are some of the most memorable achievements? I can almost guarantee you that they were Challenge Achievements. There are exceptions to the rule, of course, but the typical player isn't going to fondly recall, 'Cleared Stage 2-6', or 'Reached Level 30'. They are more likely to fondly remember achievements that made their play-throughs a unique experience, such as...</p> <ul> <li>get through the entire game without ever picking up a powerup or coin</li> <li>defeat a boss without getting hit</li> <li>finish a stage without losing a life</li> </ul> <p>That is what makes this website so special, and what makes achievements something more than just beating a game. </p> <p>Even the most vocal critics who hate the idea of Achievements may say, \"Well, except for THIS one. This one was okay.\" And I guarantee you that ONE example they're talking about is a Challenge Achievement, something that challenged the player beyond the game itself. </p> <p>A good achievement developer will keep their eyes peeled, their wits about them, and their senses sharp when developing a game, looking for good, unusual challenges. They may notice something in the game that's a difficult feat.</p>"},{"location":"other/design/#speedrun-challenges","title":"Speedrun Challenges","text":"<p>Timers introduce an added pressure players may have never felt before while playing their favorite games. Few things get the heart pumping more than an imposing ticking clock. Add a timer element, and a game that was previously so easy they could beat it blindfolded could suddenly be transformed into the ultimate gaming challenge of their lives. </p> <p>Examples of Speedrun Challenges:</p> <ul> <li>Completing a game in under one hour. </li> <li>Clearing a specific stage in under three minutes. </li> <li>Undercut the timer by a certain number of seconds. </li> <li>Kill 30 vampire bats during the escape sequence. </li> <li>Collect 99 bonus coins before the bonus screen fades away. </li> <li>Go from point A to point B before day changes to night. </li> <li>Leaderboard - Complete the game with the fastest time possible. </li> <li>Leaderboard - Complete a given stage with the fastest time possible. </li> </ul> <p>A dev may want to head out to YouTube or Twitch and see how fast people are finishing a game (And please ignore TAS - \"Tool Assisted Speedruns\"). Some pro speed-runners are so fast, the typical player here won't stand a chance at the times being posted, but you should be able to find a happy medium. And if you can't figure out a good time to challenge the players here, that's what Leaderboards are for - Turn it into a competition! In fact, some of your favorite celebrity speed-runners may come to this very site and submit a time or two. </p> <p>You'll know when you're facing a pressure achievement when your palms are sweating and you find yourself nervously glancing at the timer. Like I said before, nothing screams, \"Wake up!\" louder than a timer, especially when developers start weaving this kind of achievement with OTHER kinds of achievements (and even leaderboards) during a timed portion of a game. Timer Challenges have an insane amount of synergy with other types of achievements. </p>"},{"location":"other/design/#limitation-challenges","title":"Limitation Challenges","text":"<p>Examples of Limitation Challenges:</p> <ul> <li>Clear a battle or even an entire game with all characters of a specific job class. (One famous example of this is clearing the original Final Fantasy with a group of White Mages.) </li> <li>Beat a final boss with no equipment on. </li> <li>Clear a stage without ever jumping. </li> <li>Solve a puzzle in only two moves. </li> <li>One-hit KOs. </li> <li>Low level games (LLGs). </li> <li>No hit achievements. </li> <li>Never hit certain button(s) during a challenge. </li> <li>Never lose invincibility through an entire Mario 3 stage by finding enough Starmen. </li> <li>Defeat a certain enemy without using a certain move. </li> <li>Reaching Ganon in Legend of Zelda, sword-less. </li> <li>Defeat a certain enemy ONLY using a certain move. </li> <li>Stumble your way through a maze while drunk/confused. </li> <li>Clear the game with a status ailment. </li> </ul> <p>Community websites built around certain games are a fantastic resource for these kinds of achievements They'll have a good idea about what's possible and impossible, and have likely written up FAQs discussing alternative and challenging ways to play the entire game. </p> <p>Often times, though, there will be no community. No FAQs. No Message Board. And maybe even no useful videos. In these cases, you'll need to be an idea person to come up with new and interesting ways to challenge the player. Be aware that these kinds of achievements take a lot of practice, time, and experience to create. </p> <p>The takeaway here is to BE CREATIVE! And remember to keep it FUN! </p>"},{"location":"other/design/#score-challenges","title":"Score Challenges","text":"<p>Examples of Score Challenges:</p> <ul> <li>Completing a game or level with the lowest possible score. </li> <li>Complete a minigame with a perfect score (not just topping the CPU leaderboard). </li> <li>Leaderboard - Complete the game with the highest score/most money/best kill count/etc. possible. </li> <li>Leaderboard - Complete a given stage with the highest score/most money/best kill count/etc. possible. </li> </ul>"},{"location":"other/design/#challenge-pros-and-cons","title":"Challenge Pros and Cons","text":"<p>Challenge Achievements are your chance to show players how to play their favorite games in different, unique, and even mind-bending ways. While these achievements can breathe life into an otherwise dull achievement set, you generally only want a small handful of these to be in your final list. </p>"},{"location":"other/design/#pros_2","title":"Pros","text":"<ul> <li> <p>Hardcore players love sinking their teeth into these kinds of achievements. </p> </li> <li> <p>If some players are too hardcore, you can find a happy medium by implementing Leaderboards, which satisfies both the casual achievement hunters and the hardcore players all at once. </p> </li> <li> <p>This is your chance to be very creative and come up with new challenges for players they never expected. This can be a pleasant surprise and really make your lists memorable. </p> </li> </ul>"},{"location":"other/design/#cons_2","title":"Cons","text":"<ul> <li> <p>These types of achievements require a fair amount of creativity to dream up, though there are many ways to research unusual ways to play games by watching things like speed runs. </p> </li> <li> <p>May require a deep research. </p> </li> <li> <p>These can be notoriously difficult to code. They require you to make a lot of code notes, make tons of game mechanic observations, and often times they require bug testing before they even work. In fact, you may not even be ready to tackle achievements like this until you've had a few games under your belt with a set of baseline achievements. Fortunately, Challenge Achievements can always be added later. </p> </li> </ul>"},{"location":"other/design/#external-resources","title":"External Resources","text":"<ul> <li>Best practices achievement creation guide written by Jeff Sullivan, Developer Account Manager of XNA Developer Connection (XDC) regarding XBox 360 Achievements.</li> <li>Make them Work for it an achievement design guide written by by Darran Jamieson on 1 Jan 2013.</li> <li>The Achievement Machine: Understanding Xbox 360 Achievements in Gaming Practices - by Mikael Jakobsson</li> </ul>"},{"location":"other/devdocs/","title":"Developer Docs","text":"<p>If you want to be an achievement developer, check here how to become a developer.</p> <p>Every Developer must know and adhere the Developer's Code of Conduct.</p> <p>Now a brief description some pages you'll see in this section.</p> <ol> <li> <p>How to Become an Achievement Developer: overview of the steps required in obtaining developer status</p> </li> <li> <p>Getting Started as an Achievement Developer: it's for the very first contact with cheevos development tools (Memory Inspector and other Achievements dialogs). IF YOU ARE A COMPLETE NEWBIE, START HERE!</p> </li> <li> <p>Achievement Scoring: a guide to deciding point totals for achievements</p> </li> <li> <p>Memory Inspector Overview: detailed look at one of an achievement developer's most used tools.</p> </li> <li> <p>Achievement Logic Features: describes the available tools a developer have in order to improve the logic behind the achievements, such as delta values, hit counts, ResetIf, PauseIf, Alt groups, etc.</p> </li> <li> <p>Real Examples: showing real examples and breaking down the logic behind them. AWESOME LEARNING RESOURCE!</p> </li> <li> <p>Achievement Templates: some generic templates to get inspiration.</p> </li> <li> <p>Tips and Tricks: general tips and tricks about memory digging and achievement creation.</p> </li> <li> <p>Difficulty Scale and Balance: guidelines/suggestions on how to balance the difficulty of your achievement set.</p> </li> <li> <p>Achievement Design: a guide on how to think about and design good achievements, not the technical side but the conceptual.</p> </li> <li> <p>Set Development Roadmap: suggestions of steps to take in order to create a really neat achievement set.</p> </li> <li> <p>Achievement Set Revisions: information on revisions, rescores, and the icon gauntlet.</p> </li> <li> <p>Subsets: an advanced topic on creating special challenge sets and how to release them.</p> </li> <li> <p>Badge and Icon Creation: some guidelines and tips about badge/icon creation.</p> </li> <li> <p>Leaderboards: instructions on how to create Leaderboards for a game.</p> </li> <li> <p>Rich Presence: how to write Rich Presence Scripts.</p> </li> <li> <p>Working with the Right ROM: information on using correct ROMs and hashes.</p> </li> <li> <p>Game Identification: details on the hashing methods used for each system.</p> </li> <li> <p>Emulator Support and Issues: details on both supported and unsupported cores, testing progress, etc.</p> </li> <li> <p>Achievements for ROM Hacks:  a detailed guide for developers on the proper inclusion (and approval) of ROM Hacks.</p> </li> <li> <p>Console Specific Tips: knowing the peculiarities of your favorite console can help you with memory digging.</p> </li> </ol>"},{"location":"other/examples/","title":"Real Examples","text":"<p>One of the best learning resource is looking at some real examples. In this section we will look deep into some achievements and break down the logic behind them.</p> <ul> <li>Using Hit Counts as a Timer</li> <li>Using Delta Values and Hit Counts to Detect an Increment</li> <li>Circumvent the Problem of a Counter Incrementing Twice in the Same Frame</li> <li>Creating a Timer with Reset If Hits based on the Speed of the Game</li> <li>Using Add Source and Deltas for Collectibles and Similar Achievements</li> </ul>"},{"location":"other/glossary/","title":"Glossary of Developer Terms","text":"<p>This page is for terms used around RetroAchievements. Some of these are technical terms encountered when developing a set, and others are slang and jargon among users and players, like \"set\" and \"cheevo\".</p> <p>This page is still a work-in-progress. Please add definitions and fix errors as you see fit.</p>"},{"location":"other/glossary/#16-bit","title":"16-bit","text":"<p>Processors that work on two byte word lengths. More bits usually mean more addressable memory for more complex games. Also used to describe the fourth generation of consoles, when 16-bit processors were common. A typical 16-bit processor includes the Motorola 68k series (Sega Genesis, Atari Jaguar (as one of its processors), early Macintosh).</p>"},{"location":"other/glossary/#32-bit","title":"32-bit","text":"<p>Processors that work on four byte word lengths. More bits usually mean more addressable memory for more complex games. Also used to describe the fifth generation of consoles, where 32-bit processors were common. Processors this complex tend to be custom designed; 32-bit consoles include the PlayStation and the Sega Saturn.</p>"},{"location":"other/glossary/#8-bit","title":"8-bit","text":"<p>Processors that work on one byte word lengths. Can also be used to describe the second or third generations of consoles, where 8-bit processors were common. Common 8-bit processors include the Z80 (many golden age arcade games, the Sega Master System and Game Gear, and the Game Boy) and the 6502 (Atari 2600, Apple II, NES).</p>"},{"location":"other/glossary/#achievement","title":"achievement","text":"<p>A defined challenge in a game that rewards an RA user with points and an achievement badge when completed.</p>"},{"location":"other/glossary/#achievement-id","title":"achievement ID","text":"<p>A unique number associated with an achievement. This can be seen in various places, most notably the end of the URL for the achievement page. The \"100% all goals, stats, and decks with Tony Hawk\" achievement for Tony Hawk's Pro Skater 3 on the PS2 has an achievement ID of 261676.</p>"},{"location":"other/glossary/#achievement-editor","title":"achievement editor","text":""},{"location":"other/glossary/#achievement-of-the-week-aotw","title":"Achievement of the Week (\"AOTW\")","text":"<p>A site event where a new achievement is selected weekly for an entire year, and users attempt to unlock ones for as many weeks as they can. Awards and a leaderboard for most unlocks are presented at the end of the year.</p>"},{"location":"other/glossary/#achievement-of-the-month-aotm","title":"Achievement of the Month (\"AOTM\")","text":"<p>An addition to the Achievement of the Week event, featuring larger achievements that are presented once a month instead of once a week. AOTM points count towards the final AOTW leaderboard.</p>"},{"location":"other/glossary/#achievement-page","title":"achievement page","text":"<p>A page on the site for a specific achievement, showing a list of people who have unlocked it, and a history of any tweaks in logic or status, and a wall for discussing the achievement.</p>"},{"location":"other/glossary/#achievement-processing-or-simply-processing","title":"achievement processing (or simply \"processing\")","text":""},{"location":"other/glossary/#achievement-sets","title":"achievement sets","text":"<p>A collection of achievements that pertain to a specific game. </p>"},{"location":"other/glossary/#addhits","title":"AddHits","text":""},{"location":"other/glossary/#address","title":"address","text":""},{"location":"other/glossary/#addsource","title":"AddSource","text":""},{"location":"other/glossary/#admin","title":"admin","text":""},{"location":"other/glossary/#alt-group","title":"alt group","text":""},{"location":"other/glossary/#api","title":"API","text":""},{"location":"other/glossary/#api-key","title":"API key","text":""},{"location":"other/glossary/#author","title":"author","text":"<p>The original developer who published an achievement.</p>"},{"location":"other/glossary/#badge","title":"badge","text":"<p>The image associated with an achievement. It's square and is 64x64 at full size.</p>"},{"location":"other/glossary/#binary","title":"binary","text":"<p>A way to notate numbers using entirely two states, on or off (colloquially 1's and 0's). While computers use binary, more commonly developers use hexadecimal to read the same information.</p>"},{"location":"other/glossary/#big-endian-be","title":"big endian (\"BE\")","text":"<p>A type of endianness where the most significant digit in a word is stored in memory first. In other words, big endian stores the word forwards, as you'd read it on its own. Big endian consoles include the Sega Genesis and the Neo Geo.</p>"},{"location":"other/glossary/#bit","title":"bit","text":"<p>The smallest discrete memory unit. Represented in binary. Rarely addressed directly on consoles.</p>"},{"location":"other/glossary/#bonus-set","title":"\"bonus\" set","text":"<p>A subset for a game featuring additional, more difficult or more esoteric challenges. </p>"},{"location":"other/glossary/#byte","title":"byte","text":"<p>A unit of memory with a length of eight bits. Often the smallest addressable unit of memory.</p>"},{"location":"other/glossary/#cancel-leaderboard","title":"cancel (leaderboard)","text":""},{"location":"other/glossary/#checksum","title":"checksum","text":""},{"location":"other/glossary/#cheevo","title":"cheevo","text":"<p>Colloquial shorthand for \"achievement\".</p>"},{"location":"other/glossary/#claim","title":"claim","text":"<p>When a developer declares their intent to work on a set for a game. Developers can only make a limited number of claims at a time. Unless it's a collaborative set, no other developer can work on that game while the claim is active.</p>"},{"location":"other/glossary/#code-note","title":"code note","text":"<p>A chunk of memory annotated with its purpose for use in achievement developing, a memory location \"bookmark\" of sorts. Each game has a freely-accessible page of code notes associated with it.</p>"},{"location":"other/glossary/#code-reviewer","title":"code reviewer","text":""},{"location":"other/glossary/#commit-selected","title":"commit selected","text":""},{"location":"other/glossary/#completion-trophy","title":"completion trophy","text":"<p>The award given to a user who has finished every achievement in a set in Softcore mode.</p>"},{"location":"other/glossary/#core-achievement","title":"core achievement","text":"<p>An achievement that's part of the main set for a game and is able to be unlocked by most players.</p>"},{"location":"other/glossary/#crc-32","title":"CRC-32","text":""},{"location":"other/glossary/#the-cutting-room-floor-tcrf","title":"The Cutting Room Floor (\"TCRF\")","text":"<p>A website dedicated to unused content in games. This can be disabled features, hidden assets, localization changes, or materials in prototypes or prerelease media that changed by the time of the final release.</p>"},{"location":"other/glossary/#demotion","title":"demotion","text":""},{"location":"other/glossary/#decimal-dec","title":"decimal (\"dec\")","text":"<p>A way to notate numbers, using only 0-9 for ten possible values. Prevalent in everyday use, though less so in computing.</p>"},{"location":"other/glossary/#developer-dev","title":"developer (\"dev\")","text":"<p>A user on RetroAchievements who digs into a game's behavior with the intent of creating achievements for it. Developers are also responsible for the upkeep of their sets, in case bugs are found.</p>"},{"location":"other/glossary/#developing-achievements","title":"developing achievements","text":"<p>A process of setting various checks on memory locations that fire when a player completes a task in a game. Achievement logic can be very complex and achievements are reviewed and tested rigorously before sets are released.</p>"},{"location":"other/glossary/#discord","title":"Discord","text":"<p>A chat platform commonly used by gaming communities, including RetroAchievements. Discord servers (or simply \"Discords\") often feature one or many text channels where users can post messages, images, and videos, and voice channels where users can stream video and audio.</p>"},{"location":"other/glossary/#dynamic-link-library-dll","title":"dynamic link library (\"DLL\")","text":"<p>A file type common on Windows computers for sharing code and resources between programs. DLLs are used in the standalone RetroAchievements emulators for all the site-specific functionality, like logging in and listening for achievement logic.</p>"},{"location":"other/glossary/#dynamic-memory","title":"dynamic memory","text":""},{"location":"other/glossary/#endianness","title":"endianness","text":"<p>The order in which a series of bytes are stored in memory. Generally comes in two flavors, little endian and big endian. See those entries elsewhere in this document.</p>"},{"location":"other/glossary/#event-set","title":"\"event\" set","text":""},{"location":"other/glossary/#flag-achievement-field","title":"flag (achievement field)","text":""},{"location":"other/glossary/#flag-memory","title":"flag (memory)","text":""},{"location":"other/glossary/#forum","title":"forum","text":"<p>RetroAchievements has a forum that facilitates development of sets and communication between users and admins, as well as general banter.</p>"},{"location":"other/glossary/#game-icon","title":"game icon","text":""},{"location":"other/glossary/#game-entry-or-simply-entry","title":"game entry (or simply \"entry\")","text":""},{"location":"other/glossary/#game-id","title":"game ID","text":"<p>A unique number associated with a game. This can be seen in various places, most notably the end of the URL for the game page. Vib-Ribbon for the PlayStation has a game ID of 8953.</p>"},{"location":"other/glossary/#game-page","title":"game page","text":"<p>A page on the site for a specific game, listing the achievements for it, completion percentages, users who have mastered the game, leaderboards, and a wall for discussing the game and set, among other things.</p>"},{"location":"other/glossary/#github","title":"GitHub","text":"<p>A website for publishing repositories of code for programs and websites. RetroAchievements uses GitHub to maintain its emulator projects, the website, and the site documentation.</p>"},{"location":"other/glossary/#global-leaderboard","title":"global leaderboard","text":"<p>The ranking of all players on the site based on the number of Hardcore and Softcore points they have.</p>"},{"location":"other/glossary/#hack-set","title":"\"hack\" set","text":"<p>A set developed for a ROM hack of a game.</p>"},{"location":"other/glossary/#hardcore-mode","title":"Hardcore mode","text":"<p>A setting in RA-equipped emulators that disables save states and speed controls, effectively forcing the player to play like they would on the real console. When a player unlocks an achievement in Hardcore, they get double the points for it, and mastery trophies are awarded for unlocking all achievements in that set in Hardcore.</p>"},{"location":"other/glossary/#hash","title":"hash","text":"<p>A string of data used to identify a specific version of a game. Hashes are used to ensure all players are using the same version, as differently-localized or earlier/later editions of a game can have differing memory locations that break achievement sets. For some consoles, the entire game image is hashed; for others, only a chunk of the image is hashed.</p>"},{"location":"other/glossary/#hash-links-log","title":"#hash-links-log","text":""},{"location":"other/glossary/#hexadecimal-hex","title":"hexadecimal (\"hex\")","text":"<p>A way to notate numbers using 0-9 and the letters A-F, providing 16 possible values. Universal in computing thanks to its compactness and 16 being a power of two (decimal notation only has 10 possible values, 10 not being a power of two).</p>"},{"location":"other/glossary/#hits","title":"hits","text":""},{"location":"other/glossary/#homebrew","title":"homebrew","text":"<p>Games and software developed for a console by hobbyists, as opposed to traditional game companies. Homebrew games tend to be adaptations of games for other platforms, though original homebrew certainly exists.</p>"},{"location":"other/glossary/#homebrew-set","title":"\"homebrew\" set","text":""},{"location":"other/glossary/#issue","title":"issue","text":""},{"location":"other/glossary/#junior-developer","title":"junior developer","text":"<p>A new developer with certain extra restrictions on their account, like the number of games they can claim at once.</p>"},{"location":"other/glossary/#json","title":"JSON","text":""},{"location":"other/glossary/#leaderboard","title":"leaderboard","text":"<p>A ranking of players based on their scores, times, or another count (like the Tarzan leaderboard on Pitfall!, for the most vine swings without changing direction) on a game or on a particular stage of a game. Set developers have the option of creating as many leaderboards as they want for their game.</p>"},{"location":"other/glossary/#little-endian-le","title":"little endian (\"LE\")","text":"<p>A type of endianness where the least significant digit in a word is stored in memory first. In other words, little endian stores the word backwards from how you'd read it on its own. Little endian consoles include the NES and the PlayStation.</p>"},{"location":"other/glossary/#local-achievements","title":"local achievements","text":"<p>Achievements that only exist on the developer's computer and have not been pushed to unofficial or core achievement status.</p>"},{"location":"other/glossary/#localization","title":"localization","text":"<p>The act of translating a game from one language to another. Localization is common as many games originate in Japan, and are played in Western countries where Japanese isn't often spoken.</p>"},{"location":"other/glossary/#logic-comparison-or-simply-comparison","title":"logic comparison (or simply \"comparison\")","text":""},{"location":"other/glossary/#lower4","title":"lower4","text":""},{"location":"other/glossary/#md5","title":"MD5","text":"<p>A hashing algorithm. RetroAchievements uses this on its game hashes.</p>"},{"location":"other/glossary/#mastery-trophy","title":"mastery trophy","text":"<p>The award given to a user who has finished every achievement in a set in Hardcore mode.</p>"},{"location":"other/glossary/#memory","title":"memory","text":"<p>Usually refers to RAM, an address space that can be written to by the software at will and gets erased when the console is powered off. Most achievement development works by checking values in memory.</p>"},{"location":"other/glossary/#memory-achievement-editor","title":"memory (achievement editor)","text":""},{"location":"other/glossary/#memory-bookmarker","title":"memory bookmarker","text":""},{"location":"other/glossary/#memory-inspector","title":"memory inspector","text":""},{"location":"other/glossary/#memval","title":"mem/val","text":""},{"location":"other/glossary/#multi-set","title":"\"multi\" set","text":""},{"location":"other/glossary/#pauseif","title":"PauseIf","text":""},{"location":"other/glossary/#pointers","title":"pointers","text":""},{"location":"other/glossary/#points","title":"points","text":""},{"location":"other/glossary/#prototype-set","title":"\"prototype\" set","text":"<p>A set for a game that was never finished or published, or theoretically, a set for a prototype of a game that's massively different from its final version, enough to make another set not redundant.</p>"},{"location":"other/glossary/#promote-to-core","title":"promote to core","text":"<p>Making an achievement an official part of a set after development so players can attempt it.</p>"},{"location":"other/glossary/#retroachievements-ra","title":"RetroAchievements (\"RA\")","text":"<p>A site for creating and unlocking achievements in older games, generally the mid-2000s and before. Players are ranked based on the number of points they accumulate for unlocking achievements.</p>"},{"location":"other/glossary/#radocs","title":"RADocs","text":"<p>A set of documentation and instructions associated with the RetroAchievements platform.</p>"},{"location":"other/glossary/#raemus","title":"RAEmus","text":"<p>Short for \"RetroAchievements emulators\", or standalone emulators equipped with RA functionality. This generally only applies to emulators that have been unofficially forked to add RA functionality, and not to all-in-one emulation frontends like RetroArch or BizHawk, or emulators where RA support is official like DuckStation and PCSX2.</p>"},{"location":"other/glossary/#requirement","title":"requirement","text":""},{"location":"other/glossary/#resetif","title":"ResetIf","text":"<p>flag</p>"},{"location":"other/glossary/#reservation","title":"reservation","text":""},{"location":"other/glossary/#retro-ratio","title":"retro ratio","text":"<p>A metric to gauge the relative difficulty of the achievements a player has unlocked. A higher retro ratio means the player has unlocked more uncommon (and presumably difficult) achievements. As of yet, the retro ratio is still not well-defined.</p>"},{"location":"other/glossary/#retroarch","title":"RetroArch","text":"<p>An all-in-one emulator frontend for the Libretro project. RetroArch users install cores that each emulate a specific piece of hardware, allowing for the one program to run games from many systems. Has been ported to many, many consoles and operating systems. RetroArch is one of the main ways of playing RetroAchievements sets, due to many of the cores implementing RA functionality.</p>"},{"location":"other/glossary/#revision","title":"revision","text":"<p>When a set is updated after its initial release to add, remove, or edit achievements, or to update point values.</p>"},{"location":"other/glossary/#revision-voting","title":"revision voting","text":""},{"location":"other/glossary/#rich-presence-script-rps","title":"rich presence script (\"RPS\")","text":"<p>A script that gives detailed information on-site about where a player is in a game, what items they've collected, who they're playing as, and other such data that updates while the player is playing.</p>"},{"location":"other/glossary/#random-number-generator-rng","title":"random number generator (\"RNG\")","text":"<p>Code that generates a seemingly random number, used to make gameplay less predictable and more interesting (though occasionally more frustrating as well). RNG is very rarely truly random, usually taking a number like the game clock and using it as a \"seed\". Poorly implemented seeds can have their \"randomness\" manipulated by players who know how to.</p>"},{"location":"other/glossary/#read-only-memory-rom","title":"read-only memory (\"ROM\")","text":"<p>Refers to an address space that can't be written to. This is usually where the game instructions and assets are stored. \"ROM\" also refers to a copy of the information on a game's ROM chips stored in a file, usually called an \"image\", for play on emulators or for use in hacking or datamining.</p>"},{"location":"other/glossary/#rom-hack-or-simply-hack","title":"ROM hack (or simply \"hack\")","text":"<p>A fanmade modification of a game to add new content and features, often totally converting the game in the process. Usually applies to simpler games that were stored on ROM cartridges; more complex and newer games are simply \"modded\" instead.</p>"},{"location":"other/glossary/#romhackingnet","title":"romhacking.net","text":"<p>A website that hosts guides and utilities for ROM hacking and game modding, as well as the ROM hacks themselves.</p>"},{"location":"other/glossary/#set","title":"set","text":"<p>A group of achievements associated with a game. Sets are usually developed and maintained by one or two people each who inspect the game's memory, define achievements and what points they're worth, and respond to tickets on achievements not working as intended. Completing all achievements in a set awards a trophy, depending on if the achievements were unlocked in Hardcore or Softcore mode.</p>"},{"location":"other/glossary/#set-cap","title":"set cap","text":"<p>The former limit on how many points are allowed in a set of achievements. This used to be 400, but there is currently no cap on points in sets.</p>"},{"location":"other/glossary/#size-achievement-editor","title":"size (achievement editor)","text":""},{"location":"other/glossary/#softcore-mode","title":"Softcore mode","text":"<p>Playing with Hardcore mode disabled, allowing for save states and speed controls. Softcore does not give the player double points for unlocking achievements like Hardcore does, and does not award mastery trophies (instead awarding completion trophies).</p>"},{"location":"other/glossary/#stage-id","title":"stage ID","text":""},{"location":"other/glossary/#start-leaderboard","title":"start (leaderboard)","text":"<p>To begin a run that's eligible for leaderboard ranking. A run will fail if it's not completed correctly (player death, restart, pause, or other developer-definable criteria).</p>"},{"location":"other/glossary/#static-memory","title":"static memory","text":""},{"location":"other/glossary/#submit-leaderboard","title":"submit (leaderboard)","text":"<p>To have a score or a time ranked on one of the leaderboards.</p>"},{"location":"other/glossary/#subsource","title":"SubSource","text":""},{"location":"other/glossary/#ticket","title":"ticket","text":""},{"location":"other/glossary/#ticket-manager","title":"ticket manager","text":""},{"location":"other/glossary/#trigger","title":"trigger","text":""},{"location":"other/glossary/#trophy","title":"trophy","text":"<p>An award given to a player for completing a set or participating in a site event.</p>"},{"location":"other/glossary/#type-memdeltavalue","title":"type (mem/delta/value)","text":""},{"location":"other/glossary/#unofficial-achievement","title":"unofficial achievement","text":"<p>An achievement published on-site, but not part of the main set. This usually needs additional testing before it can become a core achievement.</p>"},{"location":"other/glossary/#unlicensed-set","title":"\"unlicensed\" set","text":""},{"location":"other/glossary/#unlock-in-reference-to-achievements-also-called-earning-achievements","title":"unlock (in reference to achievements, also called \"earning\" achievements)","text":"<p>Completing the steps needed to make an achievement fire. The achievement is then displayed on the user's page and elsewhere and they earn the points for having done so.</p>"},{"location":"other/glossary/#upper4","title":"upper4","text":""},{"location":"other/glossary/#user-motto","title":"user motto","text":"<p>A short, user-definable snippet of text on a user page. This is usually silly and in-jokey.</p>"},{"location":"other/glossary/#user-page","title":"user page","text":"<p>The profile associated with a user on-site. This contains their account status (registered/junior developer/developer/moderator/etc), points accrued, completion percentage, trophies, the last five games the user was seen playing, and a wall for others to leave comments on, among other widgets.</p>"},{"location":"other/glossary/#value","title":"value","text":""},{"location":"other/glossary/#value-field-leaderboardrps","title":"value field (leaderboard/rps)","text":""},{"location":"other/id/","title":"Game Identification","text":"<p>This page details the hashing method used for each supported system.</p>"},{"location":"other/id/#the-3do-company","title":"The 3DO Company","text":"<ul> <li>3DO Interactive Multiplayer uses a custom hash.</li> <li>The volume header (first 132 bytes of sector 0) and the contents of the LaunchMe file are hashed.</li> </ul>"},{"location":"other/id/#amstrad","title":"Amstrad","text":"<ul> <li>Amstrad CPC uses the MD5 checksums of each disk.</li> <li>As saving and other manipulations can mutate disk data, local copies of loaded images are required to ensure that their hashes do not change across sessions.</li> </ul>"},{"location":"other/id/#apple","title":"Apple","text":"<ul> <li>Apple II uses the MD5 checksums of each disk.</li> <li>As saving and other manipulations can mutate disk data, local copies of loaded images are required to ensure that their hashes do not change across sessions.</li> </ul>"},{"location":"other/id/#arcade","title":"Arcade","text":"<ul> <li>Arcade uses a custom hash.</li> <li>The filename string without the extension (<code>path/galaga.zip</code> -&gt; <code>galaga</code>) is hashed. It is case-sensitive.</li> </ul>"},{"location":"other/id/#arduboy-inc","title":"Arduboy Inc.","text":"<ul> <li>Arduboy uses a custom hash.</li> <li>Arudboy .hex files contain ASCII text. We normalize to Unix line endings, then perform a full file hash.</li> </ul>"},{"location":"other/id/#atari","title":"Atari","text":"<ul> <li> <p>Atari 2600 uses the MD5 checksum.</p> </li> <li> <p>Atari 7800 uses the MD5 checksum unless the ROM has a header.</p> </li> <li> <p>If the ROM starts with <code>\\1ATARI7800</code>, the first 128 bytes are ignored and the remaining file contents are hashed. If the ROM does not start with <code>\\1ATARI7800</code>, the entire file is hashed.</p> </li> <li> <p>Atari Jaguar uses the MD5 checksum.</p> </li> <li> <p>Atari Jaguar CD uses a custom hash.</p> </li> <li>A header block is located within the first sector of the disc. This block indicates the location and size of the boot code, which is loaded and hashed.</li> <li> <p>If the resulting hash is <code>254487b59ab21bc005338e85cbf9fd2f</code>, it's a common bootloader for homebrew games and the actual game code is located in track 2. If a separate header block containing a new location and size is found in track 2, then that data is loaded and hashed.</p> </li> <li> <p>Atari Lynx uses the MD5 checksum unless the ROM has a header.</p> </li> <li>If the ROM starts with <code>LYNX\\0</code>, the first 64 bytes are ignored and the remaining file contents are hashed. If the ROM does not start with <code>LYNX\\0</code>, the entire file is hashed.</li> </ul>"},{"location":"other/id/#bandai","title":"Bandai","text":"<ul> <li> <p>WonderSwan uses the MD5 checksum.</p> </li> <li> <p>WonderSwan Color uses the MD5 checksum.</p> </li> </ul>"},{"location":"other/id/#coleco","title":"Coleco","text":"<ul> <li>ColecoVision uses the MD5 checksum.</li> </ul>"},{"location":"other/id/#fairchild","title":"Fairchild","text":"<ul> <li>Channel F uses the MD5 checksum.</li> </ul>"},{"location":"other/id/#gce","title":"GCE","text":"<ul> <li>Vectrex uses the MD5 checksum.</li> </ul>"},{"location":"other/id/#magnavox","title":"Magnavox","text":"<ul> <li>Odyssey2 uses the MD5 checksum.</li> </ul>"},{"location":"other/id/#mattell","title":"Mattell","text":"<ul> <li>Intellivision uses the MD5 checksum.</li> </ul>"},{"location":"other/id/#microsoft","title":"Microsoft","text":"<ul> <li>MSX / MSX2 uses the MD5 checksums of each disk.</li> <li>As saving mutates disk data, local copies of loaded images are required to ensure that their hashes do not change across sessions. We do not believe this is working, but have yet to find a game where saving to disk actually works.</li> </ul>"},{"location":"other/id/#nec","title":"NEC","text":"<ul> <li>PC-8001/PC-8801 uses the MD5 checksums of each disk.</li> <li> <p>As saving and other manipulations can mutate disk data, local copies of loaded images are required to ensure that their hashes do not change across sessions.</p> </li> <li> <p>PC Engine / TurboGrafx 16 / SuperGrafx use the MD5 checksum unless the ROM has a header.</p> </li> <li> <p>If the size of the file is 512 bytes more than a multiple of 128KB, the first 512 bytes are ignored and the remaining file contents are hashed. If the size of the file is not 512 bytes more than a multiple of 128KB, the entire file is hashed.</p> </li> <li> <p>PC Engine CD / TurboGrafx-CD - uses a custom hash. The boot code and disc title are hashed as follows:</p> </li> <li>Read 128 bytes from sector 1 of the data track (PCE predates ISO-9660, so there's no file system to read).</li> <li>If <code>\"PC Engine CD-ROM SYSTEM\"</code> does not exist at 32 bytes into the data, discard as invalid.</li> <li>Copy the last 22 bytes of the data into a buffer. This is the disc title, and usually identifies the game.</li> <li>The first three bytes of the data are a little-endian sector index for the boot code.</li> <li>The fourth byte is the number of sectors that the boot code occupies.</li> <li>The boot code is appended to the buffer (N sectors, starting at sector X)</li> <li> <p>The buffer is hashed.</p> </li> <li> <p>PC-FX uses a custom hash. The boot code and disc title are hashed as follows:</p> </li> <li>Read 32 bytes from sector 0 of the data track (PC-FX predates ISO-9660, so there's no file system to read).</li> <li>If <code>\"PC-FX:Hu_CD-ROM\"</code> was not read, discard as invalid.</li> <li>Read 128 bytes from sector 1 of the data track into a buffer. This is the volume header and includes the disc title.</li> <li>The 32-bit value at 32-bytes into the buffer is the first sector of the boot code.</li> <li>The 32-bit value at 36-bytes into the buffer is the number of sectors that the boot code occupies.</li> <li>The boot code is appended to the buffer (N sectors, starting at sector X)</li> <li>The buffer is hashed.</li> </ul>"},{"location":"other/id/#nintendo","title":"Nintendo","text":"<ul> <li>Famicom Disk System uses the MD5 checksum unless the file has a header.</li> <li>If the ROM starts with <code>FDS\\1a</code>, the first 16 bytes are ignored and the remaining file contents are hashed. </li> <li>If the ROM does not start with <code>FDS\\1a</code>, the entire file is hashed. </li> <li> <p>As saving mutates disk data, local copies of loaded images are required to ensure that their hashes do not change across sessions.</p> </li> <li> <p>Game Boy uses the MD5 checksum.</p> </li> <li> <p>Game Boy Advance uses the MD5 checksum.</p> </li> <li> <p>Game Boy Color uses the MD5 checksum.</p> </li> <li> <p>GameCube uses a custom hash. Initially loaded program code is hashed as follows:</p> </li> <li>The Apploader is loaded and added to a buffer.</li> <li>Each DOL segment (code and data) referenced in the Apploader is loaded and added to the buffer.</li> <li> <p>The buffer is hashed.</p> </li> <li> <p>Nintendo 64 uses the MD5 checksum for Big Endian (<code>.z64</code>) ROMs.</p> </li> <li> <p>ByteSwapped (<code>.v64</code>) and Little Endian (<code>.n64</code>) use the MD5 checksum for its Big Endian counterpart.</p> </li> <li> <p>Nintendo DS uses a custom hash.</p> </li> <li>A NDS ROM has a 0x160 byte header. In this header are pointers to icon/title information and to the boot code for both processors. The hash method combines the header, the two pieces of boot code, and the icon/title information and hashes the result.</li> <li>The icon/title information is 0xA00 bytes starting at the address stored in the header at $68</li> <li>The arm9 code address is stored at $20 in the header, and the size is stored at $2C in the header</li> <li> <p>The arm7 code address is stored at $30 in the header, and the size is stored at $3C in the header</p> </li> <li> <p>Nintendo Entertainment System / Famicom uses a custom hash.</p> </li> <li>If the ROM starts with <code>NES\\1a</code>, the first 16 bytes are ignored and the remaining file contents are hashed.</li> <li> <p>If the ROM does not start with <code>NES\\1a</code>, the entire file is hashed.</p> </li> <li> <p>Pokemon Mini uses the MD5 checksum.</p> </li> <li> <p>Super Nintendo Entertainment System / Super Famicom / Satellaview / Sufami Turbo use the MD5 unless the ROM has a header.</p> </li> <li>If the size of the file is 512 bytes more than a multiple of 8KB, the first 512 bytes are ignored and the remaining file contents are hashed. </li> <li> <p>If the size of the file is not 512 bytes more than a multiple of 8KB, the entire file is hashed.</p> </li> <li> <p>Virtual Boy uses the MD5 checksum.</p> </li> </ul>"},{"location":"other/id/#snk","title":"SNK","text":"<ul> <li>Neo Geo CD uses a custom hash. Initially loaded program code is hashed as follows:</li> <li>The <code>IPL.TXT</code> file is loaded and parsed.</li> <li>Each line of the file is data to load. PRG files are executable code. Each PRG file is loaded and added to the buffer.</li> <li> <p>The buffer is hashed.</p> </li> <li> <p>Neo Geo Pocket uses the MD5 checksum.</p> </li> <li> <p>Neo Geo Pocket Color uses the MD5 checksum.</p> </li> </ul>"},{"location":"other/id/#sega","title":"Sega","text":"<ul> <li> <p>32X uses the MD5 checksum.</p> </li> <li> <p>Dreamcast uses a custom hash. The disc metadata and primary executable are hashed as follows:</p> </li> <li>The first 512 bytes of sector 0 are appended to the buffer. This contains the volume header and ROM header. The first 16 bytes must be <code>\"SEGA SEGAKATANA \"</code>. If not, discard as invalid.</li> <li>The contents of the primary executable (as identified by the volume header) are appended to the buffer.</li> <li> <p>The buffer is hashed.</p> </li> <li> <p>Game Gear uses the MD5 checksum.</p> </li> <li> <p>Master System uses the MD5 checksum.</p> </li> <li> <p>Mega Drive / Genesis uses the MD5 checksum.</p> </li> <li> <p>SG-1000 uses the MD5 checksum.</p> </li> <li> <p>Saturn uses a custom hash.</p> </li> <li>The first 512 bytes of track 0 are hashed. This contains the volume header and ROM header. The first 16 bytes must be <code>\"SEGADISCSYSTEM  \"</code> for Sega CD or <code>\"SEGA SEGASATURN \"</code> for Sega Saturn. If not, discard as invalid.</li> <li> <p>Immediately following those 512 bytes are an arbitrary amount of code that validates the region and loads the primary executable. Without processing the code, we cannot determine what additional file(s) to hash, so this was determined to be sufficient as an alternative to hashing the entire CD.</p> </li> <li> <p>Sega CD uses a custom hash.</p> </li> <li>The first 512 bytes of track 0 are hashed. This contains the volume header and ROM header. The first 16 bytes must be <code>\"SEGADISCSYSTEM  \"</code> for Sega CD or <code>\"SEGA SEGASATURN \"</code> for Sega Saturn. If not, discard as invalid.</li> <li>Immediately following those 512 bytes are an arbitrary amount of code that validates the region and loads the primary executable. Without processing the code, we cannot determine what additional file(s) to hash, so this was determined to be sufficient as an alternative to hashing the entire CD.</li> </ul>"},{"location":"other/id/#sony","title":"Sony","text":"<ul> <li>PlayStation uses a custom hash. The primary executable and its name are hashed as follows:</li> <li>The <code>SYSTEM.CNF</code> file is loaded and parsed. The primary executable is identified by the BOOT= line within.</li> <li>The primary executable name (and its path) are extracted from <code>SYSTEM.CNF</code> and written to a buffer.</li> <li>The contents of the primary executable are appended to the buffer.</li> <li> <p>The buffer is hashed.</p> </li> <li> <p>PlayStation 2 uses a custom hash. The primary executable and its name are hashed as follows:</p> </li> <li>The <code>SYSTEM.CNF</code> file is loaded and parsed. The primary executable is identified by the BOOT2= line within.</li> <li>The primary executable name (and its path) are extracted from <code>SYSTEM.CNF</code> and written to a buffer.</li> <li>The contents of the primary executable are appended to the buffer.</li> <li> <p>The buffer is hashed.</p> </li> <li> <p>PlayStation Portable uses a custom hash. The disc metadata and primary executable are hashed as follows:</p> </li> <li>The contents of the <code>PSP_GAME\\PARAMS.SFO</code> file are written to a buffer. This contains the game attributes displayed in the menu, including the name and serial.</li> <li>The contents of the primary executable (<code>PSP_GAME\\SYSDIR\\EBOOT.BIN</code>) are appended to the buffer.</li> <li>The buffer is hashed.</li> </ul>"},{"location":"other/id/#wasm-4","title":"WASM-4","text":"<ul> <li>WASM-4 uses the MD5 checksum.</li> </ul>"},{"location":"other/id/#watara","title":"Watara","text":"<ul> <li>Supervision uses the MD5 checksum.</li> </ul>"},{"location":"other/id/#wellback","title":"Wellback","text":"<ul> <li>Mega Duck uses the MD5 checksum.</li> </ul>"},{"location":"other/logic/","title":"Logic Features","text":"<p>There are several tools and options available to a developer. Knowing how to properly utilize them will improve the quality of your sets. These tools/options can be used in the Achievement Editor:</p> <p></p> <p>For more help regarding these, our Discord server is always open for assistance.</p> <p>Here is the list of features available:</p> <ul> <li> <p>Hit Counts</p> </li> <li> <p>Delta Values</p> </li> <li> <p><code>ResetIf</code> Flag</p> <ul> <li><code>ResetIf</code> with hit counts</li> </ul> </li> <li> <p><code>PauseIf</code> Flag</p> <ul> <li><code>PauseIf</code> with hit counts</li> </ul> </li> <li> <p><code>AddSource</code> Flag</p> </li> <li> <p><code>SubSource</code> Flag</p> <ul> <li>Checking for a negative result</li> </ul> </li> <li> <p><code>AddHits</code> and <code>SubHits</code> Flag</p> </li> <li> <p>Combining Flags</p> </li> <li> <p>Alt Groups</p> </li> <li> <p>Minimum Required Versions for Logic Features</p> </li> </ul>"},{"location":"other/meminsp/","title":"Memory Inspector Overview","text":"<p>Here is an overview of the Memory Inspector and its features. This tool can be found on \"RetroAchievements\" menu on any emulator integrated with RA.</p> <p>See also: Memory Digging Tips.</p> <ul> <li>Memory Inspector Dialog</li> <li>1. New Search</li> <li>2. Filter</li> <li>3. Results</li> <li>4. Code Notes</li> <li>5. Memory View</li> <li>Memory Bookmarks</li> <li>Reading Data in the Memory Viewer</li> <li>Decimal, Binary, and Hexadecimal Notations</li> <li>Memory Viewer Modes<ul> <li>8-Bit Mode</li> <li>16 and 32-Bit Mode</li> </ul> </li> <li>Working with Sizes Smaller Than 8-Bit<ul> <li>Single Bits</li> <li>Upper4 and Lower4</li> </ul> </li> <li>Memory Sizes Diagram</li> </ul>"},{"location":"other/meminsp/#memory-inspector-dialog","title":"Memory Inspector Dialog","text":""},{"location":"other/meminsp/#1-new-search","title":"1. New Search","text":"<p>This is the first thing you must do when you're looking for something in memory. </p> <p>The first drop down allows you to quick select All memory, System RAM, or Cartridge RAM. The field below the first drop down lets you type in a custom range (i.e. 0x10000-0x100FF).</p> <p>The second drop down specifies the size of the data you're interested in finding.</p> <p>The <code>Reset</code> button clears out any previously captured results (part 3 of the dialog) and captures the current memory state.</p>"},{"location":"other/meminsp/#2-filter","title":"2. Filter","text":"<p>Filters the memory state in an attempt to locate a specific memory address.</p> <p>The first drop down allows you to specify the comparison to use. The second drop down is what you're comparing against. Most of the time you're going to be filtering on <code>!= Last Value</code>, which eliminates any results where the memory has not changed.</p> <p>The available comparisons are:</p> <ul> <li><code>Constant</code> - comparison is made against the value entered in the field below the drop down.</li> <li><code>Last Value</code> - comparison is made against the value captured by the last applied filter, or the initial value if no filter has been applied</li> <li><code>Last Value Plus</code> - comparison is made against the Last Value plus the value entered in the field below the drop down. If the value were 3, the comparison would me made against a number which is three higher than the Last Value for each value captured by the last applied filter.</li> <li><code>Last Value Minus</code> - the same as Last Value Plus, except the value entered in the field below the drop down is subtracted from each value captured by the last applied filter.</li> <li><code>Initial Value</code> - comparison is made against the value captured when the New Search was begun.</li> </ul> <p>The <code>Filter Once</code> button immediately applies the selected filter and updates the Results.</p> <p>The <code>Continuous Filter</code> button applies the selected filter repeatedly until stopped. The fewer the results, the more frequently the filter is applied. The filter is only applied once every N ms, where N is the number of results / 1000. If there are less than 1000 results, it's applied every frame. If there are 50000 results, it's applied every 500ms (twice a second). If there are 1000000 results, it's only applied every 10 seconds.</p>"},{"location":"other/meminsp/#3-results","title":"3. Results","text":"<p>As filtering is applied, the list of potential matches will appear here.</p> <p>On the left side is information about the results, including the number of matches, the filter applied, and how many filters have been applied. If you believe you have applied a filter incorrectly, or the filter results in no matches, you can use the <code>&lt;&lt;</code> button to return to the previous set of results. You can do this all the way back to the initial results. Similarly, you can use the <code>&gt;&gt;</code> button to return to results you have backed out of. Once you apply a new filter, the forward filters are discarded and the <code>&gt;&gt;</code> button is disabled.</p> <p>Below the result information are two buttons. The first allows you to manually remove the selected items from the result set. You can use Ctrl and Shift to select multiple items. The second lets you create a bookmark for an item in the result set. It will appear in the Bookmarks dialog.</p> <p></p> <p>The items in the result set show the address of the match, the current value, and a brief description of the memory at the address. If a code note exists for the address, it will be shown. Otherwise, a general classification of the address will be shown.</p> <p>Additionally, items in the result set can be colored.</p> <ul> <li>Red - the item does not currently match the filter</li> <li>Grey - the item does currently match the filter, but at some point since the filter was applied it did not match.</li> <li>Green - the item is bookmarked</li> <li>Blue - the item has a code note</li> </ul> <p>Clicking on a row will set the selected address to the associated item.</p>"},{"location":"other/meminsp/#4-code-notes","title":"4. Code Notes","text":"<p>Provides detailed information about the selected address, and allows the user to annotate addresses found by the search process. Try to keep your descriptions simple and clear, so they can be easily understood. Clear notes are important for debugging if a problem with an achievement occurs.</p> <p>The text field shows the currently selected address from the memory view (part 5 of the dialog). You can manually type in any address, or use the up and down arrows to jump to the next or previous address that have a code note.</p> <p>Just to the right of the text field is a button that opens the Code Notes dialog, which allows you to browse and search through the code notes.</p> <p>Below the text field is a button that will create a bookmark from the selected address.</p> <p>The large text area is where you can modify the code note for the selected address. NOTE: the changes are not saved unless you press the Save Note button. If you change the selected address without saving, the changes will be lost.</p> <p><code>Save Note</code> and <code>Delete</code> immediately attempt to update the server - either with the modified note text, or by clearing out the note text.</p>"},{"location":"other/meminsp/#5-memory-view","title":"5. Memory View","text":"<p>Allows direct browsing of the memory. The memory updates once per frame as the emulator runs.</p> <p>The currently selected address appears in red. Addresses with code notes show up blue, and addresses associated to bookmarks show up green.</p> <p>You can click on any piece of data in the memory viewer to jump to the associated address. You can also use the keyboard to navigation around in memory (up/down/left/right/pgup/pgdn/home/end).</p> <p>When the memory viewer is focused, a cursor will be visible. You can type any hexadecimal character to change the character at the cursor to another value. This immediately changes the value for the emulator, and may cause unexpected behavior, so use at your own risk. Additionally, modifying memory (through any of the tools) prevents achievements from being unlocked on the server as an anti-cheat mechanism.</p>"},{"location":"other/meminsp/#memory-bookmarks","title":"Memory Bookmarks","text":"<p>You can open the Memory Bookmarks dialog from the RetroAchievements menu. It will also automatically open when adding a bookmark from either of the buttons on the Memory Inspector dialog. </p> <p></p> <p>With this, you can view multiple designated addresses at once instead of having to shuffle around in the Inspector. Bookmarked addresses will show in the Memory Inspector as green.</p> <p>If you double-click on an address, you can move straight to that address in the Memory Inspector.</p> <p>The bookmarks can be renamed by clicking their description. This does not update the code note for the associated address.</p> <p>You can change the size or format of a bookmark by clicking on the field and selecting a new value from the dropdown. Clicking on the value field will allow you to enter a new value for the bookmark. It will automatically be written to the memory.</p> <p>From here you can also Freeze any bookmarks. This is helpful for things like health or consumables. Keep in mind, freezing occurs 1 frame after gameplay. This means that even when frozen, the value will change for at least one frame before returning to the frozen value. Frozen bookmarks will be displayed as yellow.</p>"},{"location":"other/meminsp/#reading-data-in-the-memory-viewer","title":"Reading Data in the Memory Viewer","text":""},{"location":"other/meminsp/#decimal-binary-and-hexadecimal-notations","title":"Decimal, Binary, and Hexadecimal Notations","text":"<p>To work well with the Memory Viewer, it's important to understand at least the basics of binary and hexadecimal numeral notations. Here are good sources of information about this matter without going into extreme details:</p> <ul> <li>https://simple.wikipedia.org/wiki/Binary_number</li> <li>https://simple.wikipedia.org/wiki/Hexadecimal_numeral_system</li> </ul> <p>The digits used in binary system are <code>0</code> and <code>1</code>. A binary digit is also known as bit. Eight bits is also known as one byte.</p> <p>The digits used in hexadecimal system are <code>0</code>, <code>1</code>, <code>2</code>, <code>3</code>, <code>4</code>, <code>5</code>, <code>6</code>, <code>7</code>, <code>8</code>, <code>9</code>, <code>A</code>, <code>B</code>, <code>C</code>, <code>D</code>, <code>E</code> and <code>F</code>. The hexadecimal notation is also known as hex.</p> <p>The main reasons for the existence of these 2 notations, besides the traditional decimal notation, are:</p> <ul> <li>Decimal notation is what humans understand.</li> <li>Binary notation is what computers \"understand\".</li> <li>Hexadecimal notation can be seen as a middle ground between binary and decimal. Because a single hexadecimal digit represents 4 bits, then a shorter and more understandable notation for humans to work in a way that the computer \"understands\".</li> </ul> <p>The table below shows the different notations for equivalent values.</p> Decimal Hexadecimal Binary <code>0</code> <code>0x0</code> <code>0000</code> <code>1</code> <code>0x1</code> <code>0001</code> <code>2</code> <code>0x2</code> <code>0010</code> <code>3</code> <code>0x3</code> <code>0011</code> <code>4</code> <code>0x4</code> <code>0100</code> <code>5</code> <code>0x5</code> <code>0101</code> <code>6</code> <code>0x6</code> <code>0110</code> <code>7</code> <code>0x7</code> <code>0111</code> <code>8</code> <code>0x8</code> <code>1000</code> <code>9</code> <code>0x9</code> <code>1001</code> <code>10</code> <code>0xA</code> <code>1010</code> <code>11</code> <code>0xB</code> <code>1011</code> <code>12</code> <code>0xC</code> <code>1100</code> <code>13</code> <code>0xD</code> <code>1101</code> <code>14</code> <code>0xE</code> <code>1110</code> <code>15</code> <code>0xF</code> <code>1111</code> <p>More facts about the different number notations:</p> <ul> <li>To indicate a value is written in hexadecimal, the prefix <code>0x</code> is used: <code>0x10 = 16</code>, <code>10 = 10</code>.</li> <li>Two hex digits represent 8 bits and can range from <code>0</code> to <code>255</code>. </li> <li>Four hex digits represent 16 bits and can range <code>0</code> to <code>65535</code>.</li> <li>Eight hex digits represent 32 bits and can range from <code>0</code>to <code>4294967295</code>.</li> </ul>"},{"location":"other/meminsp/#memory-viewer-modes","title":"Memory Viewer Modes","text":"<p>The bottom part of the Memory Inspector is what we call the Memory Viewer:</p> <p></p> <p>You can see data in Memory Viewer using 8, 16 or 32-bit modes.</p>"},{"location":"other/meminsp/#8-bit-mode","title":"8-Bit Mode","text":"<p>By default, the Memory Viewer shows data in 8-bit mode. This displays each byte of memory as a separate two-character hexadecimal value. And each byte has its own address.</p> <p>Sixteen bytes are shown per line. The address of a byte can be determined by adding the row index (displayed to the left of the viewer) to the column index (displayed above the viewer). Using the image above as an example, the cursor is at <code>0x002a7</code> (<code>0x002a0</code> + <code>7</code>).</p>"},{"location":"other/meminsp/#16-and-32-bit-mode","title":"16 and 32-bit Mode","text":"<p>Before we talk about 16-bit mode and 32-bit mode, it's important to know about endianness:</p> <p>Values that need more then 8-bits (in other words: larger than 255) have to be stored in multiple bytes. However, the emulated systems we use store multi-byte values in little-endian order.</p> <p>In the image of the Memory Viewer above you can see that at address <code>0x0002c0</code> we have the hex value <code>ce</code> and in <code>0x0002c1</code> the value is <code>39</code>. When you switch the viewer to 16-bit mode, the <code>ce</code> and <code>39</code> values are grouped at <code>0x0002c0</code> and get displayed as <code>39ce</code>. This happens because it automatically groups every two bytes and displays them as 16-bit hex values.</p> <p>NOTE: While 16-bit values are usually aligned to even addresses, that's not always the case. There's actually a non-displayed 16-bit value at <code>0x0002c1</code>. Since the value at <code>0x0002c1</code> is <code>39</code> and the value at <code>0x0002c2</code> is <code>29</code>, the 16-bit value at <code>0x0002c1</code> address is <code>0x2939</code>.</p> <p>Similarly, in 32-bit mode, the four bytes from <code>0x0002c0</code> to <code>0x0002c3</code> are displayed as a single 32-bit value <code>0x252939ce</code> at address <code>0x0002c0</code>, but there are also 32-bit values at <code>0x0002c1</code>, <code>0x0002c2</code>, and <code>0x0002c3</code>.</p>"},{"location":"other/meminsp/#endianness","title":"Endianness","text":"<p>Endianness describes the order in which a sequence of bytes are stored in computer systems memory. The two most common types are: Big-Endian (also known as BE) and Little-Endian (also known as LE).</p> <p>In the Big-Endian order the \"big end\" of the number (most significant value in the sequence) is stored first (placed at the lowest address). In the image below you see the number <code>0x12345678</code> stored at the address <code>0x100</code> in the big-endian order. Notice that the most significant byte <code>0x12</code> is at the address <code>0x100</code>:</p> <p></p> <p>In the Little-Endian order the \"little end\" of the number (least significant value in the sequence) is stored first. In the image below you see the number <code>0x12345678</code> stored at the address <code>0x100</code> in the little-endian order. Notice that the least significant byte <code>0x78</code> is at the address <code>0x100</code>:</p> <p></p>"},{"location":"other/meminsp/#working-with-sizes-smaller-than-8-bit","title":"Working with Sizes Smaller Than 8-Bit","text":"<p>In addition to the 8-bit, 16-bit and 32-bit sizes described above, there are additional sizes that can be used when writing achievements (in the Achievement Editor).</p>"},{"location":"other/meminsp/#single-bits","title":"Single Bits","text":"<p>In the memory viewer when an 8-bit address is selected you will see something like the image below (in the image: a byte with the value <code>6f</code> is selected; the bits are highlighted with an orange circle):</p> <p></p> <p>It is very common in games to store important information as a single bit. As a bit can only have two possible values (<code>1</code> or <code>0</code>), sometimes it's used to mean \"yes\" or \"no\", \"on\" or \"off\", \"have item\" or \"no item\", etc. Some games, specially those with limited memory space, use bit switches a lot.</p> <p>Important: You can refer to each one of those bits individually in the Achievement Editor.</p> <p>Common meaning of bit switches in a game memory:</p> <ul> <li>have an item</li> <li>button pressed (very common)</li> <li>area explored</li> <li>in game trigger activated</li> <li>cheat activated</li> <li>in demo mode</li> </ul> <p>In the memory viewer you can only input hex values, then it's important to know equivalence of values between hex and binary notations. You can see the table in the \"Decimal, Binary and Hexadecimal notations\" section, but the usual is to use a calculator (the default calculator on MS Windows on the programmer view can do the job).</p>"},{"location":"other/meminsp/#upper4-and-lower4","title":"Upper4 and Lower4","text":"<p>Upper4 is the upper four bits of a byte (bit: 7, 6, 5, 4), displayed as a single hexadecimal character. Lower4 is the lower four bits of a byte (bit: 3, 2, 1, 0), displayed as a single hexadecimal character.</p> <p>Looking at the memory size diagram below, a byte at address <code>0x00a274</code> is selected (value <code>0x23</code>). The first character, <code>2</code> is the Upper4 value. The second character <code>3</code> is the Lower4 value.</p> <p>Occasionally you will only be interested working with a single hexadecimal digit. Using the memory size diagram as an example, an achievement condition where <code>Upper4 0x00a274 = 0x2</code> would be true. A condition where <code>Lower4 0x00a274 = 0x3</code> would be true.</p>"},{"location":"other/meminsp/#memory-sizes-diagram","title":"Memory Sizes Diagram","text":""},{"location":"other/memmapping/","title":"Work in Progress","text":"<p>This page details how the memory of each supported system is mapped.</p> <p>Memory banks as registered in the RA emulators are defined here.</p>"},{"location":"other/memmapping/#nes","title":"NES","text":"<p>Reference: https://wiki.nesdev.com/w/index.php/CPU_memory_map</p> Bank Offset Length Description 0 0x0000 0x0800 2KB internal RAM 1 0x0800 0x0800 Mirror of $0000-$07FF 2 0x1000 0x0800 Mirror of $0000-$07FF 3 0x1800 0x0800 Mirror of $0000-$07FF 4 0x2000 0x0008 PPU registers 5 0x2008 0x1FF8 Mirrors of $2000-$2008 6 0x4000 0x0018 APU and I/O registers 7 0x4018 0x0008 APU and I/O test registers 8 0x4020 0x1FE0 Cartridge data 9 0x6000 0x2000 Cartridge RAM 10 0x8000 0x8000 Cartridge ROM"},{"location":"other/memmapping/#snes","title":"SNES","text":"<p>https://en.wikibooks.org/wiki/Super_NES_Programming/SNES_memory_map</p>"},{"location":"other/memmapping/#n64","title":"N64","text":"<p>https://raw.githubusercontent.com/mikeryan/n64dev/master/docs/n64ops/n64ops%23h.txt</p>"},{"location":"other/memmapping/#gb","title":"GB","text":"<p>Reference: http://gameboy.mongenel.com/dmg</p> <p>The memory map reflects the CPU memory space.</p>"},{"location":"other/memmapping/#gbc","title":"GBC","text":"<p>The memory map is identical to the Game Boy's, with the exception of banked work RAM. The first bank is mapped to its usual location in CPU space, while banks 2-7 are appended to the end of the memory map, in the 0x10000-0x15FFF region.</p>"},{"location":"other/memmapping/#gba","title":"GBA","text":"<p>https://www.coranac.com/tonc/text/hardware.htm#sec-memory</p>"},{"location":"other/memmapping/#virtualboy","title":"VirtualBoy","text":""},{"location":"other/memmapping/#master-system","title":"Master System","text":"<p>Reference: http://www.codeslinger.co.uk/pages/projects/mastersystem/memory.html</p> <p>TODO: find a more reliable source.</p> Offset Length Description 0x0C000 0x02000 RAM"},{"location":"other/memmapping/#megadrive-genesis","title":"MegaDrive (Genesis)","text":"<p>https://en.wikibooks.org/wiki/Genesis_Programming https://wiki.megadrive.org/index.php?title=Main_68k_memory_map see also Jamiras comment here: https://github.com/RetroAchievements/RALibretro/issues/47#issuecomment-455374796</p>"},{"location":"other/memmapping/#gamegear","title":"GameGear","text":""},{"location":"other/memmapping/#atari-2600","title":"Atari 2600","text":"<p>Reference: http://www.randomterrain.com/atari-2600-memories-tutorial-andrew-davie-05.html#summary</p> Offset Length Description 0x080 0x080 RAM"},{"location":"other/memmapping/#atari-7800","title":"Atari 7800","text":""},{"location":"other/memmapping/#atari-lynx","title":"Atari Lynx","text":""},{"location":"other/memmapping/#colecovision","title":"ColecoVision","text":""},{"location":"other/memmapping/#neogeo-pocket","title":"NeoGeo Pocket","text":""},{"location":"other/memmapping/#pcengine-turbografx16","title":"PCEngine (TurboGrafx16)","text":""},{"location":"other/memmapping/#pcengine-cd","title":"PCEngine CD","text":""},{"location":"other/memmapping/#arcade","title":"Arcade","text":""},{"location":"other/memmapping/#pc-8001-pc-8801","title":"PC-8001 / PC-8801","text":"<p>Reference: http://www.maroon.dti.ne.jp/youkan/pc88/memmap.html</p> <p>The memory map is based on the PC-8801 layout, but excludes graphics VRAM and extended RAM.</p>"},{"location":"other/memmapping/#pc-8801","title":"PC-8801","text":"Bank Offset Length Description 0 0x00000 0x10000 Main RAM 1 0x10000 0x1000 Text VRAM <p>Text VRAM is also known as high-speed RAM, and is used as a main RAM area in some titles.</p>"},{"location":"other/memmapping/#pc-8001","title":"PC-8001","text":"<p>Reference: http://www.cyross.com/pc8801wiki</p> <p>The entire memory space is mapped in the PC-8801 main RAM bank, but only RAM is exposed, so most of the mapped space will remain uninitialized.</p> Offset Length Description 0x08000 0x08000 RAM"},{"location":"other/memmapping/#apple-ii","title":"Apple II","text":"<p>Reference: http://apple2.guidero.us/doku.php/mg_notes/general/mem_map</p> <p>The memory map consists of both main and auxiliary RAM banks. Rather than mapping the CPU-accessible memory space, which can flicker at high frequencies, the RAM banks are mapped consecutively.</p> <p>Auxiliary RAM is only available on systems with 128KB of RAM (Apple IIe and up), so it will remain uninitialized on 64KB systems or when running titles that are not designed to make use of auxiliary RAM.</p> Bank Offset Length Description 0 0x00000 0x10000 Main RAM 1 0x10000 0x10000 Auxiliary RAM"},{"location":"other/minimumver/","title":"Minimum Versions","text":"<p>Sometimes it's useful to know when a feature was added/changed and the implications of these changes, specially if you are working on a ticket. Compare the ticket timestamp to the toolkit releases to determine which behavior the player would have been subject to.</p> Feature RA_Integration RetroArch rcheevos Leaderboard Cancel AND 0.073(31 Aug 2018) 1.7.0(25 Dec 2017) n/a Full 32-bit value support 0.073(31 Aug 2018) 1.7.0(25 Dec 2017) n/a ResetIf/PauseIf HitCount 0.073(31 Aug 2018) 1.7.4(30 Aug 2018) n/a Leaderboard OR 0.073(31 Aug 2018) 1.7.4(30 Aug 2018) n/a Delay achievement processing for 100 frames on load 0.073(31 Aug 2018) n/a n/a Replace 100 frame delay with delayed activation logic 0.075(04 Feb 2019) 1.6.3(28 Jul 2017) n/a AndNext 0.76(21 Jun 2019) 1.7.7(7 May 2019) 8.0(4 May 2019) Prior 0.76(21 Jun 2019) 1.7.7(7 May 2019) 8.0(4 May 2019) 24-bit read 0.77(30 Nov 2019) 1.8.2(25 Dec 2019) 8.0.1(18 Jun 2019) AddAddress 0.77(30 Nov 2019) 1.8.2(25 Dec 2019) 8.1(21 Nov 2019) Measured 0.77(30 Nov 2019) 1.8.2(25 Dec 2019) 8.1(21 Nov 2019) Measured syntax for leaderboard values 0.77(30 Nov 2019) 1.8.2(25 Dec 2019) 8.1(21 Nov 2019) Detect and report Unsupported achievements 0.79(22 May 2021) 1.8.2(25 Dec 2019) n/a OrNext 0.78(18 May 2020) 1.8.7(17 May 2020) 9.0(9 May 2020) BitCount 0.78(18 May 2020) 1.8.7(17 May 2020) 9.0(9 May 2020) MeasuredIf 0.78(18 May 2020) 1.8.7(17 May 2020) 9.0(9 May 2020) Trigger 0.79(22 May 2021) 1.8.7(17 May 2020) 9.0(9 May 2020) Include hits in save states 0.073(31 Aug 2018) 1.9.1(28-Mar 2021) 9.0(9 May 2020) SubHits 0.79(22 May 2021) 1.9.4(29 May 2021) 10.0(15 May 2021) ResetNextIf 0.79(22 May 2021) 1.9.4(29 May 2021) 10.0(15 May 2021) Ranges in rich presence lookups 0.79(22 May 2021) 1.9.4(29 May 2021) 10.0(15 May 2021) Maxof($) for Measured leaderboard values 0.79(22 May 2021) 1.9.4(29 May 2021) 10.0(15 May 2021) ResetIf/PauseIf support for Measured leaderboard values 0.79(22 May 2021) 1.9.4(29 May 2021) 10.0(15 May 2021) Big Endian memory reads 1.0(29 Jan 2022) 1.9.9(5 Sep 2021) 10.2(27 Aug 2021) Measured raw/percent flag 1.0(29 Jan 2022) 1.9.9(5 Sep 2021) 10.2(27 Aug 2021) Floating point memory reads 1.0(29 Jan 2022) 1.10.1(6 Mar 2022) 10.3(14 Jan 2022) Built-in macros for rich presence 1.0(29 Jan 2022) 1.10.1(6 Mar 2022) 10.3(14 Jan 2022) MBF32 LE memory read 1.1(15 Nov 2022) 1.13.0(19 Nov 2022) 10.5(12 Nov 2022) XOR modifier 1.1(15 Nov 2022) 1.13.0(19 Nov 2022) 10.5(12 Nov 2022)"},{"location":"other/projects/","title":"Developer Projects","text":""},{"location":"other/projects/#entries-that-have-been-re-linked-or-checked-by-developers","title":"Entries that have been re-linked or checked by Developers","text":"<p>Dev Checked and Relinked MD5s list</p> <p>Recently game linking has been restricted to developers only. (Something many of us have been requesting for some time.) This creates new solutions, problems and responsibilities for all of us developers.</p> <p>What needs to happen over time is that every entry is checked that is only has supported ROMs linked to it. Many entries have unsupported ROMs and Trainers linked to them which cause bugs and allow for cheating.</p> <p>This Shared document linked is how we will keep track of the entries that have been reviewed by a developer, unlinked and then relinked with the correctly entries, when necessary.</p>"},{"location":"other/projects/#battery-savecode-protection","title":"Battery Save/Code Protection","text":"<p>The goal is implement protections so that no one can unlock groups of achievements from a save file or by using passwords. A list of games that need save protection: Open gSheet master list</p>"},{"location":"other/ralibretro/","title":"RALibretro","text":"<p>!! This page is wildly out-of-date</p> <p>RALibretro is a multi-emulator that can be used to develop RetroAchievements.</p> <p>The \"multi-emulation\" feature is only possible because it uses libretro cores to do the actual emulation. What RALibretro does is to connect the emulation to the tools used to create RetroAchievements.</p>"},{"location":"other/ralibretro/#warning","title":"WARNING","text":"<p>RALibretro is a Work-in-Progress!!!</p> <p>Currently the development is going on this repo: https://github.com/RetroAchievements/RALibretro</p> <p>Here's a list of known issues (feel free to report new issues if you find one): https://github.com/RetroAchievements/RALibretro/issues</p>"},{"location":"other/ralibretro/#installation-instructions","title":"Installation Instructions","text":"<p>Just download RALibretro from the Downloads page and unzip it.</p>"},{"location":"other/ralibretro/#basic-usage","title":"Basic Usage","text":"<ol> <li>Launch RALibretro.exe</li> <li>Click on <code>File</code> &gt; <code>Load System</code>, and click on the system you want to emulate</li> <li>Now go to <code>File</code> &gt; <code>Load Game</code> and choose your ROM. Note: RALibretro currently doesn't accept zipped files!</li> <li>Now you can create your cheevos or just earn some!</li> </ol>"},{"location":"other/ralibretro/#supported-systems","title":"Supported Systems","text":"<p>NOTE: some systems may require system (BIOS) files in the <code>System</code> directory in order to load games correctly.</p> <p>Here is a list of the systems supported currently:</p> <ul> <li>SNES</li> <li>NES</li> <li>Nintendo 64</li> <li>Mega Drive</li> <li>Master System</li> <li>Gameboy</li> <li>Gameboy Color</li> <li>Gameboy Advance</li> <li>PC Engine (TurboGrafx-16/TurboGrafx-CD)</li> <li>Atari Lynx</li> <li>Game Gear</li> <li>Neo Geo Pocket</li> <li>Atari 2600</li> <li>Atari 7800</li> <li>Virtual Boy</li> <li>Neo Geo (Arcade) - new. NOTE: you need to put the <code>neogeo.zip</code> BIOS file on the same directory as the ROMs.</li> <li>Capcom Play System 1, 2 and 3 (Arcade) - new</li> </ul>"},{"location":"other/ralibretro/#keyboard-input","title":"Keyboard Input","text":"Keyboard a s z x d c f v Enter Tab g h RetroPad Y X B A L R L2 R2 Start Select L3 R3 SNES Y X B A L R Start Select NES B A Swap disk side (FDS) Insert/Eject disk (FDS) Start Select Mega Drive A Y B C X Z Start Master System B A Start GameGear B A Start Gameboy [Color] B A Start Select Gameboy Advance B A L R Start Select PC Engine II I Run Select Atari Lynx B A Option 1 Option 2 Start Neo Geo Pocket B A Start Atari 2600 o L difficulty b R difficulty b L difficulty a R difficulty a Start Select Neo Geo C D A B Start Coin CPS1/2/3* * * * * * * Start Coin <p>Note: the buttons for CPS1/2/3 games vary for each game.</p>"},{"location":"other/ralibretro/#keyboard-shortcuts","title":"Keyboard Shortcuts","text":"<ul> <li>see overlay: <code>Esc</code></li> <li>pause emulation: <code>p</code></li> <li>advance one frame at a time: <code>;</code> (automatically pauses emulation)</li> <li>fast forward: <code>=</code></li> <li>fast forward toggle: <code>-</code> (minus signal)</li> <li>Screenshot: <code>PrintScreen</code></li> </ul>"},{"location":"other/ralibretro/#saveload-state-keys","title":"Save/Load state keys","text":"<ul> <li>Save state current slot: <code>Backspace</code></li> <li>Load state current slot: <code>F11</code></li> <li>Load state from slot 1, 2, .., 9, 0: <code>F1</code>, <code>F2</code>, ..., <code>F9</code>, <code>F10</code></li> <li>Save state to slot  1, 2, .., 9, 10: <code>shift</code>+<code>F1</code>, <code>shift</code>+<code>F2</code>, ..., <code>shift</code>+<code>F9</code>, <code>shift</code>+<code>F10</code></li> <li>Previous slot: <code>shift</code>+<code>-</code></li> <li>Next slot: <code>shift</code>+<code>+</code></li> <li>Switch slot: <code>0</code>, <code>1</code>, <code>2</code>,..., <code>9</code></li> </ul>"},{"location":"other/ralibretro/#missing-features","title":"Missing Features","text":"<ul> <li>feedback to the user when save/load state, pausing, etc.</li> <li>N64 support</li> <li>load zipped ROMs</li> <li>input configuration</li> <li>more issues listed here: https://github.com/RetroAchievements/RALibretro/issues</li> </ul>"},{"location":"other/ralibretro/#how-to-make-aes-bios-work-in-ralibretro-or-retroarch","title":"How to make AES BIOS work in RALibretro or RetroArch","text":"<p>To make AES BIOS emulation mode work in your emulator:</p> <ol> <li> <p>Make sure your emulator works correctly.</p> </li> <li> <p>Put <code>neogeo.zip</code> to <code>System</code> directory (RALibretro), or a folder you keep your NeoGeo ROMs (RetroArch).</p> </li> <li> <p>Make sure the <code>neogeo.zip</code> consist of at least files you can see here:</p> </li> </ol> <p></p> <p>If you keep only those files, AES mode will be automatically forced for any NeoGeo game (recommended).</p> <p>Important! The files which are highlighted on this picture (<code>neo-epo.bin</code> and <code>neo-po.bin</code>) are the only one actually related to AES mode, and you probably will need to include them in your archive to make AES mode work for you. <code>neo-po.bin</code> is necessary for japanese-only titles or to make the japanese versions to work, but due to emulation issue it also forces japanese language as default, that's why you will need to remove it to display english in some games.</p> <ol> <li>Load any FBA compatible neo geo ROM. More complete archive (including files needed to run MVS and UniBIOS modes) might need additional configuration to force AES mode:</li> </ol> <p>In RaLibretro: Settings-&gt;Emulation-&gt;Force Neo Geo Mode-&gt;AES</p> <p>In RetroArch: Command-&gt;Menu Toggle-&gt;Options-&gt;Force Neo Geo Mode-&gt;AES</p>"},{"location":"other/ratools/","title":"RATools","text":""},{"location":"other/ratools/#about-ratools","title":"About RATools","text":"<p>RATools is a standalone executable designed to assist developers of the retroachievements.org community. It's primary purpose is to provide a scripting language for achievement development.</p> <ul> <li>Releases</li> <li>Wiki</li> </ul>"},{"location":"other/ratools/#rascript","title":"RAScript","text":"<ul> <li>RAScript is a domain-specific language (DSL) that allows achievement developers for retroachievements.org the ability to design achievements using many of the modern conveniences provided by programming languages - such as variables, loops, and comments.</li> </ul>"},{"location":"other/ratools/#tutorials","title":"Tutorials","text":"<p>The user Etron writes an ongoing series of RATools tutorials, which appear in RANews each month.</p> <ul> <li>Getting Started: Introduction to using RATools</li> <li>Memory: Examples of variables and functions - Example Game: Sonic the Hedgehog</li> <li>Add Hits: Examples of counting with tally - Example Game: Streets of Rage 2 </li> <li>Bitflags: Examples of counting bit flags with For Loops - Example Game: Pok\u00e9mon Red | Blue</li> <li>Arithmetic Operations: Examples of using arithmetic functions to convert values from Binary-Coded Decimal (BCD) - Example Game: Pitfall!</li> <li>Pointers: Examples of pointer use and data structures - Example Game: Spider-Man</li> <li>If/else: Examples of using logic conditions to build an achievement - Example Game: Tetris DX</li> <li>Challenges Part 1: Examples of damageless, deathless, and weapon limited challenges - Example Game: Mega man</li> <li>Challenges Part 2: Examples of speedruns and other time challenges - Example Game: Super Mario World</li> <li>Triggers and Measure: Examples of using these flags together - Example Game: Street Fighter II: The World Warrior</li> <li>Strings: Examples of utilizing specific arrays - Example Game: Rez</li> <li>Rich Presence: Examples of writing dynamic Rich Presence scripts</li> <li>Leaderboards: Examples of various types of in-game leaderboards - Example Game: Doom</li> </ul>"},{"location":"other/ratools/#rascript-repositories","title":"RAScript Repositories","text":"<p>Many achievement developers' RAScripts are publicly available and are a great resource in becoming more familiar with it: - AlmightyXor - AuburnRDM - Bartis1989 - BenGhazi - Bilalscape12 - Bryan1150 - Etron - FRAN269 - gde - Guinea - Jamiras - lordpsycho - meleu - pinguupinguu - Searo - Sines - SlashTangent - Snow - soopercool101 - suXin - televandalist - theanxietybuster - tomojin - WCopeland - wolfman2000 - zxmega</p>"},{"location":"other/regional/","title":"Regional Compatibility","text":""},{"location":"other/regional/#adding-regional-compatibility","title":"Adding Regional Compatibility","text":"<p>If you would like to add support for another region (e.g. adding support for a European ROM when the set was made with the USA ROM) to a set, please note the following: * For the majority of consoles, PAL-region games run at 50hz whereas NTSC runs at 60hz. Without a 60Hz patch, some achievements could be easier to obtain due to the decreased frame-rate. This is especially important for achievements that use frames-as-time in their logic and for leaderboards in general. * Some regions have different cheats. There are many cases where cheat codes were altered or removed upon localization. These should be accounted for.  * If there are enough differences between versions, an entirely separate set might be the best option. For more information on this, please see localization differences.</p>"},{"location":"other/resources/","title":"Developer Resources","text":""},{"location":"other/resources/#helpful-website-links","title":"Helpful Website Links","text":"<ul> <li> <p>https://datacrystal.romhacking.net/wiki/Main_Page  - Defined RAM maps of many games.  </p> </li> <li> <p>http://www.thealmightyguru.com/Games/Hacking/Wiki/index.php?title=Category:Games - Defined RAM maps of many NES games.  </p> </li> <li> <p>https://gamehacking.org/ - Action Replay codes can be used to get defined memory address:  </p> </li> </ul> <p>Y \u2013 Address, X \u2013 Value 1-2 digit value will always be 8 bit \u2013 use 2 in front \u2013 22YYYYYY 000000XX 3-4 digit value will always be 16 bit \u2013 use 1 in front \u2013 12YYYYYY 0000XXXX 5-8 digit value will always be 32 bit \u2013 use 0 in front \u2013 02YYYYYY XXXXXXXX This will work for Action replay codes.  </p> <p>For getting addresses out of GameGenie codes use this: (outdated link, getting 404) http://www.d.umn.edu/~bold0070/projects/game_genie_codes/javascript_game_genie_encoders-decoders.html</p> <ul> <li> <p>https://www.romhacking.net/ - biggest repository of hacked roms.  </p> </li> <li> <p>https://tcrf.net/The_Cutting_Room_Floor - Great place to find Easter Eggs for your set plans.</p> </li> <li> <p>https://www.gamefaqs.com/ - Great place to find game guides, finding almost all you could want to know about game content, find cheat codes, for development utility and also for making proper protections against the codes.</p> </li> <li> <p>https://wiki.nesdev.com/w/index.php/CPU_memory_map - Shows sections of the NES memory so you'll know what area of the memory you're examining. For nes most useful addresses will be between 0x0000--0x07FF.</p> </li> <li> <p>https://datacrystal.romhacking.net/wiki/Hashes - Explains what hashes are. If you don't know what they are you should probably read this.</p> </li> <li> <p>https://emn178.github.io/online-tools/crc32_checksum.html - Drag and drop checksum checker utility. You can also get the checksum from the rom you have loaded from the retroachievements menu in the emulators.</p> </li> <li> <p>https://www.getpaint.net/ - Excellent freeware image editor. You can use it for making badges and icons.</p> </li> <li> <p>https://www.marcrobledo.com/RomPatcher.js/ - An online ROM patcher utility.</p> </li> <li> <p>https://gregstoll.dyndns.org/~gregstoll/floattohex/ - Floating point to decimal converter</p> </li> <li> <p>http://jsonviewer.stack.hu/ - Excellent for viewing raw achievements</p> </li> </ul> <p>Turns this: </p> <p>Into this: </p> <p>Or get a plugin for Notepad++: - http://jsminnpp.sourceforge.net/ to do similar</p> <p>Speaking of Notepad++ - https://notepad-plus-plus.org/download/ - One of the best text editors and it's freeware (Windows only).</p>"},{"location":"other/resources/#achievement-syntax","title":"Achievement Syntax","text":"<p>This is a good reference sheet, it's especially useful for Rich Presence and Leaderboards, getting your deltas and bit labels right.  For full size, right click an save image.</p> <p>A 32bit requires the prefix \"X\" as in 0xX63</p>"},{"location":"other/roadmap/","title":"Set Development Roadmap","text":"<p>The following is a detailed road-map of most things you would want to consider while making an achievement set. It's not required to follow this exactly but is meant as a guide.</p>"},{"location":"other/roadmap/#initial-research","title":"Initial Research","text":"<ul> <li>Game manual: Review</li> <li>Game Faqs: Read/check</li> <li>Game Cheats: Find, note</li> <li>Longplay: Review/watch</li> <li>Similar sets: Compare, note favorite ideas</li> <li>Partimes: check if they exist</li> <li>Speedruns: check if they exist</li> </ul>"},{"location":"other/roadmap/#conceptual-design","title":"Conceptual Design","text":"<ul> <li>Achievements 1: Brainstorm, include ideas from similar sets, manual, etc.<ul> <li>Note secrets, progress, key events, collectibles, scores  benchmarks, Easter eggs, bosses, key items, par times, internal rewards.</li> </ul> </li> <li>Research 2: Check/test that designs are possible.</li> <li>Memory 1: Estimate needed addresses for achievements.</li> </ul>"},{"location":"other/roadmap/#memory-hunt","title":"Memory hunt","text":"<ul> <li>Memory 2: Search for needed memory addresses.</li> </ul>"},{"location":"other/roadmap/#achievement-design","title":"Achievement Design","text":"<ul> <li>Balance 1: Balance set for difficulty distribution, remove or redesign    those that don't fit.</li> <li>Achievements 2: Build the list, push complete to unofficial (not required).</li> <li>Memory 3: Search for solutions missing, depending on the game's memory.</li> <li>Achievements 3: Add new ideas as they come.</li> <li>Achievements 4: Rework or remove ideas that are impossible.</li> </ul>"},{"location":"other/roadmap/#pre-release-final-steps","title":"Pre-release Final steps","text":"<ul> <li>Titles &amp; Descriptions: Finalize</li> <li>Bugs 1: Test achievements for bugs, possibly make/use movies.</li> <li>Game page: Update. Game icon, images, info, resources, similar games.</li> <li>Leaderboards (optional): Code</li> <li>Rich presence: Code</li> <li>Badges: Create</li> </ul>"},{"location":"other/roadmap/#release","title":"Release","text":"<ul> <li>Achievements 7: Push to core</li> <li>Points: Balance to your cap</li> <li>Ordering: Do it</li> <li>Forum post: Make announcement</li> </ul>"},{"location":"other/roadmap/#post-release","title":"Post Release","text":"<ul> <li>Bugs 2: Fix those that come.</li> <li>Balance 2: Re-balance set difficulty based on feedback.</li> </ul>"},{"location":"other/scoring/","title":"Achievement Scoring","text":""},{"location":"other/scoring/#scoring","title":"Scoring","text":"<p>There is no set point cap. When scoring achievements match your scores to one of these 5 tiers.</p> Point Tiers Difficulty Significance (Level of Importance) 0-5 Easy Minor- Collecting a power-up- Beating a stage 10 Medium Intermediate- Beating a boss 25 Hard Major - Beating the Game 50 Very Hard Completion Level 100 \"Impossible\" Typically for Bonus Sets <p>There are other factors you should consider as well, such as achievement spread and game length.</p> <p>Scoring from set to set will never perfectly match up, but this scoring system allows the points earned to more closely match skill and effort.</p>"},{"location":"other/scoring/#factors-to-consider-while-scoring-achievements","title":"Factors to Consider While Scoring Achievements","text":""},{"location":"other/scoring/#difficulty","title":"Difficulty","text":"<p>Consider for the whole set: - What percent of players earned the achievement? - How hard were the achievements for you? - What is the current score compared to others achievements? - How much time, effort and practice does it take to learn the necessary skills to complete the achievement, game and entire set?</p>"},{"location":"other/scoring/#achievement-spread","title":"Achievement Spread","text":"<p>Imagine you had two versions of the same set, with the same difficulty: - If the set has many similar achievements they should each be scored lower. - If it has few they should be scored higher.</p>"},{"location":"other/scoring/#game-length","title":"Game Length","text":"<ul> <li>For long games achievements should be scored somewhat higher than short games.</li> <li>RPGs are often much longer than other genres. Game length should be a factor in scoring but is lesser than the other three.</li> <li>Examples.</li> </ul>"},{"location":"other/scoring/#rescoring","title":"Rescoring","text":"<p>Up until June 2019, RetroAchievements had a 400-point cap per set, with no restrictions on individual achievements. The set cap was removed to put less focus on set totals and more on the achievements themselves. This initiative was also meant to eliminate the misconception that a set worth 400 points is a \"complete\" set. </p> <p>As with revisions and aesthetic changes, a rescore typically requires community approval. You can find more information on rescores here.</p>"},{"location":"other/scoring/#exceptions","title":"Exceptions","text":"<p>Some games may come up as exceptions to the normal scoring tiers and will be listed here. - Picross and Sudoku achievements fall under a special scoring category as follows based on difficulty:   - Easy - 1 point,   - Medium - 2-3 points,   - Hard - 4-5 points - Picross 3D is an exception to this rule and is scored normally - Further exceptions can be requested by Code Reviewers and/or Admins on a case by case basis</p>"},{"location":"other/syntax/","title":"Condition Syntax","text":""},{"location":"other/syntax/#memory-sizes","title":"Memory sizes","text":"Size Prefix Example Bit0 <code>0xM</code> <code>0xM01234</code> Bit1 <code>0xN</code> <code>0xN01234</code> Bit2 <code>0xO</code> <code>0xO01234</code> Bit3 <code>0xP</code> <code>0xP01234</code> Bit4 <code>0xQ</code> <code>0xQ01234</code> Bit5 <code>0xR</code> <code>0xR01234</code> Bit6 <code>0xS</code> <code>0xS01234</code> Bit7 <code>0xT</code> <code>0xT01234</code> Lower4 <code>0xL</code> <code>0xL01234</code> Upper4 <code>0xU</code> <code>0xU01234</code> 8bit <code>0xH</code> <code>0xH01234</code> 16bit <code>0x</code> <code>0x 01234</code> 24bit <code>0xW</code> <code>0xW01234</code> 32bit <code>0xX</code> <code>0xX01234</code> 16bit BE <code>0xI</code> <code>0xI01234</code> 24bit BE <code>0xJ</code> <code>0xJ01234</code> 32bit BE <code>0xG</code> <code>0xG01234</code> BitCount <code>0xK</code> <code>0xK01234</code> Float <code>fF</code> <code>fF01234</code> MBF32 <code>fM</code> <code>fM01234</code>"},{"location":"other/syntax/#prefixes","title":"Prefixes","text":"Modifier Prefix Example Delta <code>d</code> <code>d0xH1234</code> Prior <code>p</code> <code>p0xH1234</code> BCD <code>b</code> <code>b0xH1234</code> Invert <code>~</code> <code>~0xH1234</code>"},{"location":"other/syntax/#logical-flags","title":"Logical Flags","text":"Flag Prefix Example ResetIf <code>R:</code> <code>R:0xH1234=1</code> ResetNextIf <code>Z:</code> <code>Z:0xH1234=1</code> PauseIf <code>P:</code> <code>P:0xH1234=1</code> AndNext <code>N:</code> <code>N:0xH1234=1</code> OrNext <code>O:</code> <code>O:0xH1234=1</code> AddSource <code>A:</code> <code>A:0xH1234=1</code> SubSource <code>B:</code> <code>B:0xH1234=1</code> AddHits <code>C:</code> <code>C:0xH1234=1</code> SubHits <code>D:</code> <code>D:0xH1234=1</code> AddAddress <code>I:</code> <code>I:0xH1234=1</code> Measured <code>M:</code> <code>M:0xH1234=1</code> Measured% <code>G:</code> <code>G:0xH1234=1</code> MeasuredIf <code>Q:</code> <code>Q:0xH1234=1</code> Trigger <code>T:</code> <code>T:0xH1234=1</code>"},{"location":"other/templates/","title":"Achievement Templates","text":""},{"location":"other/templates/#warning-every-game-is-different","title":"WARNING: EVERY GAME IS DIFFERENT!","text":"<p>Here you'll see examples of some typical achievements. You can use them as inspiration to create your own achievement. But keep in mind the following:</p> <p>EVERY GAME IS DIFFERENT! The memory has a different behavior from game to game.</p> <p>So do NOT take these templates as a rule. They are here just for educational purposes.</p> <p>In these examples we use the following convention 0xLEVEL is the memory address with the level ID; 0xLIFE is the address used for the character life; 0xTIME for time, 0xITEM for getting an item, etc...</p> <ul> <li>Collecing an Item N Times</li> <li>Finish Level N</li> <li>Finish Level N Before Time Reaches T</li> <li>Finish Level N without Dying (or getting hit, using a weapon, etc.)</li> <li>Finish Level N with Item</li> <li>Collect an Item in a Specific Level</li> <li>Collected 100 Percent of Something</li> <li>Circumvent the Problem of a Counter Incrementing Twice in the Same Frame</li> <li>Check for a Specific Value Changing to Another Specific Value Ten Times</li> <li>Conditional Resets</li> </ul>"},{"location":"other/templates/#collecting-an-item-n-times","title":"Collecting an Item N times","text":"<p>There are some situations where you want to award an achievement for collecting an item (like a coin or a ring) N times. You'll need to find in the memory the address responsible to count how much of the item you have. Once you have the address, this logic usually does the job:</p> ID Special? Memory Cmp Type Mem/Val Hits 1 0xCOUNT &gt; Delta 0xCOUNT (N) <p>But you most likely will want to be more specific, for example \"get item N times without dying\". Then you should use another condition with a <code>ResetIf</code>, like this:</p> ID Special? Memory Cmp Type Mem/Val Hits 1 0xCOUNT &gt; Delta 0xCOUNT (N) 2 ResetIf 0xLIVES &lt; Delta 0xLIVES <p>The <code>ResetIf</code> condition could be \"while in level X\", \"without using a bomb\", etc.</p>"},{"location":"other/templates/#finish-level-n","title":"Finish Level N","text":"<p>In this example we want to award when the player finish the level <code>N</code> and goes to level <code>N+1</code>.</p> ID Special? Memory Cmp Type Mem/Val Hits 1 0xLEVEL = Value N (1) 2 0xLEVEL = Value N+1 3 0xLEVEL &gt; Delta 0xLEVEL 4 ResetIf 0xLEVEL = Value TITLE <p>Requirements</p> <ul> <li>1: On level <code>N</code> at least one time</li> <li>2: Currently at level <code>N+1</code></li> <li>3: The level has been increased</li> <li>4: Reset the hit counter when back to title screen</li> </ul> <p>The value 0xTITLE means \"at game's title screen\". You need to <code>ResetIf</code> going to the title screen to avoid the awarding at a wrong time.</p> <p>Here is an example of game flow that could make the achievement trigger at a wrong time if it wasn't for that ResetIf:</p> <ol> <li>Start the game and reach level 2 (this make the hit counter goes to 1)</li> <li>Get a game over while on level 2</li> <li>Go back to the title screen</li> <li>Use a password for level 3</li> </ol> <p>If not using the ResetIf we will have these conditions:</p> <ol> <li>Hit level 2: TRUE</li> <li>Current level = level 3: TRUE</li> <li>Level increased (from title/password screen to level 3): TRUE</li> </ol> <p>And it would be enough to trigger the cheevo (at a wrong time). That's why we're using the <code>ResetIf</code> in this example.</p>"},{"location":"other/templates/#finish-level-n-before-time-reaches-t","title":"Finish Level N Before Time Reaches T","text":"<p>In this example we consider a game where the time decreases (e.g.: Super Mario Bros). Adapt it accordingly the time on your game has a different behavior.</p> <p>We want to award if the player finishes the level <code>N</code> while time is greater than <code>T</code>.</p> ID Special? Memory Cmp Type Mem/Val Hits 1 0xLEVEL = Value N (1) 2 0xLEVEL = Value N+1 3 0xLEVEL &gt; Delta 0xLEVEL 4 ResetIf 0xLEVEL = Value TITLE 5 0xTIME &gt;= Value T <p>Requirements</p> <p>Requirements 1-4 are the same as Finish Level N template.</p> <ul> <li>5: timer is greater than <code>T</code>.</li> </ul> <p>Keep in mind that besides knowing how the time behaves in game you also need to research how it behaves in memory.</p>"},{"location":"other/templates/#finish-level-n-without-dying-or-getting-hit-using-a-weapon-etc","title":"Finish Level N without Dying (or getting hit, using a weapon, etc.)","text":"ID Special? Memory Cmp Type Mem/Val Hits 1 0xLEVEL = Value N (1) 2 0xLEVEL = Value N+1 3 0xLEVEL &gt; Delta 0xLEVEL 4 ResetIf 0xLEVEL = Value TITLE 5 0xSCREEN = Value LVL_N_INTRO (1) 6 ResetIf 0xLIFE &lt; Delta 0xLIFE <p>Requirements</p> <p>Requirements 1-4 are the same as Finish Level N template.</p> <ul> <li>5: a checkpoint to represent the point from where the player is suposed to start the chalenge of not losing a life. If the game has a level intro screen, it can be a good checkpoint.</li> <li>6: reset hit count if life decreased.</li> </ul> <p>The requirement 6 can also be used to reset hit count if a weapon was used, damage taken, or anything else that you want the player to NOT do.</p>"},{"location":"other/templates/#finish-level-n-with-item","title":"Finish Level N with Item","text":"ID Special? Memory Cmp Type Mem/Val Hits 1 0xLEVEL = Value N (1) 2 0xLEVEL = Value N+1 3 0xLEVEL &gt; Delta 0xLEVEL 4 ResetIf 0xLEVEL = Value TITLE 5 0xITEM = Value TRUE <p>Requirements</p> <p>Requirements 1-4 are the same as Finish Level N template.</p> <ul> <li>5: the player have the item</li> </ul>"},{"location":"other/templates/#collect-an-item-in-a-specific-level","title":"Collect an Item In a Specific Level","text":"<p>This template is for battery save or password protection for items. It avoids awarding \"get item X\" by loading to where player already has the item. It checks that an item is collected in the level/room ID it is supposed to be collected, and only allows it be earned at that time.</p> ID Special? Memory Cmp Type Mem/Val Hits 1 0xITEM = Value FALSE (1) 2 0xITEM = Value TRUE 3 ResetIf 0xLEVEL != Value collect level <p>Requirements</p> <ul> <li>1: Do not have the item when entered the collect level, the hit is a checkpoint so 1&amp;2 can both be true at once.</li> <li>2: Have the item</li> <li>3: Reset hit counter if in a level different than the one where the item must be obtained</li> </ul> <p>Requirements 1 and 3 together mean \"arrived the level/Room ID without the item\".</p> <p>Even if the player loads a savestate and goes to the required level they will not be able to add hits to condition 1, thus they can't get it except in normal gameplay.  </p> <p>It does not necessarily have to be level/Room ID. There are other ways to approach this problem, for example a unique Mem/Val that only occurs on collection. Etc.</p>"},{"location":"other/templates/#collected-100-percent-of-something","title":"Collected 100 Percent of Something","text":"<p>This is limited battery save /password protection for when a player will collect 100% of something like clearing each stage in Super Mario world, or getting a 100% collection rate in Super Metroid. It's necessary so that a player cannot just load a save at 100% and get the achievement for free. (As usual there are other ways to approach this problem too.)</p> ID Special? Type Memory Cmp Type Mem/Val Hits 1 Delta 0xCollectPercent &lt; Value 100% value 2 Mem 0xCollectPercent = Value 100% value 3 PauseIf Mem 0xPlayerState != Value Specific mode/point in game where % is increased <p>Using the correct address value for condition 3 is especially important. You need to find an address that represents a unique time in the game where this percent increases. You'd not want the achievement to trigger when the player is loading their in game save file, which means this achievement must be paused at that time.</p> <p>Example: In Super Mario World this change happens while the player sees the world map after completing a stage.</p> <p>Note: This is similar in behavior and result to Collect an Item in a specific Level.</p>"},{"location":"other/templates/#circumvent-the-problem-of-a-counter-incrementing-twice-in-the-same-frame","title":"Circumvent the Problem of a Counter Incrementing Twice in the Same Frame","text":"<p>In the Collecting an Item N times we are counting how many times the counter goes up. But in some games there are situations where the counter goes up twice in the same frame, and the hit counter is incremented only by one. This behavior, obviously, ruins our logic. We're going to see a way to circumvent this issue.</p> <p>The technique used here relies on two other ones:</p> <ul> <li>using <code>SubSource</code> to count specific increments</li> <li><code>AddHits</code> Flag</li> </ul> <p>Here's the trick:</p> ID Special? Type Memory Cmp Type Mem/Val Hits 1 SubSource Delta 0xCOUNT 2 AddHits Mem 0xCOUNT = Value 0x02 3 Mem 0xCOUNT &gt; Delta 0xCOUNT (N) 4 ResetIf Mem 0xLIVES &lt; Delta 0xLIVES <p>It can looks a bit confusing at a first sight, but maybe using a real example it can be more clear. Check the Circumvent the Problem of a Counter Incrementing Twice in the Same Frame.</p>"},{"location":"other/templates/#check-for-a-specific-value-changing-to-another-specific-value-ten-times","title":"Check for a Specific Value Changing to Another Specific Value Ten Times","text":"<p>In this example we want to detect a value changing from <code>V1</code> to <code>V2</code> ten times:</p> ID Special? Type Memory Cmp Type Mem/Val Hits 1 AndNext Delta 0xADDRESS = Value 0xV1 2 Mem 0xADDRESS = Value 0xV2 (10) <p>Requirements</p> <ul> <li>1: If value in <code>0xADDRESS</code> in the previous frame is <code>0xV1</code></li> <li>2: AND If the current value in <code>0xADDRESS</code> is <code>0xV2</code>, increases the hitcount (up to 10).</li> </ul>"},{"location":"other/templates/#conditional-resets","title":"Conditional Resets","text":"<p>Conditional resets can be used for many things.</p> <p>Lets say you want to have a reset if a player enters a certain X and Y zone of a level:</p> <p>CORE </p> <ul> <li>The Core is whatever condition(s) you need for your achievement to be true. It can also include normal reset behavior.</li> </ul> <p>ALT1</p> ID Special? Type Memory Cmp Type Mem/Val 1 ResetIf Mem 0xLEVEL = Value LEVELID 2 PauseIf Mem 0xX-COORDS &gt; Value RESET-X-ZONE 3 PauseIf Mem 0xX-COORDS &lt; Value RESET-X-ZONE 4 PauseIf Mem 0xY-COORDS &gt; Value RESET-Y-ZONE 5 PauseIf Mem 0xY-COORDS &lt; Value RESET-Y-ZONE <ul> <li>The reset will only happen if all of the Pauseif conditions are not true.</li> <li>The pause is local to the alt but the reset resets the entire achievement.</li> </ul> <p>ALT2</p> ID Special? Type Memory Cmp Type Mem/Val 1 Mem 0x1 = Mem 0x1 <ul> <li> <p>Any true condition. (to satisfy alt behavior having an always true alt is needed)</p> </li> <li> <p>Note: You can use multiple conditional resets, each one in their own alt group to have far greater control of reset behavior.</p> </li> </ul>"},{"location":"other/tips/","title":"Tips and Tricks","text":"<ul> <li>Memory Digging Tips</li> <li>Achievement Creation Tips</li> <li>Naming Convention Tips</li> <li>Tricks</li> <li>Finding the Address for Demo Mode</li> <li>Address Watcher</li> </ul>"},{"location":"other/tips/#memory-digging-tips","title":"Memory Digging Tips","text":"<p>See also: Memory Inspector Overview.</p> <ul> <li> <p>Start with 8-bit view in the Memory Viewer. Looking at larger chunks of memory will complicate things, but it will make a seasoned developer's job easier. If you're just starting out and unaware of terms like endianess and bit ordering (or when the eyes are tired), its best to make your observations in 8-bit view. Its just easier!</p> </li> <li> <p>Uncheck \"Show Decimal Values\" in the Achievement Editor so you can enter the hex values you see in the Memory Viewer. Its better than using a programmers calculator!</p> </li> <li> <p>If you find an address, also search the same region surrounding it and you could find many more useful addresses.</p> </li> <li> <p>You can input values in the memory viewer to see if it affects the game.</p> </li> <li> <p>Even if something is visibly decreasing in-game, like health, memory can behave differently. It's possible for it to be increasing, so since it's uncommon for you to know for sure, prefer the <code>!=</code> and <code>=</code> filters.</p> </li> <li> <p>If you absolutely cannot reduce the results of a filter, you can try guessing some values or at least how the value is acting (<code>&gt;</code> or <code>&lt;</code>). For example, no health is usually <code>0</code>, Stage 1 is usually value <code>0</code>, Stage 2 is usually value <code>1</code> depending on the type of game.</p> </li> <li> <p>16/32 bit view: remember that when working with 16 or 32 bit address the address to the right comes first. Example: if in 8bit it looks like <code>AB CD WX YZ</code>, in 16 bit it becomes <code>CDAB YZWX</code>. This is called \"big endian byte ordering\". You can safely ignore the geek-speak by just remembering things are stored backwards in 16 bit view and above.</p> </li> <li> <p>Bit fields: Use single bits for things that only change a single bit. In the Memory Inspector, when an address is selected, there will be <code>Bits: 7 6 5 4 3 2 1 0</code> above the addresses. And below those numbers will be either <code>0</code> or <code>1</code>, like <code>0 0 1 0 0 0 1 1</code> in the image below. If <code>bit5</code> has <code>1</code> under it, then <code>bit5=1</code> for that address. Single bit usage is very common for game items/events/unlocks/etc. This may be confusing, but it's very important to understand. Some games with limited memory space use bit fields a lot! Its an important technique to learn.</p> </li> </ul> <p></p>"},{"location":"other/tips/#achievement-creation-tips","title":"Achievement Creation Tips","text":"<p>See also: Unwelcome Concepts and Achievement Design.</p> <ul> <li> <p>Never Avoid using only one condition as much as you can. When using only one condition the achievement will most likely pop at the wrong time.  This is the most common error by a developer.</p> </li> <li> <p>If the game has a demo mode (AI plays the game after you wait a while on the title screen), make sure to find the address for it and add a condition so your achievements don't trigger in demo mode. You'll probably need to know how to use PauseIf and ResetIf.</p> </li> <li> <p><code>PauseIf</code> cheat codes: If the game has a cheat code to increase lives, select stages, etc. Make sure to find the addresses for it and add some kind of protection in your achievements.</p> </li> <li> <p>If you wanna create an achievement for collecting a specific and unique item in the game, add some conditions to make sure the player got the item where it is supposed to be obtained, like in this template here. Otherwise the achievement may trigger by using password, loading a save game, etc.</p> </li> <li> <p>OR conditions: if you need OR conditions, you'll need Alt groups.</p> </li> <li> <p>Avoid Achievement Spam. If a game has 100 levels, do not make an achievement for each level. Do every 25 or so. Consider the time segment a casual player would unlock these progressive Achievements in. If generally you could unlock all in a progressive set of Achievements of this nature in under half an hour as a casual player, that's filler design, and not recommended.</p> </li> <li> <p>Be Creative and Fun: Get as creative as possible with achievements. \"Beat X without using/doing Y\", \"Beat X in 5 seconds\", \"3 heart run\". Be sure casual players can still get these with their best effort. It isn't fun if its way too difficult for a casual player!  (See:  Bonus Set Tips below for the real challenges!). There is a whole page about Achievement Design that can give good advices on how to think about good achievements.</p> </li> <li> <p>Glitchless, please!: Do not make achievements requiring glitches. Glitches, in most cases, corrupt and destabilize game memory and RAM. They break the rest of the set to include. It is however, wise to code block walls stopping players from using them to get easy mastery.</p> </li> <li> <p>Avoid relying on text and graphics: Most of the time, an achievement that requires triggering a special event can be tied to an event flag (usually a single bit or byte), or to an item received by the player. It is better practice to use these values than to check the ID of text being displayed in a text box, or, even worse, video RAM (memory tied to the actual graphics displaying on the screen) as they are often less stable. Especially between different versions of a single game, and they are more difficult to debug.</p> </li> <li> <p>We love Art:  Pretty badges are rewarding badges! It should visually represent the achievement itself, or hint at the location in the game for secrets.  Matching to the game's art style works well.  Google Image searches for \"Sprite Sheets\" is an useful tip to include some game art. If you're a good graphics artist, updating badges is your time to shine! More info can be found at the Badge and Icon Creation page.</p> </li> <li> <p>Regional Consideration: For games with text-triggered achievements (especially RPGs) it's recommend to find an event flag instead of hooking onto text or text ID. Text presentation varies between regional versions making multi-region support difficult.</p> </li> </ul>"},{"location":"other/tips/#naming-convention-tips","title":"Naming Convention Tips","text":"<ul> <li> <p>No Symbols: Do not use accented/special characters like the <code>\u00e9</code> in Pokemon, as they currently break a few things (like feed). They are also not visible in search without the special character. Same for UTF-8 Universal Emoji codes. Allowed exception: Rich Presence Scripts.</p> </li> <li> <p>Mind your English: avoid grammar mistakes. As RetroAchievements is an international community, using English for Code Notes is a good practice, as another developer can use your notes in the future.</p> </li> </ul>"},{"location":"other/tips/#tricks","title":"Tricks","text":""},{"location":"other/tips/#finding-the-address-for-demo-mode","title":"Finding the Address for Demo Mode","text":"<p>An usual trick to start filtering addresses to find the Demo Mode is to let the demo begin and then start to filter <code>=</code> \"Last Known Value\" and press \"Filter\" many times, stopping right before the demo ends (be careful to not filter after the demo ends).</p> <p>Now start the game normally and when you're able to control the character change the filter to <code>!=</code> and then filter one single time. The filtered addresses are the ones that has changed since the demo mode.</p> <p>Now change the filtering back to <code>=</code> and then start a sequence of play-and-filter. Which means play a bit, move around then scenario, defeat some enemies, and then filter.</p> <p>Pro tip: It is very very very useful to have savestates in different levels of the game, so you can do the play-and-filter in different scenarios and make the filtering more effective.</p> <p>After getting a few addresses as result, quite often the demo value will be <code>1</code> (sometimes it's also <code>ff</code>). If you find a potential address edit it to <code>0</code> and check if you become able to control the character. If yes, BINGO!, that's the address you're looking for.</p>"},{"location":"other/tips/#address-watcher","title":"Address Watcher","text":"<p>Here's an easy trick using a dummy achievement to watch an address for any changes, which is something you'll quite often want to know.</p> <p></p> <p>Conditions Explained </p> <ol> <li><code>Value 1 = Value 0</code>; This is to prevent the achievement from ever being true, as the value 0 never equals 1.</li> <li><code>Value 1 = Value 1</code>; For this trick to work the achievement needs hits to reset. When 1 = 1 hits will be added to this condition.</li> <li> <p><code>ResetIf Mem 0x10 != Delta 0x10</code>; This is the address you want to watch. Any time there is a change the achievement will reset.</p> </li> <li> <p>Last of all make sure that <code>Pause on Reset</code> and <code>Active</code> are both checked. Now you will get a pop-up and emulation will pause each time this address changes.</p> </li> </ol>"},{"location":"other/value/","title":"Value Definition","text":"<p>Value definitions are used for leaderboards and rich presence.</p> <p>A value is calculated by evaluating one or more memory reads. Read values can be scaled (multiplication) or summed (addition) to arrive at the final value.</p> <p>NOTE: Value calculations are performed using 32-bit signed integers. As such, the maximum value is 2147483647 and the minimum value is -2147483648. Values above the maximum will wrap around and register as very negative numbers. </p>"},{"location":"other/value/#value-from-measured","title":"Value from Measured","text":"<p>Starting with the 0.77 DLL (and RetroArch 1.8.2), you can use the Measured flag to generate a Value. This supports all logic supported by the achievement editor, but every condition must have a flag that somehow influences the Measured value (i.e. AddSource, AddAddress). Note that the Measured condition cannot have a multiplier directly on it. If the final clause needs to be multiplied, use an additional AddSource and Measure 0.</p> <p>VAL: <code>A:0xhfe24_A:0xhfe25*60_A:0xhfe22*3600_M:0</code></p> <p>The example provided above reads: <pre><code>AddSource 8-bit 0xfe24\nAddSource 8-bit 0xfe25 * Value 60\nAddSource 8-bit 0xfe22 * Value 3600\nMeasured  Value 0\n</code></pre></p> <p>The addresses represent frames, seconds, and minutes respectively, and are individually multiplied and then added together to create a total number of frames that can be submitted to the database.</p>"},{"location":"other/value/#value-from-hitcount","title":"Value from HitCount","text":"<p>Sometimes you want to count the number of times something happens and submit that as the value. You can also do this using Measured syntax. Just add a comparison to your final condition. Do not include an explicit Hit target, or that will be the maximum value that can be submitted.</p> <p>The HitCount on the condition will automatically be set to 0 when the leaderboard starts, and the HitCount will be submitted as the Value when the leaderboard submit trigger activates. You can use PauseIf and ResetIf within the Value conditions to further control the behavior.</p> <p>For example: <pre><code>M:0xH1234!=d0xH1234\n</code></pre> Would submit the number of times the byte at $1234 changed while the leaderboard was active. <pre><code>N:0xH1234!=20_M:0xH1234!=d0xH1234\n</code></pre> Would submit the number of times the byte at $1234 changed to something other than 20 while the leaderboard was active.</p>"},{"location":"other/value/#legacy-syntax","title":"Legacy Syntax:","text":"<p>VAL: <code>0xhfe24*1_0xhfe25*60_0xhfe22*3600</code></p> <p>Before the introduction of the Measured flag, Values were written using their own syntax. Some people still prefer this syntax as it's generally easier to do by hand. A legacy value is the sum of a collection of memory values multiplied by modifiers.</p> <p><code>address*modifier</code> (address times modifier)</p> <p>The <code>_</code> underscore operator separates the individual values and acts as 'plus'. So the example above represents:</p> <pre><code>8-bit 0xfe24 times 1, PLUS\n8-bit 0xfe25 times 60, PLUS\n8-bit 0xfe22 times 3600\n</code></pre> <p>The addresses represent frames, seconds, and minutes respectively, and are individually multiplied and then added together to create a total number of frames that can be submitted to the database.</p> <p>To add a constant, use <code>_vN</code> where N is the constant in decimal (i.e. <code>_v10</code>) will add 10 to the result. You can also use negative values for N (i.e. <code>_v-10</code> will subtract 10 from the result.</p> <p>Tip: modifier can be a non-integer value, so if you need to divide by two, you can multiply by 0.5: <code>0xhfe24*0.5</code></p>"},{"location":"other/value/#modifiers","title":"Modifiers","text":""},{"location":"other/value/#max-of","title":"Max of","text":"<p>Multiple value calculations may be joined with a <code>$</code>. This is similar to alt groups in a trigger, but instead of any one alt group needing to be true, whichever \"alt value\" is largest will be used as the overall value for the expression.</p> <p><code>M:0xH1234$M:0xH1235</code> would return the larger of the values at $1234 or $1235.</p>"},{"location":"other/value/#binary-inversion","title":"Binary Inversion","text":"<p>A single memory reference can be prefixed with a <code>~</code> to perform a binary inversion on it. After reading the value from memory, every bit is switches (0s become 1s, 1s become 0s).</p> <p>Typically, this is used to conditionally add or subtract a value:</p> <p><code>A:0xH1234*~0xM1233_M:0xH1235</code> will add the byte at $1234 to the byte at $1235 if bit0 of $1233 is not set.</p>"},{"location":"other/value/#binary-coded-decimal","title":"Binary Coded Decimal","text":"<p>Binary Coded Decimal (BCD) is when a values in memory is stored as decimal digits in each hex digit location. For example, if the memory inspector shows 86 at a byte in memory, it would normally represent the decimal value 134 (0x86 hex = 134 decimal). BCD decoding the value keeps the individual decimal numbers and the result is 86 (0x86 hex = 86 BCD).</p> <p>You can have the runtime decode BCD values by putting a <code>b</code> prefix in front of the memory reference (i.e. <code>b0xW1234</code>). You still need to specify the size of the BCD memory address. b0x1234 reads a 16-bit value. b0xh1234 reads an 8-bit value and b0xX1234 reads a 32-bit value. NOTE: Support for 16-bit and 32-bit BCD decoding is a feature of the 0.075 toolkit.</p>"},{"location":"richpresence/rp/","title":"Rich Presence Creation","text":"<ul> <li>Introduction</li> <li>How Does it work?</li> <li>Example</li> <li>Macros</li> <li>Lookups</li> <li>Format</li> <li>Built-in macros</li> <li>Display</li> <li>Example Lookup Breakdown</li> <li>Conditional Display Strings</li> <li>Limits</li> <li>Tips and Tricks</li> <li>Value Properties</li> <li>Unicode Standard Symbols</li> <li>Developing Rich Presence</li> <li>Parse Errors</li> </ul>"},{"location":"richpresence/rp/#introduction","title":"Introduction","text":"<p>Rich Presence (RP) is brief overview of what active players are currently doing in their game. To have RP in a game you need a Rich Presence script, which is created by Developers. The script checks the player's game memory and reports the values of certain addresses with definitions assigned by the Developer such as which stage the player is on, how many lives they have, if the game is paused, what game mode they are playing, what the player has accomplished, etc. This information is reported back to the website once every two minutes.</p> <p>A good rich presence should inform other users how far into the game you are (level/ town/dungeon), and give an overall sense of how the player is doing (score/remaining lives/character level). Additional details may be useful, depending on their context within the game. Try not to go overboard with the detail though. Other players don't care what you named your dog, or need to know how many bullets you have left, especially since it only updates every two minutes. Additionally, the more fluff you add to a rich presence display, the more diluted the important information becomes.</p> <p>Example of RP in action:</p> <p> </p> <p>To see the RP live in a game click on the RetroAchievements menu in your emulator and then click on Rich Presence Monitor. A small window will show you your active RP. (Good for debugging)</p> <p></p> <p>The best way to understand Rich Presence is to look at various examples in game, look at the addresses used and look at how the text is displayed in the Rich Presence Monitor and on site.</p>"},{"location":"richpresence/rp/#how-does-it-work","title":"How Does it work?","text":"<p>The game's Rich Presence script is downloaded with the achievement and leaderboard data for a game. As soon as the emulator validates this data, it starts a session for the user. This sets the user's 'Last Seen In' to 'Playing [game]'. 30 seconds later, the Rich Presence script will be evaluated and the result sent to the server. This will update the 'Last Seen In' for the player, which is also used in the 'Active Players' list on the front page. Every two minutes after that, the Rich Presence script will be evaluated again, and the 'Last Seen In' will be updated again. This continues until the user closes the emulator.</p> <p>If there isn't a Rich Presence script for the game, the user has disabled rich presence, or the user has modified the Rich Presence script, the text will remain 'Playing [game]'.</p> <p>The user's 'Last Seen In' may also say 'Fixing Achievements' or 'Developing Achievements' if they have any of the tool windows open. The first will display if achievements have been published for the set. The second if achievements have not been published for the set.</p> <p>The Rich Presence script for a game can be found under the development section on each game's page: </p> <p></p> <p></p>"},{"location":"richpresence/rp/#example-super-mario-bros","title":"Example (Super Mario Bros.)","text":"<p><pre><code>Format:Digit\nFormatType=VALUE\n\nLookup:Mode\n0=[Demo] \n2=[World Complete] \n\nLookup:Paused\n0x81=\u258c\u258c \n0x80=\u258c\u258c \n1=\u258c\u258c \n\nLookup:Star\n5=\ud83c\udf1f \n4=\ud83c\udf1f \n3=\ud83c\udf1f \n2=\ud83c\udf1f \n1=\ud83c\udf1f \n\nLookup:Powerup\n0=Small\n1=Super\n2=Fire\n\nLookup:Swimming\n1= swimming\n\nLookup:Status\n0= [Loading]\n1= taking a vine warp\n2= entering a warp pipe\n3= entering a warp pipe\n4= \ud83d\udea9\n5= [Stage Complete]\n6= [Game Over]\n7= [Entering Area]\n9= growing\n0xA= shrinking\n0xB= \ud83d\udc80\n0xC= powering up\n\nLookup:Quest\n0x0=1st\n0x1=2nd\n\nDisplay:\n@Mode(0xh770)@Paused(0xh776)@Star(0xM79f_0xN79f_0xo79f_0xP79f_0xQ79f_0xR79f)@Powerup(0xh0756) Mario in @Digit(0xh75f_v1)-@Digit(0xh75c_v1)@Swimming(0xh704)@Status(0xhe), \ud83d\udeb6:@Digit(0xh75a_v1), @Quest(0xh7fc) Quest\n</code></pre> It breaks down into a series of Lookup objects, Format objects and one Display object. </p>"},{"location":"richpresence/rp/#macros","title":"Macros","text":"<p>A macro converts a value into a user-friendly string. Macros are placed within a display string and will be replaced when the display string is evaluated. A macro starts with an <code>@</code>, then the name of the macro, an opening parenthesis, the value to evaluate, and a closing parenthesis.</p> <p><code>@Macro(0xh1234)</code> says read the byte at $1234, transform it using the <code>Macro</code> macro, and place the result in the display string where the macro had been.</p> <p>Parameters for each macro are constructed using a value definition.</p>"},{"location":"richpresence/rp/#lookups","title":"Lookups","text":"<p>Lookups are defined like this:  <pre><code>Lookup:NameOfLookup\n1=Text When 1\n2=Text When 2\n...\n</code></pre> When a display string references a Lookup, it's value will be located in the table and the associated text will be displayed.</p> <p>NOTE: Values in the Lookup should be in decimal. If you want to use hex values, include a <code>0x</code> prefix. (i.e. <code>0x12=Eighteen</code>)</p> <p>You can also specify multiple values for a single text string: <pre><code>1-5,10=Text When These Values\n*=Text For All Other Values\n</code></pre> In this example, the values 1, 2, 3, 4, 5, and 10 all map to the first text string.</p> <p>Anything that doesn't match an item defined in the lookup table will return the text associated with <code>*</code>. If <code>*</code> does not appear in the lookup table, no text will be returned if a value doesn't have an entry.</p>"},{"location":"richpresence/rp/#format","title":"Format","text":"<p>Format tables are defined like this: <pre><code>Format:Score\nFormatType=VALUE\n</code></pre></p> <p>Begin with <code>Format:</code>, then the name of the Format converter. On the next line, give <code>FormatType=</code>, then one of the following:</p> <ul> <li><code>VALUE</code>: generic value, no leading zeroes. </li> <li><code>SCORE</code>/<code>POINTS</code>: generic value, padded with leading 0s to 6 digits.</li> <li><code>TIME</code>/<code>FRAMES</code>: value describes the number of frames elapsed, and will be turned into 00:00.00 by multiplying by 100 (hundredths of a second) and dividing by 60 (frames per second). If your system runs at something other than 60 fps, you'll have to do the conversion yourself and use <code>MILLISECS</code>.</li> <li><code>MILLISECS</code>: value describes the number of hundredths of a second elapsed, and will be turned into 00:00.00 </li> <li><code>SECS</code>: value describes the number of seconds elapsed, and will be turned into 00:00 </li> <li><code>MINUTES</code>: value describes the number of minutes elapsed, and will be turned into 0h00</li> <li><code>SECS_AS_MINS</code>: value describes the number of seconds elapsed, and will be turned into 0h00</li> <li><code>FLOAT1</code>-<code>FLOAT6</code>: formats a floating point number with the specified number of digits after the decimal</li> </ul>"},{"location":"richpresence/rp/#built-in-macros","title":"Built-in macros","text":"<p>As of the 1.0 version of the DLL, you can use predefined macros for the most common formats. The following macros are now implicit:</p> Macro Format Description <code>@Number()</code> <code>VALUE</code> A generic value with no leading zeroes <code>@Score()</code> <code>SCORE</code> A generic value, padded with leading zeroes to six digits <code>@Centiseconds()</code> <code>MILLISECS</code> The number of hundreths of a second elapsed, and will be formatted as <code>00:00.00</code> <code>@Seconds()</code> <code>SECS</code> The number of seconds elapsed, and will be formatted as <code>00:00</code> <code>@Minutes()</code> <code>MINUTES</code> The number of minutes elapsed, and will be formatted as <code>0h00</code> <code>@Float1()</code> <code>FLOAT1</code> A floating point number, formatted with one digit after the decimal <code>@Float2()</code> <code>FLOAT2</code> A floating point number, formatted with two digits after the decimal <code>@Float3()</code> <code>FLOAT3</code> A floating point number, formatted with three digits after the decimal <code>@Float4()</code> <code>FLOAT4</code> A floating point number, formatted with four digits after the decimal <code>@Float5()</code> <code>FLOAT5</code> A floating point number, formatted with five digits after the decimal <code>@Float6()</code> <code>FLOAT6</code> A floating point number, formatted with six digits after the decimal <code>@ASCIIChar()</code> n/a Converts a value from 0x20-0x7F into a character using the ASCII character map. Other values will be converted to <code>?</code> <code>@UnicodeChar()</code> n/a Converts a value into a character using the 16-bit Unicode character map. Unknown values will be converted to <code>\ufffd</code>"},{"location":"richpresence/rp/#display","title":"Display","text":"<p>Display is a string that gets shown in the 'Active Players' box on the front page and the 'Last Seen In' section of the player's profile.</p> <p>It is built by replacing any macros in the display string with text from a Lookup or formatted values from a Format converter. Each macro is identified by a single '@', which is followed by the name for the Lookup or Format (case sensitive!), and immediately after, in parenthesis, a value specifying what to send to that Lookup or Format object.</p> <p><code>Using @Powerup(0xh756)!</code> </p> <p>This means use the Lookup or Format that's called <code>Powerup</code>, and give it whatever 8-bit value is in the address 0x756. After converting, put the result in between \"Using \" and \"!\".</p> <p>NOTE: Lookup/Format names are case sensitive and must exactly match the usage in the Display string: <code>@test(0x1234)</code> will not find <code>Format:Test</code></p> <p>NOTE: Lookup/Format definitions cannot contain spaces before or after the name. <code>@test(0x1234)</code> will not find <code>Format:test</code> or <code>Format:   test</code></p>"},{"location":"richpresence/rp/#example-lookup-breakdown","title":"Example Lookup Breakdown","text":"<ul> <li><code>@Mode(0xh770)</code> - Lookup for the address that shows if the game is in demo mode or a world has been completed.  </li> <li><code>@Paused(0xh776)</code> - Lookup for the address that shows if the game is paused (3 values are used, two of them are for pausing and unpausing).  </li> <li><code>@Star(0xM79f_0xN79f_0xo79f_0xP79f_0xQ79f_0xR79f)</code> - Lookup for the address of if Mario has Star invincibility. More on this later.  </li> <li><code>@Powerup(0xh756)</code> - Lookup for the address that show if Mario is Small, big or has fire power.  </li> <li><code>Mario in</code> - Static text to string lookup and format objects together.  </li> <li><code>@Digit(0xh75f_v1)</code> - <code>Digit</code> is a format object defined as a value. The address 0xh75f is the World minus 1 (because it is 0 based, as in it starts counting at 0). <code>_v1</code> Means + value 1. <code>_v+1</code> is also correct.  </li> <li><code>-</code> - More static text to split World and Level. as in the hyphen in World 1-1.  </li> <li><code>@Digit(0xh75c_v1)</code> - Another use of the <code>Digit</code> format object. This time It's looking up the stage. World 1-X.  </li> <li><code>@Swimming(0xh704)</code> - Lookup for the address that shows if the player is swimming.  </li> <li><code>@Status(0xhe)</code> - Lookup for the address that shows Mario's status, such as going through pipes.  </li> <li><code>, \ud83d\udeb6:</code> - More static text. \ud83d\udeb6 is a symbol for lives.  </li> <li><code>@Digit(0xh75a_v1)</code> - Third use of the <code>Digit</code> format object. This time it's checking the player lives address.  </li> <li><code>,</code> - Static text.  </li> <li><code>@Quest(0xh7fc)</code> A lookup to see if the player is in normal or on the 2nd quest, hardmode.  </li> <li><code>Quest</code> - Static Text.  </li> </ul>"},{"location":"richpresence/rp/#conditional-display-strings","title":"Conditional Display Strings","text":"<pre><code>Display:\n?0x 000085=0?Title Screen\n?0xT00007c=1?Custom Map in @Landscape(0xH00016c)\nPlaying Battle @Battle(0x 00007c*0.2) in @Landscape(0xH00016c)\n</code></pre> <p>The existing <code>Display:</code> marker is still used to indicate the start of the display block. If the next line starts with a question mark, it is considered to be a conditional display string. The portion of the line between the two question marks is the conditional clause. If the conditional clause evaluates true, then the remaining portion of the line is used as the display string. If it does not evaluate true, then processing proceeds to the next line. If it starts with a question mark, the same process repeats. If it does not start with a question mark, the entire line is used as the default display string.</p> <p>NOTE: A default display string is required in case none of the conditional display strings match. If you only have conditional display strings, the script will appear to do nothing.</p> <p>Looking at this example, if the 16-bit value at $0085 is 0, the display string is <code>Title Screen</code>. If not, the next line is examined. If the 7th bit of $007C is 1, the display string is <code>Custom Map in @Landscape(0xH00016c)</code>. If not, the final line does not have a conditional clause and is used.</p> <p>Display strings associated with a conditional clause support all of the same syntax as the default display string. In this example, you can see the <code>@Landscape</code> lookup is used in both the conditional display string and the default display string. The lookup itself only has to be defined once.</p> <p>The conditional phrase supports all of the previously mentioned address accessors as well as AND (_) and OR (S) logic. Note that OR clauses still require a 'core' group, just like achievements.</p> <ul> <li> <p><code>?0xH1234=32_0xH2345=0?and example</code></p> <p>if the 8-bit value at $1234 is 32 and the 8-bit value at $2345 is 0, display <code>and example</code></p> </li> <li> <p><code>?0xH1234=32S0xH2345=1S0xH2345=2?or example</code></p> <p>if the 8-bit value at $1234 is 32 and the 8-bit value at $2345 is 1 or 2, display <code>or example</code></p> </li> <li> <p><code>?0xH1234=32_0xH5678=33S0xH2345=1S0xH2345=2?and/or example</code></p> <p>if the 8-bit value at $1234 is 32 and the 8-bit value at $5678 is 33 and the 8-bit value at $2345 is 1 or 2, display <code>and/or example</code></p> </li> </ul> <p>Pro-tip: Conditions can be created using the achievement editor. Once you have your condition defined, use the <code>Copy Def</code> button to copy the achievement definition to the clipboard so you can paste it into the rich presence script.</p>"},{"location":"richpresence/rp/#limits","title":"Limits","text":"<ul> <li>65,535 character limit for script  </li> <li>255 character limit for what is displayed  </li> <li>Unicode characters are allowed, but use count as more than 1 character towards the specified limits.</li> </ul>"},{"location":"richpresence/rp/#tips-and-tricks","title":"Tips and Tricks","text":"<ul> <li>Comments can be added anywhere in the script. A double slash (<code>//</code>) indicates the remaining portion of the line should be ignored when processing the script. Note: comments still apply toward the script size limit.</li> <li>Lookup names can be as short as a single character if you need to squeeze in a few extra characters.</li> <li>Leading zeros can be removed from addresses (<code>0xh0001</code> can be shortened to <code>0xh1</code>).</li> <li>Turning all your values from hex into decimal will take up less characters.</li> <li>Unicode characters don't always \"take up less space\" they often take up to four system characters.</li> <li>Each <code>Lookup</code> or <code>Format</code> named mapping can be referenced multiple times with the same or different addresses. You can define a single <code>Format:Number FormatType=VALUE</code> instead of defining individual ones for Lives, Score, Level, etc.</li> <li>Putting spaces in your Lookups sometimes before or after can allow you to hide certain lookups when they are not needed, like how <code>@Pause</code>, <code>@Star</code>, <code>@Swimming</code>, and @Mode do. </li> </ul>"},{"location":"richpresence/rp/#value-properties","title":"Value Properties","text":"<p>When using lookup and format objects <code>@object()</code> it's possible to combine and perform calculations. Macro parameters are value definitions, so you can use multiplication, addition, and even some logic to generate values that aren't directly available in memory.</p> <p>Example <code>@Score(0xh28*10_0xh29*1000_0xh26*100000) points</code> </p> <p>This means use the Lookup or Format <code>Score</code>, and give it the sum of: - the 8-bit value at 0x28 times 10, ADD - the 8-bit value at 0x29 times 1000, ADD - the 8-bit value at 0x26 times 100000  </p>"},{"location":"richpresence/rp/#unicode-standard-symbols","title":"Unicode Standard Symbols","text":"<p>You can without doubt use these symbols in rich presence.</p> <p>\u258c\u258c=Paused \ud83d\udd01=Continues \u23f0=In Game Time/Game Clock \ud83d\udd11=Keys \ud83d\udca3=Bombs \u2764\ufe0f or \u2764=In a game with hearts (e.g. Zelda)  \ud83d\udcb0=Money \ud83d\udea9=Level/Stage   </p> <p>While making Rich Presence, devs need to be careful that they are communicating clearly. If you are using non-standard symbols they will make sense to you but could be entirely confusing to others. When using non-standard symbols, check them with someone else or a few people to see if the symbols you use make sense. If they don't, use better symbols, use text or use symbols alongside of text.</p> <p>For custom unicode/emoji ShapeCatcher is an excellent resource, you can draw what you're looking for and an AI will find similar matches. Just be careful to not use unicode that too obscure, as they don't all display on all systems.</p> <p>Take note of community display preference:</p> <p></p>"},{"location":"richpresence/rp/#developing-rich-presence","title":"Developing Rich Presence","text":"<p>The toolkit does not currently have an integrated Rich Presence editor, but you can test local changes before putting them on the server. Once you've started a game and the current Rich Presence has been downloaded from the server, you can find it in <code>RACache\\Data\\XXX-Rich.txt</code> where XXX is the game ID. </p> <p>The Rich Presence Monitor (openable from the RetroAchievments menu) reads this file and shows the current value every second while the window is open.</p> <p>If you make changes to the <code>XXX-Rich.txt</code> file, and reselect the menu option, it will read the new changes and allow you to immediate test them without applying the changes to the server. Continue to make changes and reselect the menu option until the script is behaving as you expect, then copy the contents to the server page to make it available to everyone else.</p> <p>NOTE: The <code>XXX-Rich.txt</code> file is overwritten with the current server data each time the game is opened. As long as you still have the file open in an editor, you can always save your changes over the updated file after reopening the game.</p>"},{"location":"richpresence/rp/#parse-errors","title":"Parse Errors","text":"Code Enum Description -2 <code>INVALID_MEMORY_OPERAND</code> A memory operand was expected and not found. Memory operands start with <code>0x</code>, then a size indicator. The most common causes of this are forgetting the <code>0x</code> or having an <code>_S</code> or <code>__</code> in the script. -3 <code>INVALID_CONST_OPERAND</code> A lookup key could not be evaluated. The most common cause of this is using hex without the <code>0x</code> prefix. This may also occur on older versions of RetroArch when using CSV or range keys for lookups. -6 <code>INVALID_OPERATOR</code> An unknown operator was encountered. The most common cause of this is using <code>!</code> instead of <code>!=</code> -16 <code>MISSING_VALUE</code> A macro was encountered without providing a value (i.e. <code>@Points</code> instead of <code>@Points(0xh1234)</code>) -18 <code>MISSING_DISPLAY_STRING</code> The rich presence script did not contain a <code>Display:</code> element, or contained only conditional display strings -20 <code>RC_INVALID_VALUE_FLAG</code> A non-combining flag is used in a non-trigger context. Combining flags are AddSource, SubSource, AddHits, AddAddress and AndNext. <p>Additionally, if you see <code>[Unknown macro]</code>, that means the macro name could not be resolved. For example <code>@Points(0xh1234)</code> without defining <code>Format:Points</code> would generate <code>[Unknown macro]Points(0xh1234)</code>.</p> <p>This issue happens sometimes when a Rich Presence is created in the <code>&lt;GameID&gt;-Rich.txt</code> file in the <code>RACache&gt;Data</code> folder. In this case the issue can be fixed by adding an empty line at the start of the file.</p>"}]}